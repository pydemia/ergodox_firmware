   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.switch_default_layer,"ax",@progbits
  12               	switch_default_layer:
  13               	.LFB117:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 239:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 240:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 241:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 244:./tmk_core/common/command.c **** 
 245:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 246:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 247:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 248:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 249:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 250:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 251:./tmk_core/common/command.c **** #endif
 252:./tmk_core/common/command.c **** 
 253:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 254:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 255:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 256:./tmk_core/common/command.c **** #   endif
 257:./tmk_core/common/command.c **** #endif
 258:./tmk_core/common/command.c **** 	return;
 259:./tmk_core/common/command.c **** }
 260:./tmk_core/common/command.c **** 
 261:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 262:./tmk_core/common/command.c **** static void print_eeconfig(void)
 263:./tmk_core/common/command.c **** {
 264:./tmk_core/common/command.c **** 
 265:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 266:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 269:./tmk_core/common/command.c **** 
 270:./tmk_core/common/command.c ****     debug_config_t dc;
 271:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 272:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 273:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 274:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 275:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 276:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 277:./tmk_core/common/command.c **** 
 278:./tmk_core/common/command.c ****     keymap_config_t kc;
 279:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 280:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 281:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 282:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 283:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 285:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 288:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 289:./tmk_core/common/command.c **** 
 290:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 291:./tmk_core/common/command.c ****     backlight_config_t bc;
 292:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 293:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 294:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 295:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 296:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 297:./tmk_core/common/command.c **** 
 298:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 299:./tmk_core/common/command.c **** 
 300:./tmk_core/common/command.c **** }
 301:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 304:./tmk_core/common/command.c **** {
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 307:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 308:./tmk_core/common/command.c **** #endif
 309:./tmk_core/common/command.c **** 
 310:./tmk_core/common/command.c ****     switch (code) {
 311:./tmk_core/common/command.c **** 
 312:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 313:./tmk_core/common/command.c **** 
 314:./tmk_core/common/command.c **** 		// test breathing sleep LED
 315:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 316:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 317:./tmk_core/common/command.c ****             sleep_led_toggle();
 318:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 319:./tmk_core/common/command.c ****             break;
 320:./tmk_core/common/command.c **** #endif
 321:./tmk_core/common/command.c **** 
 322:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 323:./tmk_core/common/command.c **** 
 324:./tmk_core/common/command.c **** 		// print stored eeprom config
 325:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 326:./tmk_core/common/command.c ****             print("eeconfig:\n");
 327:./tmk_core/common/command.c ****             print_eeconfig();
 328:./tmk_core/common/command.c ****             break;
 329:./tmk_core/common/command.c **** #endif
 330:./tmk_core/common/command.c **** 
 331:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 332:./tmk_core/common/command.c **** 
 333:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 334:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 335:./tmk_core/common/command.c ****             if (host_get_driver()) {
 336:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 337:./tmk_core/common/command.c ****                 clear_keyboard();
 338:./tmk_core/common/command.c ****                 host_set_driver(0);
 339:./tmk_core/common/command.c ****                 print("Locked.\n");
 340:./tmk_core/common/command.c ****             } else {
 341:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 342:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 343:./tmk_core/common/command.c ****             }
 344:./tmk_core/common/command.c ****             break;
 345:./tmk_core/common/command.c **** #endif
 346:./tmk_core/common/command.c **** 
 347:./tmk_core/common/command.c **** 		// print help
 348:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 349:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 350:./tmk_core/common/command.c ****             command_common_help();
 351:./tmk_core/common/command.c ****             break;
 352:./tmk_core/common/command.c **** 
 353:./tmk_core/common/command.c **** 		// activate console
 354:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 355:./tmk_core/common/command.c ****             debug_matrix   = false;
 356:./tmk_core/common/command.c ****             debug_keyboard = false;
 357:./tmk_core/common/command.c ****             debug_mouse    = false;
 358:./tmk_core/common/command.c ****             debug_enable   = false;
 359:./tmk_core/common/command.c ****             command_console_help();
 360:./tmk_core/common/command.c ****             print("C> ");
 361:./tmk_core/common/command.c ****             command_state = CONSOLE;
 362:./tmk_core/common/command.c ****             break;
 363:./tmk_core/common/command.c **** 
 364:./tmk_core/common/command.c ****         // jump to bootloader
 365:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 366:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 367:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 368:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 369:./tmk_core/common/command.c **** 	            stop_all_notes();
 370:./tmk_core/common/command.c ****                 shutdown_user();
 371:./tmk_core/common/command.c ****             #else
 372:./tmk_core/common/command.c **** 	            wait_ms(1000);
 373:./tmk_core/common/command.c ****             #endif
 374:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 375:./tmk_core/common/command.c ****             break;
 376:./tmk_core/common/command.c **** 
 377:./tmk_core/common/command.c ****         // debug toggle
 378:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 379:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 380:./tmk_core/common/command.c ****             if (debug_enable) {
 381:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 382:./tmk_core/common/command.c ****                 debug_matrix   = true;
 383:./tmk_core/common/command.c ****                 debug_keyboard = true;
 384:./tmk_core/common/command.c ****                 debug_mouse    = true;
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****             }
 388:./tmk_core/common/command.c ****             break;
 389:./tmk_core/common/command.c **** 
 390:./tmk_core/common/command.c ****         // debug matrix toggle
 391:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 392:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 393:./tmk_core/common/command.c ****             if (debug_matrix) {
 394:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 395:./tmk_core/common/command.c ****                 debug_enable = true;
 396:./tmk_core/common/command.c ****             } else {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 398:./tmk_core/common/command.c ****             }
 399:./tmk_core/common/command.c ****             break;
 400:./tmk_core/common/command.c **** 
 401:./tmk_core/common/command.c ****         // debug keyboard toggle
 402:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 403:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 404:./tmk_core/common/command.c ****             if (debug_keyboard) {
 405:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 406:./tmk_core/common/command.c ****                 debug_enable = true;
 407:./tmk_core/common/command.c ****             } else {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 409:./tmk_core/common/command.c ****             }
 410:./tmk_core/common/command.c ****             break;
 411:./tmk_core/common/command.c **** 
 412:./tmk_core/common/command.c ****         // debug mouse toggle
 413:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 414:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 415:./tmk_core/common/command.c ****             if (debug_mouse) {
 416:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 417:./tmk_core/common/command.c ****                 debug_enable = true;
 418:./tmk_core/common/command.c ****             } else {
 419:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 420:./tmk_core/common/command.c ****             }
 421:./tmk_core/common/command.c ****             break;
 422:./tmk_core/common/command.c **** 
 423:./tmk_core/common/command.c **** 		// print version
 424:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 425:./tmk_core/common/command.c ****         	print_version();
 426:./tmk_core/common/command.c **** 		    break;
 427:./tmk_core/common/command.c **** 
 428:./tmk_core/common/command.c **** 		// print status
 429:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 430:./tmk_core/common/command.c **** 			print_status();
 431:./tmk_core/common/command.c ****             break;
 432:./tmk_core/common/command.c **** 
 433:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 434:./tmk_core/common/command.c **** 
 435:./tmk_core/common/command.c **** 		// NKRO toggle
 436:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 437:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 438:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 439:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 440:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 441:./tmk_core/common/command.c ****             } else {
 442:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 443:./tmk_core/common/command.c ****             }
 444:./tmk_core/common/command.c ****             break;
 445:./tmk_core/common/command.c **** #endif
 446:./tmk_core/common/command.c **** 
 447:./tmk_core/common/command.c **** 		// switch layers
 448:./tmk_core/common/command.c **** 
 449:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 450:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 451:./tmk_core/common/command.c ****             switch_default_layer(0);
 452:./tmk_core/common/command.c ****             break;
 453:./tmk_core/common/command.c **** 
 454:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 455:./tmk_core/common/command.c **** 
 456:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 457:./tmk_core/common/command.c ****             switch_default_layer(0);
 458:./tmk_core/common/command.c ****             break;
 459:./tmk_core/common/command.c **** 
 460:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 461:./tmk_core/common/command.c ****             switch_default_layer(1);
 462:./tmk_core/common/command.c ****             break;
 463:./tmk_core/common/command.c **** 
 464:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 465:./tmk_core/common/command.c ****             switch_default_layer(2);
 466:./tmk_core/common/command.c ****             break;
 467:./tmk_core/common/command.c **** 
 468:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 469:./tmk_core/common/command.c ****             switch_default_layer(3);
 470:./tmk_core/common/command.c ****             break;
 471:./tmk_core/common/command.c **** 
 472:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 473:./tmk_core/common/command.c ****             switch_default_layer(4);
 474:./tmk_core/common/command.c ****             break;
 475:./tmk_core/common/command.c **** 
 476:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 477:./tmk_core/common/command.c ****             switch_default_layer(5);
 478:./tmk_core/common/command.c ****             break;
 479:./tmk_core/common/command.c **** 
 480:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 481:./tmk_core/common/command.c ****             switch_default_layer(6);
 482:./tmk_core/common/command.c ****             break;
 483:./tmk_core/common/command.c **** 
 484:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 485:./tmk_core/common/command.c ****             switch_default_layer(7);
 486:./tmk_core/common/command.c ****             break;
 487:./tmk_core/common/command.c **** 
 488:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 489:./tmk_core/common/command.c ****             switch_default_layer(8);
 490:./tmk_core/common/command.c ****             break;
 491:./tmk_core/common/command.c **** 
 492:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 493:./tmk_core/common/command.c ****             switch_default_layer(9);
 494:./tmk_core/common/command.c ****             break;
 495:./tmk_core/common/command.c **** #endif
 496:./tmk_core/common/command.c **** 
 497:./tmk_core/common/command.c **** 
 498:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 501:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 502:./tmk_core/common/command.c ****             break;
 503:./tmk_core/common/command.c ****         case KC_F10:
 504:./tmk_core/common/command.c ****             switch_default_layer(0);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c **** #endif
 507:./tmk_core/common/command.c **** 
 508:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 509:./tmk_core/common/command.c **** 
 510:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 511:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 512:./tmk_core/common/command.c ****             break;
 513:./tmk_core/common/command.c ****         case KC_0:
 514:./tmk_core/common/command.c ****             switch_default_layer(0);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c **** #endif
 517:./tmk_core/common/command.c **** 
 518:./tmk_core/common/command.c ****         default:
 519:./tmk_core/common/command.c ****             print("?");
 520:./tmk_core/common/command.c ****             return false;
 521:./tmk_core/common/command.c ****     }
 522:./tmk_core/common/command.c ****     return true;
 523:./tmk_core/common/command.c **** }
 524:./tmk_core/common/command.c **** 
 525:./tmk_core/common/command.c **** 
 526:./tmk_core/common/command.c **** /***********************************************************
 527:./tmk_core/common/command.c ****  * Command console
 528:./tmk_core/common/command.c ****  ***********************************************************/
 529:./tmk_core/common/command.c **** static void command_console_help(void)
 530:./tmk_core/common/command.c **** {
 531:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 532:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 533:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 534:./tmk_core/common/command.c ****           "m:	mousekey\n"
 535:./tmk_core/common/command.c **** #endif
 536:./tmk_core/common/command.c ****     );
 537:./tmk_core/common/command.c **** }
 538:./tmk_core/common/command.c **** 
 539:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 540:./tmk_core/common/command.c **** {
 541:./tmk_core/common/command.c ****     switch (code) {
 542:./tmk_core/common/command.c ****         case KC_H:
 543:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 544:./tmk_core/common/command.c ****             command_console_help();
 545:./tmk_core/common/command.c ****             break;
 546:./tmk_core/common/command.c ****         case KC_Q:
 547:./tmk_core/common/command.c ****         case KC_ESC:
 548:./tmk_core/common/command.c ****             command_state = ONESHOT;
 549:./tmk_core/common/command.c ****             return false;
 550:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 551:./tmk_core/common/command.c ****         case KC_M:
 552:./tmk_core/common/command.c ****             mousekey_console_help();
 553:./tmk_core/common/command.c ****             print("M> ");
 554:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 555:./tmk_core/common/command.c ****             return true;
 556:./tmk_core/common/command.c **** #endif
 557:./tmk_core/common/command.c ****         default:
 558:./tmk_core/common/command.c ****             print("?");
 559:./tmk_core/common/command.c ****             return false;
 560:./tmk_core/common/command.c ****     }
 561:./tmk_core/common/command.c ****     print("C> ");
 562:./tmk_core/common/command.c ****     return true;
 563:./tmk_core/common/command.c **** }
 564:./tmk_core/common/command.c **** 
 565:./tmk_core/common/command.c **** 
 566:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 567:./tmk_core/common/command.c **** /***********************************************************
 568:./tmk_core/common/command.c ****  * Mousekey console
 569:./tmk_core/common/command.c ****  ***********************************************************/
 570:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 571:./tmk_core/common/command.c **** 
 572:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 573:./tmk_core/common/command.c **** {
 574:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 575:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 576:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 577:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 578:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 579:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 580:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 581:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 582:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 583:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 584:./tmk_core/common/command.c **** 
 585:./tmk_core/common/command.c **** }
 586:./tmk_core/common/command.c **** 
 587:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 588:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 589:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 590:./tmk_core/common/command.c **** {
 591:./tmk_core/common/command.c ****     switch (param) {
 592:./tmk_core/common/command.c ****         case 1:
 593:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 594:./tmk_core/common/command.c ****                 mk_delay += inc;
 595:./tmk_core/common/command.c ****             else
 596:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 597:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 598:./tmk_core/common/command.c ****             break;
 599:./tmk_core/common/command.c ****         case 2:
 600:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 601:./tmk_core/common/command.c ****                 mk_interval += inc;
 602:./tmk_core/common/command.c ****             else
 603:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 604:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 605:./tmk_core/common/command.c ****             break;
 606:./tmk_core/common/command.c ****         case 3:
 607:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 608:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 609:./tmk_core/common/command.c ****             else
 610:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 611:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 612:./tmk_core/common/command.c ****             break;
 613:./tmk_core/common/command.c ****         case 4:
 614:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 615:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 616:./tmk_core/common/command.c ****             else
 617:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 618:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 619:./tmk_core/common/command.c ****             break;
 620:./tmk_core/common/command.c ****         case 5:
 621:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 622:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 623:./tmk_core/common/command.c ****             else
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 625:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 626:./tmk_core/common/command.c ****             break;
 627:./tmk_core/common/command.c ****         case 6:
 628:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 629:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 630:./tmk_core/common/command.c ****             else
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 632:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 633:./tmk_core/common/command.c ****             break;
 634:./tmk_core/common/command.c ****     }
 635:./tmk_core/common/command.c **** }
 636:./tmk_core/common/command.c **** 
 637:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 638:./tmk_core/common/command.c **** {
 639:./tmk_core/common/command.c ****     switch (param) {
 640:./tmk_core/common/command.c ****         case 1:
 641:./tmk_core/common/command.c ****             if (mk_delay > dec)
 642:./tmk_core/common/command.c ****                 mk_delay -= dec;
 643:./tmk_core/common/command.c ****             else
 644:./tmk_core/common/command.c ****                 mk_delay = 0;
 645:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 646:./tmk_core/common/command.c ****             break;
 647:./tmk_core/common/command.c ****         case 2:
 648:./tmk_core/common/command.c ****             if (mk_interval > dec)
 649:./tmk_core/common/command.c ****                 mk_interval -= dec;
 650:./tmk_core/common/command.c ****             else
 651:./tmk_core/common/command.c ****                 mk_interval = 0;
 652:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 653:./tmk_core/common/command.c ****             break;
 654:./tmk_core/common/command.c ****         case 3:
 655:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 656:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 657:./tmk_core/common/command.c ****             else
 658:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 659:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 660:./tmk_core/common/command.c ****             break;
 661:./tmk_core/common/command.c ****         case 4:
 662:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 663:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 664:./tmk_core/common/command.c ****             else
 665:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 666:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 667:./tmk_core/common/command.c ****             break;
 668:./tmk_core/common/command.c ****         case 5:
 669:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 670:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 671:./tmk_core/common/command.c ****             else
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 673:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 674:./tmk_core/common/command.c ****             break;
 675:./tmk_core/common/command.c ****         case 6:
 676:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 677:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 678:./tmk_core/common/command.c ****             else
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 680:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 681:./tmk_core/common/command.c ****             break;
 682:./tmk_core/common/command.c ****     }
 683:./tmk_core/common/command.c **** }
 684:./tmk_core/common/command.c **** 
 685:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 686:./tmk_core/common/command.c **** {
 687:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 688:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 689:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 690:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 691:./tmk_core/common/command.c ****           "3:	max_speed\n"
 692:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 693:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 694:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 695:./tmk_core/common/command.c ****           "\n"
 696:./tmk_core/common/command.c ****           "p:	print values\n"
 697:./tmk_core/common/command.c ****           "d:	set defaults\n"
 698:./tmk_core/common/command.c ****           "up:	+1\n"
 699:./tmk_core/common/command.c ****           "down:	-1\n"
 700:./tmk_core/common/command.c ****           "pgup:	+10\n"
 701:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 702:./tmk_core/common/command.c ****           "\n"
 703:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 704:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 705:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 706:./tmk_core/common/command.c **** }
 707:./tmk_core/common/command.c **** 
 708:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 709:./tmk_core/common/command.c **** {
 710:./tmk_core/common/command.c ****     switch (code) {
 711:./tmk_core/common/command.c ****         case KC_H:
 712:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 713:./tmk_core/common/command.c ****             mousekey_console_help();
 714:./tmk_core/common/command.c ****             break;
 715:./tmk_core/common/command.c ****         case KC_Q:
 716:./tmk_core/common/command.c ****         case KC_ESC:
 717:./tmk_core/common/command.c ****             if (mousekey_param) {
 718:./tmk_core/common/command.c ****                 mousekey_param = 0;
 719:./tmk_core/common/command.c ****             } else {
 720:./tmk_core/common/command.c ****                 print("C> ");
 721:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 722:./tmk_core/common/command.c ****                 return false;
 723:./tmk_core/common/command.c ****             }
 724:./tmk_core/common/command.c ****             break;
 725:./tmk_core/common/command.c ****         case KC_P:
 726:./tmk_core/common/command.c ****             mousekey_param_print();
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_1:
 729:./tmk_core/common/command.c ****         case KC_2:
 730:./tmk_core/common/command.c ****         case KC_3:
 731:./tmk_core/common/command.c ****         case KC_4:
 732:./tmk_core/common/command.c ****         case KC_5:
 733:./tmk_core/common/command.c ****         case KC_6:
 734:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 735:./tmk_core/common/command.c ****             break;
 736:./tmk_core/common/command.c ****         case KC_UP:
 737:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_DOWN:
 740:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_PGUP:
 743:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGDN:
 746:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_D:
 749:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 750:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 751:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 752:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 753:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 754:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 755:./tmk_core/common/command.c ****             print("set default\n");
 756:./tmk_core/common/command.c ****             break;
 757:./tmk_core/common/command.c ****         default:
 758:./tmk_core/common/command.c ****             print("?");
 759:./tmk_core/common/command.c ****             return false;
 760:./tmk_core/common/command.c ****     }
 761:./tmk_core/common/command.c ****     if (mousekey_param) {
 762:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 763:./tmk_core/common/command.c ****     } else {
 764:./tmk_core/common/command.c ****         print("M>" );
 765:./tmk_core/common/command.c ****     }
 766:./tmk_core/common/command.c ****     return true;
 767:./tmk_core/common/command.c **** }
 768:./tmk_core/common/command.c **** #endif
 769:./tmk_core/common/command.c **** 
 770:./tmk_core/common/command.c **** 
 771:./tmk_core/common/command.c **** /***********************************************************
 772:./tmk_core/common/command.c ****  * Utilities
 773:./tmk_core/common/command.c ****  ***********************************************************/
 774:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 775:./tmk_core/common/command.c **** {
 776:./tmk_core/common/command.c ****     switch (code) {
 777:./tmk_core/common/command.c ****         case KC_1: return 1;
 778:./tmk_core/common/command.c ****         case KC_2: return 2;
 779:./tmk_core/common/command.c ****         case KC_3: return 3;
 780:./tmk_core/common/command.c ****         case KC_4: return 4;
 781:./tmk_core/common/command.c ****         case KC_5: return 5;
 782:./tmk_core/common/command.c ****         case KC_6: return 6;
 783:./tmk_core/common/command.c ****         case KC_7: return 7;
 784:./tmk_core/common/command.c ****         case KC_8: return 8;
 785:./tmk_core/common/command.c ****         case KC_9: return 9;
 786:./tmk_core/common/command.c ****         case KC_0: return 0;
 787:./tmk_core/common/command.c ****     }
 788:./tmk_core/common/command.c ****     return 0;
 789:./tmk_core/common/command.c **** }
 790:./tmk_core/common/command.c **** 
 791:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 792:./tmk_core/common/command.c **** {
  15               		.loc 1 792 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 793:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 794:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
  30               		.loc 1 794 0
  31 0004 41E0      		ldi r20,lo8(1)
  32 0006 50E0      		ldi r21,0
  33 0008 60E0      		ldi r22,0
  34 000a 70E0      		ldi r23,0
  35 000c 8A01      		movw r16,r20
  36 000e 9B01      		movw r18,r22
  37 0010 00C0      		rjmp 2f
  38               		1:
  39 0012 000F      		lsl r16
  40 0014 111F      		rol r17
  41 0016 221F      		rol r18
  42 0018 331F      		rol r19
  43               		2:
  44 001a 8A95      		dec r24
  45 001c 02F4      		brpl 1b
  46 001e C901      		movw r24,r18
  47 0020 B801      		movw r22,r16
  48 0022 0E94 0000 		call default_layer_set
  49               	.LVL1:
  50               	/* epilogue start */
 795:./tmk_core/common/command.c ****     clear_keyboard();
 796:./tmk_core/common/command.c **** }
  51               		.loc 1 796 0
  52 0026 1F91      		pop r17
  53 0028 0F91      		pop r16
 795:./tmk_core/common/command.c ****     clear_keyboard();
  54               		.loc 1 795 0
  55 002a 0C94 0000 		jmp clear_keyboard
  56               	.LVL2:
  57               		.cfi_endproc
  58               	.LFE117:
  60               		.section	.text.command_common,"ax",@progbits
  62               	command_common:
  63               	.LFB113:
 304:./tmk_core/common/command.c **** 
  64               		.loc 1 304 0
  65               		.cfi_startproc
  66               	.LVL3:
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 310:./tmk_core/common/command.c **** 
  71               		.loc 1 310 0
  72 0000 8732      		cpi r24,lo8(39)
  73 0002 00F0      		brlo .+2
  74 0004 00C0      		rjmp .L4
  75 0006 8E31      		cpi r24,lo8(30)
  76 0008 00F0      		brlo .+2
  77 000a 00C0      		rjmp .L5
  78 000c 8031      		cpi r24,lo8(16)
  79 000e 01F4      		brne .+2
  80 0010 00C0      		rjmp .L6
  81 0012 00F4      		brsh .L7
  82 0014 8730      		cpi r24,lo8(7)
  83 0016 01F4      		brne .+2
  84 0018 00C0      		rjmp .L8
  85 001a 00F4      		brsh .L9
  86 001c 8630      		cpi r24,lo8(6)
  87 001e 01F0      		breq .+2
  88 0020 00C0      		rjmp .L26
 355:./tmk_core/common/command.c ****             debug_keyboard = false;
  89               		.loc 1 355 0
  90 0022 8091 0000 		lds r24,debug_config
  91               	.LVL4:
 358:./tmk_core/common/command.c ****             command_console_help();
  92               		.loc 1 358 0
  93 0026 817F      		andi r24,lo8(-15)
  94 0028 8E7F      		andi r24,lo8(~(1<<0))
  95 002a 8093 0000 		sts debug_config,r24
 361:./tmk_core/common/command.c ****             break;
  96               		.loc 1 361 0
  97 002e 81E0      		ldi r24,lo8(1)
  98 0030 8093 0000 		sts command_state,r24
 362:./tmk_core/common/command.c **** 
  99               		.loc 1 362 0
 100 0034 0895      		ret
 101               	.LVL5:
 102               	.L9:
 310:./tmk_core/common/command.c **** 
 103               		.loc 1 310 0
 104 0036 8B30      		cpi r24,lo8(11)
 105 0038 01F4      		brne .+2
 106 003a 00C0      		rjmp .L49
 107 003c 8E30      		cpi r24,lo8(14)
 108 003e 01F0      		breq .+2
 109 0040 00C0      		rjmp .L26
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 110               		.loc 1 403 0
 111 0042 8091 0000 		lds r24,debug_config
 112               	.LVL6:
 113 0046 82FB      		bst r24,2
 114 0048 2227      		clr r18
 115 004a 20F9      		bld r18,0
 116 004c 91E0      		ldi r25,lo8(1)
 117 004e 9227      		eor r25,r18
 118 0050 90FB      		bst r25,0
 119 0052 82F9      		bld r24,2
 120 0054 00C0      		rjmp .L48
 121               	.LVL7:
 122               	.L7:
 310:./tmk_core/common/command.c **** 
 123               		.loc 1 310 0
 124 0056 8631      		cpi r24,lo8(22)
 125 0058 01F4      		brne .+2
 126 005a 00C0      		rjmp .L49
 127 005c 00F4      		brsh .L13
 128 005e 8131      		cpi r24,lo8(17)
 129 0060 01F0      		breq .+2
 130 0062 00C0      		rjmp .L26
 437:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 131               		.loc 1 437 0
 132 0064 0E94 0000 		call clear_keyboard
 133               	.LVL8:
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 134               		.loc 1 438 0
 135 0068 8091 0000 		lds r24,keymap_config
 136 006c 87FB      		bst r24,7
 137 006e 2227      		clr r18
 138 0070 20F9      		bld r18,0
 139 0072 91E0      		ldi r25,lo8(1)
 140 0074 9227      		eor r25,r18
 141 0076 90FB      		bst r25,0
 142 0078 87F9      		bld r24,7
 143 007a 8093 0000 		sts keymap_config,r24
 144 007e 00C0      		rjmp .L49
 145               	.LVL9:
 146               	.L13:
 310:./tmk_core/common/command.c **** 
 147               		.loc 1 310 0
 148 0080 8931      		cpi r24,lo8(25)
 149 0082 01F4      		brne .+2
 150 0084 00C0      		rjmp .L49
 151 0086 8B31      		cpi r24,lo8(27)
 152 0088 01F0      		breq .+2
 153 008a 00C0      		rjmp .L26
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 154               		.loc 1 392 0
 155 008c 8091 0000 		lds r24,debug_config
 156               	.LVL10:
 157 0090 81FB      		bst r24,1
 158 0092 2227      		clr r18
 159 0094 20F9      		bld r18,0
 160 0096 91E0      		ldi r25,lo8(1)
 161 0098 9227      		eor r25,r18
 162 009a 90FB      		bst r25,0
 163 009c 81F9      		bld r24,1
 164 009e 00C0      		rjmp .L48
 165               	.LVL11:
 166               	.L4:
 310:./tmk_core/common/command.c **** 
 167               		.loc 1 310 0
 168 00a0 8833      		cpi r24,lo8(56)
 169 00a2 01F4      		brne .+2
 170 00a4 00C0      		rjmp .L49
 171 00a6 00F4      		brsh .L16
 172 00a8 8932      		cpi r24,lo8(41)
 173 00aa 01F4      		brne .+2
 174 00ac 00C0      		rjmp .L18
 175 00ae 8533      		cpi r24,lo8(53)
 176 00b0 01F4      		brne .+2
 177 00b2 00C0      		rjmp .L18
 178 00b4 8732      		cpi r24,lo8(39)
 179 00b6 01F4      		brne .+2
 180 00b8 00C0      		rjmp .L18
 181 00ba 00C0      		rjmp .L26
 182               	.L16:
 183 00bc 8334      		cpi r24,lo8(67)
 184 00be 01F0      		breq .L18
 185 00c0 00F4      		brsh .L20
 186 00c2 8A33      		cpi r24,lo8(58)
 187 00c4 00F0      		brlo .L26
 501:./tmk_core/common/command.c ****             break;
 188               		.loc 1 501 0
 189 00c6 8953      		subi r24,lo8(-(-57))
 190               	.LVL12:
 191 00c8 00C0      		rjmp .L50
 192               	.LVL13:
 193               	.L20:
 310:./tmk_core/common/command.c **** 
 194               		.loc 1 310 0
 195 00ca 8834      		cpi r24,lo8(72)
 196 00cc 01F4      		brne .L26
 366:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 197               		.loc 1 366 0
 198 00ce 0E94 0000 		call clear_keyboard
 199               	.LVL14:
 200               	.LBB4:
 201               	.LBB5:
 202               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 203               		.loc 2 187 0
 204 00d2 2FEF      		ldi r18,lo8(3199999)
 205 00d4 83ED      		ldi r24,hi8(3199999)
 206 00d6 90E3      		ldi r25,hlo8(3199999)
 207 00d8 2150      	1:	subi r18,1
 208 00da 8040      		sbci r24,0
 209 00dc 9040      		sbci r25,0
 210 00de 01F4      		brne 1b
 211 00e0 00C0      		rjmp .
 212 00e2 0000      		nop
 213               	.LVL15:
 214               	.LBE5:
 215               	.LBE4:
 374:./tmk_core/common/command.c ****             break;
 216               		.loc 1 374 0
 217 00e4 0E94 0000 		call bootloader_jump
 218               	.LVL16:
 219 00e8 00C0      		rjmp .L49
 220               	.LVL17:
 221               	.L8:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 222               		.loc 1 379 0
 223 00ea 9091 0000 		lds r25,debug_config
 224 00ee 892F      		mov r24,r25
 225               	.LVL18:
 226 00f0 8095      		com r24
 227 00f2 8170      		andi r24,lo8(1)
 228 00f4 80FB      		bst r24,0
 229 00f6 90F9      		bld r25,0
 230 00f8 9093 0000 		sts debug_config,r25
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 231               		.loc 1 380 0
 232 00fc 8823      		tst r24
 233 00fe 01F0      		breq .L49
 384:./tmk_core/common/command.c ****             } else {
 234               		.loc 1 384 0
 235 0100 9660      		ori r25,lo8(6)
 236 0102 9860      		ori r25,lo8(1<<3)
 237 0104 9093 0000 		sts debug_config,r25
 238 0108 0895      		ret
 239               	.LVL19:
 240               	.L6:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 241               		.loc 1 414 0
 242 010a 8091 0000 		lds r24,debug_config
 243               	.LVL20:
 244 010e 83FB      		bst r24,3
 245 0110 2227      		clr r18
 246 0112 20F9      		bld r18,0
 247 0114 91E0      		ldi r25,lo8(1)
 248 0116 9227      		eor r25,r18
 249 0118 90FB      		bst r25,0
 250 011a 83F9      		bld r24,3
 251               	.L48:
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 252               		.loc 1 392 0
 253 011c 8093 0000 		sts debug_config,r24
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 254               		.loc 1 393 0
 255 0120 9923      		tst r25
 256 0122 01F0      		breq .L49
 395:./tmk_core/common/command.c ****             } else {
 257               		.loc 1 395 0
 258 0124 8091 0000 		lds r24,debug_config
 259 0128 8160      		ori r24,lo8(1<<0)
 260 012a 8093 0000 		sts debug_config,r24
 261 012e 00C0      		rjmp .L49
 262               	.LVL21:
 263               	.L5:
 511:./tmk_core/common/command.c ****             break;
 264               		.loc 1 511 0
 265 0130 8D51      		subi r24,lo8(-(-29))
 266               	.LVL22:
 267               	.L50:
 268 0132 0E94 0000 		call switch_default_layer
 269               	.LVL23:
 270               	.L49:
 522:./tmk_core/common/command.c **** }
 271               		.loc 1 522 0
 272 0136 81E0      		ldi r24,lo8(1)
 512:./tmk_core/common/command.c ****         case KC_0:
 273               		.loc 1 512 0
 274 0138 0895      		ret
 275               	.LVL24:
 276               	.L18:
 514:./tmk_core/common/command.c ****             break;
 277               		.loc 1 514 0
 278 013a 80E0      		ldi r24,0
 279               	.LVL25:
 280 013c 00C0      		rjmp .L50
 281               	.LVL26:
 282               	.L26:
 520:./tmk_core/common/command.c ****     }
 283               		.loc 1 520 0
 284 013e 80E0      		ldi r24,0
 285               	.LVL27:
 523:./tmk_core/common/command.c **** 
 286               		.loc 1 523 0
 287 0140 0895      		ret
 288               		.cfi_endproc
 289               	.LFE113:
 291               		.section	.text.command_console_extra,"ax",@progbits
 292               		.weak	command_console_extra
 294               	command_console_extra:
 295               	.LFB109:
 113:./tmk_core/common/command.c ****     (void)code;
 296               		.loc 1 113 0
 297               		.cfi_startproc
 298               	.LVL28:
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** 
 303               		.loc 1 116 0
 304 0000 80E0      		ldi r24,0
 305               	.LVL29:
 306 0002 0895      		ret
 307               		.cfi_endproc
 308               	.LFE109:
 310               		.set	command_console_extra.localalias.0,command_console_extra
 311               		.section	.text.command_extra,"ax",@progbits
 312               		.weak	command_extra
 314               	command_extra:
 315               	.LFB119:
 316               		.cfi_startproc
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 321 0000 0C94 0000 		jmp command_console_extra.localalias.0
 322               		.cfi_endproc
 323               	.LFE119:
 325               		.section	.text.command_proc,"ax",@progbits
 326               	.global	command_proc
 328               	command_proc:
 329               	.LFB107:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 330               		.loc 1 77 0
 331               		.cfi_startproc
 332               	.LVL30:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 333               		.loc 1 77 0
 334 0000 CF93      		push r28
 335               	.LCFI2:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 28, -2
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 1 */
 341               	.L__stack_usage = 1
 342 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 343               		.loc 1 78 0
 344 0004 8091 0000 		lds r24,command_state
 345               	.LVL31:
 346 0008 8823      		tst r24
 347 000a 01F0      		breq .L56
 348 000c 8130      		cpi r24,lo8(1)
 349 000e 01F0      		breq .L57
 350 0010 00C0      		rjmp .L95
 351               	.L56:
  80:./tmk_core/common/command.c ****                 return false;
 352               		.loc 1 80 0
 353 0012 E091 0000 		lds r30,keyboard_report
 354 0016 F091 0000 		lds r31,keyboard_report+1
 355 001a 8081      		ld r24,Z
 356 001c 8131      		cpi r24,lo8(17)
 357 001e 01F0      		breq .L61
  80:./tmk_core/common/command.c ****                 return false;
 358               		.loc 1 80 0 is_stmt 0 discriminator 1
 359 0020 8232      		cpi r24,lo8(34)
 360 0022 01F4      		brne .L68
 361 0024 00C0      		rjmp .L61
 362               	.L57:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 363               		.loc 1 85 0 is_stmt 1
 364 0026 E091 0000 		lds r30,keyboard_report
 365 002a F091 0000 		lds r31,keyboard_report+1
 366 002e 8081      		ld r24,Z
 367 0030 8131      		cpi r24,lo8(17)
 368 0032 01F0      		breq .L61
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 369               		.loc 1 85 0 is_stmt 0 discriminator 1
 370 0034 8232      		cpi r24,lo8(34)
 371 0036 01F4      		brne .L62
 372               	.L61:
  86:./tmk_core/common/command.c ****             else
 373               		.loc 1 86 0 is_stmt 1
 374 0038 8C2F      		mov r24,r28
 375 003a 0E94 0000 		call command_extra
 376               	.LVL32:
 377 003e 8111      		cpse r24,__zero_reg__
 378 0040 00C0      		rjmp .L70
  86:./tmk_core/common/command.c ****             else
 379               		.loc 1 86 0 is_stmt 0 discriminator 2
 380 0042 8C2F      		mov r24,r28
 381 0044 0E94 0000 		call command_common
 382               	.LVL33:
 383 0048 00C0      		rjmp .L64
 384               	.L70:
  86:./tmk_core/common/command.c ****             else
 385               		.loc 1 86 0
 386 004a 81E0      		ldi r24,lo8(1)
 387 004c 90E0      		ldi r25,0
 388 004e 00C0      		rjmp .L64
 389               	.L62:
  88:./tmk_core/common/command.c ****             break;
 390               		.loc 1 88 0 is_stmt 1
 391 0050 8C2F      		mov r24,r28
 392 0052 0E94 0000 		call command_console_extra
 393               	.LVL34:
 394 0056 8111      		cpse r24,__zero_reg__
 395 0058 00C0      		rjmp .L72
 396               	.LVL35:
 397               	.LBB8:
 398               	.LBB9:
 541:./tmk_core/common/command.c ****         case KC_H:
 399               		.loc 1 541 0
 400 005a C431      		cpi r28,lo8(20)
 401 005c 01F0      		breq .L66
 402 005e 00F4      		brsh .L67
 403 0060 CB30      		cpi r28,lo8(11)
 404 0062 01F0      		breq .L72
 405 0064 00C0      		rjmp .L65
 406               	.L67:
 407 0066 C932      		cpi r28,lo8(41)
 408 0068 01F0      		breq .L66
 409 006a C833      		cpi r28,lo8(56)
 410 006c 01F0      		breq .L72
 411 006e 00C0      		rjmp .L65
 412               	.L66:
 548:./tmk_core/common/command.c ****             return false;
 413               		.loc 1 548 0
 414 0070 1092 0000 		sts command_state,__zero_reg__
 415 0074 00C0      		rjmp .L65
 416               	.LVL36:
 417               	.L72:
 418               	.LBE9:
 419               	.LBE8:
  88:./tmk_core/common/command.c ****             break;
 420               		.loc 1 88 0
 421 0076 81E0      		ldi r24,lo8(1)
 422               	.L64:
  88:./tmk_core/common/command.c ****             break;
 423               		.loc 1 88 0 is_stmt 0 discriminator 6
 424 0078 8170      		andi r24,lo8(1)
 425 007a 00C0      		rjmp .L92
 426               	.L95:
  96:./tmk_core/common/command.c ****             return false;
 427               		.loc 1 96 0 is_stmt 1
 428 007c 1092 0000 		sts command_state,__zero_reg__
 429               	.L68:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 430               		.loc 1 81 0
 431 0080 80E0      		ldi r24,0
 432 0082 00C0      		rjmp .L92
 433               	.LVL37:
 434               	.L65:
  88:./tmk_core/common/command.c ****             break;
 435               		.loc 1 88 0
 436 0084 80E0      		ldi r24,0
 437 0086 00C0      		rjmp .L64
 438               	.L92:
 439               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 440               		.loc 1 100 0
 441 0088 CF91      		pop r28
 442               	.LVL38:
 443 008a 0895      		ret
 444               		.cfi_endproc
 445               	.LFE107:
 447               		.section	.text.numkey2num,"ax",@progbits
 448               	.global	numkey2num
 450               	numkey2num:
 451               	.LFB116:
 775:./tmk_core/common/command.c ****     switch (code) {
 452               		.loc 1 775 0
 453               		.cfi_startproc
 454               	.LVL39:
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 0 */
 458               	.L__stack_usage = 0
 459 0000 8E51      		subi r24,lo8(-(-30))
 460               	.LVL40:
 461 0002 8A30      		cpi r24,lo8(10)
 462 0004 00F4      		brsh .L98
 463 0006 E82F      		mov r30,r24
 464 0008 F0E0      		ldi r31,0
 465 000a E050      		subi r30,lo8(-(CSWTCH.17))
 466 000c F040      		sbci r31,hi8(-(CSWTCH.17))
 467 000e 8081      		ld r24,Z
 468               	.LVL41:
 469 0010 0895      		ret
 470               	.L98:
 775:./tmk_core/common/command.c ****     switch (code) {
 471               		.loc 1 775 0
 472 0012 80E0      		ldi r24,0
 789:./tmk_core/common/command.c **** 
 473               		.loc 1 789 0
 474 0014 0895      		ret
 475               		.cfi_endproc
 476               	.LFE116:
 478               		.section	.rodata.CSWTCH.17,"a",@progbits
 481               	CSWTCH.17:
 482 0000 01        		.byte	1
 483 0001 02        		.byte	2
 484 0002 03        		.byte	3
 485 0003 04        		.byte	4
 486 0004 05        		.byte	5
 487 0005 06        		.byte	6
 488 0006 07        		.byte	7
 489 0007 08        		.byte	8
 490 0008 09        		.byte	9
 491 0009 00        		.byte	0
 492               	.global	command_state
 493               		.section	.bss.command_state,"aw",@nobits
 496               	command_state:
 497 0000 00        		.zero	1
 498               		.text
 499               	.Letext0:
 500               		.file 3 "/usr/lib/avr/include/stdint.h"
 501               		.file 4 "./tmk_core/common/report.h"
 502               		.file 5 "./tmk_core/common/debug.h"
 503               		.file 6 "./quantum/keycode_config.h"
 504               		.file 7 "./tmk_core/common/command.h"
 505               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 506               		.file 9 "./tmk_core/common/action_util.h"
 507               		.file 10 "./tmk_core/common/action_layer.h"
 508               		.file 11 "./tmk_core/common/action.h"
 509               		.file 12 "./tmk_core/common/bootloader.h"
 510               		.file 13 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccieq5Uo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccieq5Uo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccieq5Uo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccieq5Uo.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccieq5Uo.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccieq5Uo.s:12     .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccieq5Uo.s:62     .text.command_common:0000000000000000 command_common
     /tmp/ccieq5Uo.s:496    .bss.command_state:0000000000000000 command_state
     /tmp/ccieq5Uo.s:294    .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccieq5Uo.s:294    .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccieq5Uo.s:314    .text.command_extra:0000000000000000 command_extra
     /tmp/ccieq5Uo.s:328    .text.command_proc:0000000000000000 command_proc
     /tmp/ccieq5Uo.s:450    .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccieq5Uo.s:481    .rodata.CSWTCH.17:0000000000000000 CSWTCH.17

UNDEFINED SYMBOLS
default_layer_set
clear_keyboard
debug_config
keymap_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
