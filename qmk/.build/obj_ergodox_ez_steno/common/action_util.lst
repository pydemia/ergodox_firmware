   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  11               	.global	get_oneshot_locked_mods
  13               	get_oneshot_locked_mods:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  29:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  30:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  31:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  32:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  33:./tmk_core/common/action_util.c **** #endif
  34:./tmk_core/common/action_util.c **** 
  35:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  36:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  37:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  38:./tmk_core/common/action_util.c **** 
  39:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  40:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  41:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  42:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  43:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  44:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  45:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  46:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  47:./tmk_core/common/action_util.c **** #endif
  48:./tmk_core/common/action_util.c **** 
  49:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  50:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  51:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  52:./tmk_core/common/action_util.c **** 
  53:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  54:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  55:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  56:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 56 0
  23 0000 8091 0000 		lds r24,oneshot_locked_mods
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE103:
  28               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  29               	.global	set_oneshot_locked_mods
  31               	set_oneshot_locked_mods:
  32               	.LFB104:
  57:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  33               		.loc 1 57 0
  34               		.cfi_startproc
  35               	.LVL0:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               		.loc 1 57 0
  41 0000 8093 0000 		sts oneshot_locked_mods,r24
  42 0004 0895      		ret
  43               		.cfi_endproc
  44               	.LFE104:
  46               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
  47               	.global	clear_oneshot_locked_mods
  49               	clear_oneshot_locked_mods:
  50               	.LFB105:
  58:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
  51               		.loc 1 58 0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               		.loc 1 58 0
  58 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  59 0004 0895      		ret
  60               		.cfi_endproc
  61               	.LFE105:
  63               		.section	.text.get_oneshot_layer,"ax",@progbits
  64               	.global	get_oneshot_layer
  66               	get_oneshot_layer:
  67               	.LFB106:
  59:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  60:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  61:./tmk_core/common/action_util.c **** inline bool has_oneshot_mods_timed_out() {
  62:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  63:./tmk_core/common/action_util.c **** }
  64:./tmk_core/common/action_util.c **** #endif
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** 
  67:./tmk_core/common/action_util.c **** /* oneshot layer */
  68:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  69:./tmk_core/common/action_util.c **** /* oneshot_layer_data bits
  70:./tmk_core/common/action_util.c **** * LLLL LSSS
  71:./tmk_core/common/action_util.c **** * where:
  72:./tmk_core/common/action_util.c **** *   L => are layer bits
  73:./tmk_core/common/action_util.c **** *   S => oneshot state bits
  74:./tmk_core/common/action_util.c **** */
  75:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  76:./tmk_core/common/action_util.c **** 
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
  68               		.loc 1 77 0
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74               		.loc 1 77 0
  75 0000 8091 0000 		lds r24,oneshot_layer_data
  76 0004 8595      		asr r24
  77 0006 8595      		asr r24
  78 0008 8595      		asr r24
  79 000a 0895      		ret
  80               		.cfi_endproc
  81               	.LFE106:
  83               		.section	.text.get_oneshot_layer_state,"ax",@progbits
  84               	.global	get_oneshot_layer_state
  86               	get_oneshot_layer_state:
  87               	.LFB107:
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
  88               		.loc 1 78 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94               		.loc 1 78 0
  95 0000 8091 0000 		lds r24,oneshot_layer_data
  96 0004 8770      		andi r24,lo8(7)
  97 0006 0895      		ret
  98               		.cfi_endproc
  99               	.LFE107:
 101               		.section	.text.set_oneshot_layer,"ax",@progbits
 102               	.global	set_oneshot_layer
 104               	set_oneshot_layer:
 105               	.LFB108:
  79:./tmk_core/common/action_util.c **** 
  80:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  81:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  82:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  83:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  84:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  85:./tmk_core/common/action_util.c **** }
  86:./tmk_core/common/action_util.c **** #endif
  87:./tmk_core/common/action_util.c **** 
  88:./tmk_core/common/action_util.c **** /* Oneshot layer */
  89:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  90:./tmk_core/common/action_util.c **** {
 106               		.loc 1 90 0
 107               		.cfi_startproc
 108               	.LVL1:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  91:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 113               		.loc 1 91 0
 114 0000 98E0      		ldi r25,lo8(8)
 115 0002 899F      		mul r24,r25
 116 0004 9001      		movw r18,r0
 117 0006 1124      		clr __zero_reg__
 118 0008 262B      		or r18,r22
 119 000a 2093 0000 		sts oneshot_layer_data,r18
  92:./tmk_core/common/action_util.c ****     layer_on(layer);
 120               		.loc 1 92 0
 121 000e 0C94 0000 		jmp layer_on
 122               	.LVL2:
 123               		.cfi_endproc
 124               	.LFE108:
 126               		.section	.text.reset_oneshot_layer,"ax",@progbits
 127               	.global	reset_oneshot_layer
 129               	reset_oneshot_layer:
 130               	.LFB109:
  93:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  95:./tmk_core/common/action_util.c **** #endif
  96:./tmk_core/common/action_util.c **** }
  97:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 131               		.loc 1 97 0
 132               		.cfi_startproc
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* stack size = 0 */
 136               	.L__stack_usage = 0
  98:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 137               		.loc 1 98 0
 138 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 139 0004 0895      		ret
 140               		.cfi_endproc
 141               	.LFE109:
 143               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 144               	.global	clear_oneshot_layer_state
 146               	clear_oneshot_layer_state:
 147               	.LFB110:
  99:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 100:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 101:./tmk_core/common/action_util.c **** #endif
 102:./tmk_core/common/action_util.c **** }
 103:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 104:./tmk_core/common/action_util.c **** {
 148               		.loc 1 104 0
 149               		.cfi_startproc
 150               	.LVL3:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
 105:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 155               		.loc 1 105 0
 156 0000 2091 0000 		lds r18,oneshot_layer_data
 157               	.LVL4:
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 158               		.loc 1 106 0
 159 0004 8095      		com r24
 160               	.LVL5:
 161 0006 8223      		and r24,r18
 162               	.LVL6:
 163 0008 8093 0000 		sts oneshot_layer_data,r24
 107:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 164               		.loc 1 107 0
 165 000c 982F      		mov r25,r24
 166 000e 9770      		andi r25,lo8(7)
 167 0010 01F4      		brne .L8
 168               		.loc 1 107 0 is_stmt 0 discriminator 1
 169 0012 30E0      		ldi r19,0
 170 0014 482F      		mov r20,r24
 171 0016 082E      		mov __tmp_reg__,r24
 172 0018 000C      		lsl r0
 173 001a 550B      		sbc r21,r21
 174 001c 2417      		cp r18,r20
 175 001e 3507      		cpc r19,r21
 176 0020 01F0      		breq .L8
 108:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 177               		.loc 1 108 0 is_stmt 1
 178 0022 8595      		asr r24
 179 0024 8595      		asr r24
 180 0026 8595      		asr r24
 181 0028 0C94 0000 		jmp layer_off
 182               	.LVL7:
 183               	.L8:
 184 002c 0895      		ret
 185               		.cfi_endproc
 186               	.LFE110:
 188               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 189               	.global	is_oneshot_layer_active
 191               	is_oneshot_layer_active:
 192               	.LFB111:
 109:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:./tmk_core/common/action_util.c **** #endif
 112:./tmk_core/common/action_util.c ****     }
 113:./tmk_core/common/action_util.c **** }
 114:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 115:./tmk_core/common/action_util.c **** {
 193               		.loc 1 115 0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 116:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 199               		.loc 1 116 0
 200 0000 9091 0000 		lds r25,oneshot_layer_data
 201 0004 9770      		andi r25,lo8(7)
 202 0006 81E0      		ldi r24,lo8(1)
 203 0008 01F4      		brne .L12
 204 000a 80E0      		ldi r24,0
 205               	.L12:
 117:./tmk_core/common/action_util.c **** }
 206               		.loc 1 117 0
 207 000c 0895      		ret
 208               		.cfi_endproc
 209               	.LFE111:
 211               		.section	.text.add_key,"ax",@progbits
 212               	.global	add_key
 214               	add_key:
 215               	.LFB113:
 118:./tmk_core/common/action_util.c **** #endif
 119:./tmk_core/common/action_util.c **** 
 120:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 123:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 124:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 126:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 128:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 129:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 130:./tmk_core/common/action_util.c ****         }
 131:./tmk_core/common/action_util.c **** #endif
 132:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 133:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 134:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 135:./tmk_core/common/action_util.c ****         }
 136:./tmk_core/common/action_util.c ****     }
 137:./tmk_core/common/action_util.c **** 
 138:./tmk_core/common/action_util.c **** #endif
 139:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 140:./tmk_core/common/action_util.c **** }
 141:./tmk_core/common/action_util.c **** 
 142:./tmk_core/common/action_util.c **** /* key */
 143:./tmk_core/common/action_util.c **** void add_key(uint8_t key)
 144:./tmk_core/common/action_util.c **** {
 216               		.loc 1 144 0
 217               		.cfi_startproc
 218               	.LVL8:
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
 145:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 146:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 223               		.loc 1 146 0
 224 0000 9091 0000 		lds r25,keyboard_protocol
 225 0004 9923      		tst r25
 226 0006 01F0      		breq .L14
 227               		.loc 1 146 0 is_stmt 0 discriminator 1
 228 0008 9091 0000 		lds r25,keymap_config
 229 000c 97FF      		sbrs r25,7
 230 000e 00C0      		rjmp .L14
 231               	.LVL9:
 232               	.LBB12:
 233               	.LBB13:
 147:./tmk_core/common/action_util.c ****         add_key_bit(key);
 148:./tmk_core/common/action_util.c ****         return;
 149:./tmk_core/common/action_util.c ****     }
 150:./tmk_core/common/action_util.c **** #endif
 151:./tmk_core/common/action_util.c ****     add_key_byte(key);
 152:./tmk_core/common/action_util.c **** }
 153:./tmk_core/common/action_util.c **** 
 154:./tmk_core/common/action_util.c **** void del_key(uint8_t key)
 155:./tmk_core/common/action_util.c **** {
 156:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 157:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 158:./tmk_core/common/action_util.c ****         del_key_bit(key);
 159:./tmk_core/common/action_util.c ****         return;
 160:./tmk_core/common/action_util.c ****     }
 161:./tmk_core/common/action_util.c **** #endif
 162:./tmk_core/common/action_util.c ****     del_key_byte(key);
 163:./tmk_core/common/action_util.c **** }
 164:./tmk_core/common/action_util.c **** 
 165:./tmk_core/common/action_util.c **** void clear_keys(void)
 166:./tmk_core/common/action_util.c **** {
 167:./tmk_core/common/action_util.c ****     // not clear mods
 168:./tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 169:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170:./tmk_core/common/action_util.c ****     }
 171:./tmk_core/common/action_util.c **** }
 172:./tmk_core/common/action_util.c **** 
 173:./tmk_core/common/action_util.c **** 
 174:./tmk_core/common/action_util.c **** /* modifier */
 175:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 176:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 177:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 178:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 179:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 180:./tmk_core/common/action_util.c **** 
 181:./tmk_core/common/action_util.c **** /* weak modifier */
 182:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 183:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 184:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 185:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 186:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /* macro modifier */
 189:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 190:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 191:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 192:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 193:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 194:./tmk_core/common/action_util.c **** 
 195:./tmk_core/common/action_util.c **** /* Oneshot modifier */
 196:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 197:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 198:./tmk_core/common/action_util.c **** {
 199:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 200:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 201:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 202:./tmk_core/common/action_util.c **** #endif
 203:./tmk_core/common/action_util.c **** }
 204:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 205:./tmk_core/common/action_util.c **** {
 206:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 207:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 208:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 209:./tmk_core/common/action_util.c **** #endif
 210:./tmk_core/common/action_util.c **** }
 211:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 212:./tmk_core/common/action_util.c **** {
 213:./tmk_core/common/action_util.c ****     return oneshot_mods;
 214:./tmk_core/common/action_util.c **** }
 215:./tmk_core/common/action_util.c **** #endif
 216:./tmk_core/common/action_util.c **** 
 217:./tmk_core/common/action_util.c **** /*
 218:./tmk_core/common/action_util.c ****  * inspect keyboard state
 219:./tmk_core/common/action_util.c ****  */
 220:./tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 221:./tmk_core/common/action_util.c **** {
 222:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 223:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 224:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 225:./tmk_core/common/action_util.c ****             cnt++;
 226:./tmk_core/common/action_util.c ****     }
 227:./tmk_core/common/action_util.c ****     return cnt;
 228:./tmk_core/common/action_util.c **** }
 229:./tmk_core/common/action_util.c **** 
 230:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 231:./tmk_core/common/action_util.c **** {
 232:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 233:./tmk_core/common/action_util.c **** }
 234:./tmk_core/common/action_util.c **** 
 235:./tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 236:./tmk_core/common/action_util.c **** {
 237:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 238:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 239:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 240:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 241:./tmk_core/common/action_util.c ****             ;
 242:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 243:./tmk_core/common/action_util.c ****     }
 244:./tmk_core/common/action_util.c **** #endif
 245:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 246:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 247:./tmk_core/common/action_util.c ****     do {
 248:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 249:./tmk_core/common/action_util.c ****             break;
 250:./tmk_core/common/action_util.c ****         }
 251:./tmk_core/common/action_util.c ****         i = RO_INC(i);
 252:./tmk_core/common/action_util.c ****     } while (i != cb_tail);
 253:./tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 254:./tmk_core/common/action_util.c **** #else
 255:./tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 256:./tmk_core/common/action_util.c **** #endif
 257:./tmk_core/common/action_util.c **** }
 258:./tmk_core/common/action_util.c **** 
 259:./tmk_core/common/action_util.c **** 
 260:./tmk_core/common/action_util.c **** 
 261:./tmk_core/common/action_util.c **** /* local functions */
 262:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 263:./tmk_core/common/action_util.c **** {
 264:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 265:./tmk_core/common/action_util.c ****     int8_t i = cb_head;
 266:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 267:./tmk_core/common/action_util.c ****     if (cb_count) {
 268:./tmk_core/common/action_util.c ****         do {
 269:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 270:./tmk_core/common/action_util.c ****                 return;
 271:./tmk_core/common/action_util.c ****             }
 272:./tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 273:./tmk_core/common/action_util.c ****                 empty = i;
 274:./tmk_core/common/action_util.c ****             }
 275:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 276:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 277:./tmk_core/common/action_util.c ****         if (i == cb_tail) {
 278:./tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 279:./tmk_core/common/action_util.c ****                 // buffer is full
 280:./tmk_core/common/action_util.c ****                 if (empty == -1) {
 281:./tmk_core/common/action_util.c ****                     // pop head when has no empty space
 282:./tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 283:./tmk_core/common/action_util.c ****                     cb_count--;
 284:./tmk_core/common/action_util.c ****                 }
 285:./tmk_core/common/action_util.c ****                 else {
 286:./tmk_core/common/action_util.c ****                     // left shift when has empty space
 287:./tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 288:./tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 289:./tmk_core/common/action_util.c ****                     do {
 290:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 291:./tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 292:./tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 293:./tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 294:./tmk_core/common/action_util.c ****                         }
 295:./tmk_core/common/action_util.c ****                         else {
 296:./tmk_core/common/action_util.c ****                             offset++;
 297:./tmk_core/common/action_util.c ****                         }
 298:./tmk_core/common/action_util.c ****                         i = RO_INC(i);
 299:./tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 300:./tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 301:./tmk_core/common/action_util.c ****                 }
 302:./tmk_core/common/action_util.c ****             }
 303:./tmk_core/common/action_util.c ****         }
 304:./tmk_core/common/action_util.c ****     }
 305:./tmk_core/common/action_util.c ****     // add to tail
 306:./tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 307:./tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 308:./tmk_core/common/action_util.c ****     cb_count++;
 309:./tmk_core/common/action_util.c **** #else
 310:./tmk_core/common/action_util.c ****     int8_t i = 0;
 311:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 312:./tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 313:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 314:./tmk_core/common/action_util.c ****             break;
 315:./tmk_core/common/action_util.c ****         }
 316:./tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 317:./tmk_core/common/action_util.c ****             empty = i;
 318:./tmk_core/common/action_util.c ****         }
 319:./tmk_core/common/action_util.c ****     }
 320:./tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 321:./tmk_core/common/action_util.c ****         if (empty != -1) {
 322:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 323:./tmk_core/common/action_util.c ****         }
 324:./tmk_core/common/action_util.c ****     }
 325:./tmk_core/common/action_util.c **** #endif
 326:./tmk_core/common/action_util.c **** }
 327:./tmk_core/common/action_util.c **** 
 328:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 329:./tmk_core/common/action_util.c **** {
 330:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 331:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 332:./tmk_core/common/action_util.c ****     if (cb_count) {
 333:./tmk_core/common/action_util.c ****         do {
 334:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 335:./tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 336:./tmk_core/common/action_util.c ****                 cb_count--;
 337:./tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 338:./tmk_core/common/action_util.c ****                     // reset head and tail
 339:./tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 340:./tmk_core/common/action_util.c ****                 }
 341:./tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 342:./tmk_core/common/action_util.c ****                     // left shift when next to tail
 343:./tmk_core/common/action_util.c ****                     do {
 344:./tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 345:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 346:./tmk_core/common/action_util.c ****                             break;
 347:./tmk_core/common/action_util.c ****                         }
 348:./tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 349:./tmk_core/common/action_util.c ****                 }
 350:./tmk_core/common/action_util.c ****                 break;
 351:./tmk_core/common/action_util.c ****             }
 352:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 353:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 354:./tmk_core/common/action_util.c ****     }
 355:./tmk_core/common/action_util.c **** #else
 356:./tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 357:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 359:./tmk_core/common/action_util.c ****         }
 360:./tmk_core/common/action_util.c ****     }
 361:./tmk_core/common/action_util.c **** #endif
 362:./tmk_core/common/action_util.c **** }
 363:./tmk_core/common/action_util.c **** 
 364:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 365:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 366:./tmk_core/common/action_util.c **** {
 367:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 234               		.loc 1 367 0 is_stmt 1
 235 0010 982F      		mov r25,r24
 236 0012 9695      		lsr r25
 237 0014 9695      		lsr r25
 238 0016 9695      		lsr r25
 239 0018 9F31      		cpi r25,lo8(31)
 240 001a 01F0      		breq .L13
 368:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 241               		.loc 1 368 0
 242 001c E091 0000 		lds r30,keyboard_report
 243 0020 F091 0000 		lds r31,keyboard_report+1
 244 0024 E90F      		add r30,r25
 245 0026 F11D      		adc r31,__zero_reg__
 246 0028 8770      		andi r24,lo8(7)
 247               	.LVL10:
 248 002a 21E0      		ldi r18,lo8(1)
 249 002c 30E0      		ldi r19,0
 250 002e A901      		movw r20,r18
 251 0030 00C0      		rjmp 2f
 252               		1:
 253 0032 440F      		lsl r20
 254 0034 551F      		rol r21
 255               		2:
 256 0036 8A95      		dec r24
 257 0038 02F4      		brpl 1b
 258 003a CA01      		movw r24,r20
 259 003c 9181      		ldd r25,Z+1
 260 003e 892B      		or r24,r25
 261 0040 8183      		std Z+1,r24
 262 0042 0895      		ret
 263               	.LVL11:
 264               	.L14:
 265               	.LBE13:
 266               	.LBE12:
 267               	.LBB14:
 268               	.LBB15:
 313:./tmk_core/common/action_util.c ****             break;
 269               		.loc 1 313 0
 270 0044 2091 0000 		lds r18,keyboard_report
 271 0048 3091 0000 		lds r19,keyboard_report+1
 272 004c F901      		movw r30,r18
 273 004e 3296      		adiw r30,2
 274 0050 9FEF      		ldi r25,lo8(-1)
 275 0052 40E0      		ldi r20,0
 276               	.L17:
 277               	.LVL12:
 278 0054 5191      		ld r21,Z+
 279 0056 8517      		cp r24,r21
 280 0058 01F0      		breq .L13
 316:./tmk_core/common/action_util.c ****             empty = i;
 281               		.loc 1 316 0
 282 005a 9F3F      		cpi r25,lo8(-1)
 283 005c 01F4      		brne .L16
 284 005e 5111      		cpse r21,__zero_reg__
 285 0060 00C0      		rjmp .L16
 286 0062 942F      		mov r25,r20
 287               	.LVL13:
 288               	.L16:
 289 0064 4F5F      		subi r20,lo8(-(1))
 290               	.LVL14:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 291               		.loc 1 312 0
 292 0066 4E31      		cpi r20,lo8(30)
 293 0068 01F4      		brne .L17
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 294               		.loc 1 321 0
 295 006a 9F3F      		cpi r25,lo8(-1)
 296 006c 01F0      		breq .L13
 322:./tmk_core/common/action_util.c ****         }
 297               		.loc 1 322 0
 298 006e F901      		movw r30,r18
 299 0070 E90F      		add r30,r25
 300 0072 F11D      		adc r31,__zero_reg__
 301 0074 97FD      		sbrc r25,7
 302 0076 FA95      		dec r31
 303 0078 8283      		std Z+2,r24
 304 007a 0895      		ret
 305               	.LVL15:
 306               	.L13:
 307 007c 0895      		ret
 308               	.LBE15:
 309               	.LBE14:
 310               		.cfi_endproc
 311               	.LFE113:
 313               		.section	.text.del_key,"ax",@progbits
 314               	.global	del_key
 316               	del_key:
 317               	.LFB114:
 155:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 318               		.loc 1 155 0
 319               		.cfi_startproc
 320               	.LVL16:
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 325               		.loc 1 157 0
 326 0000 9091 0000 		lds r25,keyboard_protocol
 327 0004 9923      		tst r25
 328 0006 01F0      		breq .L33
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 329               		.loc 1 157 0 is_stmt 0 discriminator 1
 330 0008 9091 0000 		lds r25,keymap_config
 331 000c 97FF      		sbrs r25,7
 332 000e 00C0      		rjmp .L33
 333               	.LVL17:
 334               	.LBB21:
 335               	.LBB22:
 369:./tmk_core/common/action_util.c ****     } else {
 370:./tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 371:./tmk_core/common/action_util.c ****     }
 372:./tmk_core/common/action_util.c **** }
 373:./tmk_core/common/action_util.c **** 
 374:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 375:./tmk_core/common/action_util.c **** {
 376:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 336               		.loc 1 376 0 is_stmt 1
 337 0010 982F      		mov r25,r24
 338 0012 9695      		lsr r25
 339 0014 9695      		lsr r25
 340 0016 9695      		lsr r25
 341 0018 9F31      		cpi r25,lo8(31)
 342 001a 01F0      		breq .L32
 377:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 343               		.loc 1 377 0
 344 001c E091 0000 		lds r30,keyboard_report
 345 0020 F091 0000 		lds r31,keyboard_report+1
 346 0024 E90F      		add r30,r25
 347 0026 F11D      		adc r31,__zero_reg__
 348 0028 8770      		andi r24,lo8(7)
 349               	.LVL18:
 350 002a 21E0      		ldi r18,lo8(1)
 351 002c 30E0      		ldi r19,0
 352 002e A901      		movw r20,r18
 353 0030 00C0      		rjmp 2f
 354               		1:
 355 0032 440F      		lsl r20
 356 0034 551F      		rol r21
 357               		2:
 358 0036 8A95      		dec r24
 359 0038 02F4      		brpl 1b
 360 003a CA01      		movw r24,r20
 361 003c 8095      		com r24
 362 003e 9181      		ldd r25,Z+1
 363 0040 8923      		and r24,r25
 364 0042 8183      		std Z+1,r24
 365 0044 0895      		ret
 366               	.LVL19:
 367               	.L33:
 368               	.LBE22:
 369               	.LBE21:
 370               	.LBB23:
 371               	.LBB24:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 372               		.loc 1 357 0
 373 0046 E091 0000 		lds r30,keyboard_report
 374 004a F091 0000 		lds r31,keyboard_report+1
 375 004e 9F01      		movw r18,r30
 376 0050 225E      		subi r18,-30
 377 0052 3F4F      		sbci r19,-1
 378               	.L37:
 379               	.LVL20:
 380 0054 9281      		ldd r25,Z+2
 381 0056 8913      		cpse r24,r25
 382 0058 00C0      		rjmp .L36
 358:./tmk_core/common/action_util.c ****         }
 383               		.loc 1 358 0
 384 005a 1282      		std Z+2,__zero_reg__
 385               	.L36:
 386               	.LVL21:
 387 005c 3196      		adiw r30,1
 388               	.LVL22:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 389               		.loc 1 356 0
 390 005e E217      		cp r30,r18
 391 0060 F307      		cpc r31,r19
 392 0062 01F4      		brne .L37
 393               	.LVL23:
 394               	.L32:
 395 0064 0895      		ret
 396               	.LBE24:
 397               	.LBE23:
 398               		.cfi_endproc
 399               	.LFE114:
 401               		.section	.text.clear_keys,"ax",@progbits
 402               	.global	clear_keys
 404               	clear_keys:
 405               	.LFB115:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 406               		.loc 1 166 0
 407               		.cfi_startproc
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 412               	.LVL24:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 413               		.loc 1 166 0
 414 0000 81E0      		ldi r24,lo8(1)
 415 0002 90E0      		ldi r25,0
 416               	.LVL25:
 417               	.L47:
 418               	.LBB25:
 169:./tmk_core/common/action_util.c ****     }
 419               		.loc 1 169 0 discriminator 3
 420 0004 E091 0000 		lds r30,keyboard_report
 421 0008 F091 0000 		lds r31,keyboard_report+1
 422 000c E80F      		add r30,r24
 423 000e F91F      		adc r31,r25
 424 0010 1082      		st Z,__zero_reg__
 425               	.LVL26:
 426 0012 0196      		adiw r24,1
 427               	.LVL27:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 428               		.loc 1 168 0 discriminator 3
 429 0014 8032      		cpi r24,32
 430 0016 9105      		cpc r25,__zero_reg__
 431 0018 01F4      		brne .L47
 432               	/* epilogue start */
 433               	.LBE25:
 171:./tmk_core/common/action_util.c **** 
 434               		.loc 1 171 0
 435 001a 0895      		ret
 436               		.cfi_endproc
 437               	.LFE115:
 439               		.section	.text.get_mods,"ax",@progbits
 440               	.global	get_mods
 442               	get_mods:
 443               	.LFB116:
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 444               		.loc 1 175 0
 445               		.cfi_startproc
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 0 */
 449               	.L__stack_usage = 0
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 450               		.loc 1 175 0
 451 0000 8091 0000 		lds r24,real_mods
 452 0004 0895      		ret
 453               		.cfi_endproc
 454               	.LFE116:
 456               		.section	.text.add_mods,"ax",@progbits
 457               	.global	add_mods
 459               	add_mods:
 460               	.LFB117:
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 461               		.loc 1 176 0
 462               		.cfi_startproc
 463               	.LVL28:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 468               		.loc 1 176 0
 469 0000 9091 0000 		lds r25,real_mods
 470 0004 892B      		or r24,r25
 471               	.LVL29:
 472 0006 8093 0000 		sts real_mods,r24
 473 000a 0895      		ret
 474               		.cfi_endproc
 475               	.LFE117:
 477               		.section	.text.del_mods,"ax",@progbits
 478               	.global	del_mods
 480               	del_mods:
 481               	.LFB118:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 482               		.loc 1 177 0
 483               		.cfi_startproc
 484               	.LVL30:
 485               	/* prologue: function */
 486               	/* frame size = 0 */
 487               	/* stack size = 0 */
 488               	.L__stack_usage = 0
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 489               		.loc 1 177 0
 490 0000 8095      		com r24
 491               	.LVL31:
 492 0002 9091 0000 		lds r25,real_mods
 493 0006 8923      		and r24,r25
 494               	.LVL32:
 495 0008 8093 0000 		sts real_mods,r24
 496 000c 0895      		ret
 497               		.cfi_endproc
 498               	.LFE118:
 500               		.section	.text.set_mods,"ax",@progbits
 501               	.global	set_mods
 503               	set_mods:
 504               	.LFB119:
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 505               		.loc 1 178 0
 506               		.cfi_startproc
 507               	.LVL33:
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 512               		.loc 1 178 0
 513 0000 8093 0000 		sts real_mods,r24
 514 0004 0895      		ret
 515               		.cfi_endproc
 516               	.LFE119:
 518               		.section	.text.clear_mods,"ax",@progbits
 519               	.global	clear_mods
 521               	clear_mods:
 522               	.LFB120:
 179:./tmk_core/common/action_util.c **** 
 523               		.loc 1 179 0
 524               		.cfi_startproc
 525               	/* prologue: function */
 526               	/* frame size = 0 */
 527               	/* stack size = 0 */
 528               	.L__stack_usage = 0
 179:./tmk_core/common/action_util.c **** 
 529               		.loc 1 179 0
 530 0000 1092 0000 		sts real_mods,__zero_reg__
 531 0004 0895      		ret
 532               		.cfi_endproc
 533               	.LFE120:
 535               		.section	.text.get_weak_mods,"ax",@progbits
 536               	.global	get_weak_mods
 538               	get_weak_mods:
 539               	.LFB121:
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 540               		.loc 1 182 0
 541               		.cfi_startproc
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 0 */
 545               	.L__stack_usage = 0
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 546               		.loc 1 182 0
 547 0000 8091 0000 		lds r24,weak_mods
 548 0004 0895      		ret
 549               		.cfi_endproc
 550               	.LFE121:
 552               		.section	.text.add_weak_mods,"ax",@progbits
 553               	.global	add_weak_mods
 555               	add_weak_mods:
 556               	.LFB122:
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 557               		.loc 1 183 0
 558               		.cfi_startproc
 559               	.LVL34:
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 0 */
 563               	.L__stack_usage = 0
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 564               		.loc 1 183 0
 565 0000 9091 0000 		lds r25,weak_mods
 566 0004 892B      		or r24,r25
 567               	.LVL35:
 568 0006 8093 0000 		sts weak_mods,r24
 569 000a 0895      		ret
 570               		.cfi_endproc
 571               	.LFE122:
 573               		.section	.text.del_weak_mods,"ax",@progbits
 574               	.global	del_weak_mods
 576               	del_weak_mods:
 577               	.LFB123:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 578               		.loc 1 184 0
 579               		.cfi_startproc
 580               	.LVL36:
 581               	/* prologue: function */
 582               	/* frame size = 0 */
 583               	/* stack size = 0 */
 584               	.L__stack_usage = 0
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 585               		.loc 1 184 0
 586 0000 8095      		com r24
 587               	.LVL37:
 588 0002 9091 0000 		lds r25,weak_mods
 589 0006 8923      		and r24,r25
 590               	.LVL38:
 591 0008 8093 0000 		sts weak_mods,r24
 592 000c 0895      		ret
 593               		.cfi_endproc
 594               	.LFE123:
 596               		.section	.text.set_weak_mods,"ax",@progbits
 597               	.global	set_weak_mods
 599               	set_weak_mods:
 600               	.LFB124:
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 601               		.loc 1 185 0
 602               		.cfi_startproc
 603               	.LVL39:
 604               	/* prologue: function */
 605               	/* frame size = 0 */
 606               	/* stack size = 0 */
 607               	.L__stack_usage = 0
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 608               		.loc 1 185 0
 609 0000 8093 0000 		sts weak_mods,r24
 610 0004 0895      		ret
 611               		.cfi_endproc
 612               	.LFE124:
 614               		.section	.text.clear_weak_mods,"ax",@progbits
 615               	.global	clear_weak_mods
 617               	clear_weak_mods:
 618               	.LFB125:
 186:./tmk_core/common/action_util.c **** 
 619               		.loc 1 186 0
 620               		.cfi_startproc
 621               	/* prologue: function */
 622               	/* frame size = 0 */
 623               	/* stack size = 0 */
 624               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 625               		.loc 1 186 0
 626 0000 1092 0000 		sts weak_mods,__zero_reg__
 627 0004 0895      		ret
 628               		.cfi_endproc
 629               	.LFE125:
 631               		.section	.text.get_macro_mods,"ax",@progbits
 632               	.global	get_macro_mods
 634               	get_macro_mods:
 635               	.LFB126:
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 636               		.loc 1 189 0
 637               		.cfi_startproc
 638               	/* prologue: function */
 639               	/* frame size = 0 */
 640               	/* stack size = 0 */
 641               	.L__stack_usage = 0
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 642               		.loc 1 189 0
 643 0000 8091 0000 		lds r24,macro_mods
 644 0004 0895      		ret
 645               		.cfi_endproc
 646               	.LFE126:
 648               		.section	.text.add_macro_mods,"ax",@progbits
 649               	.global	add_macro_mods
 651               	add_macro_mods:
 652               	.LFB127:
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 653               		.loc 1 190 0
 654               		.cfi_startproc
 655               	.LVL40:
 656               	/* prologue: function */
 657               	/* frame size = 0 */
 658               	/* stack size = 0 */
 659               	.L__stack_usage = 0
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 660               		.loc 1 190 0
 661 0000 9091 0000 		lds r25,macro_mods
 662 0004 892B      		or r24,r25
 663               	.LVL41:
 664 0006 8093 0000 		sts macro_mods,r24
 665 000a 0895      		ret
 666               		.cfi_endproc
 667               	.LFE127:
 669               		.section	.text.del_macro_mods,"ax",@progbits
 670               	.global	del_macro_mods
 672               	del_macro_mods:
 673               	.LFB128:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 674               		.loc 1 191 0
 675               		.cfi_startproc
 676               	.LVL42:
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 0 */
 680               	.L__stack_usage = 0
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 681               		.loc 1 191 0
 682 0000 8095      		com r24
 683               	.LVL43:
 684 0002 9091 0000 		lds r25,macro_mods
 685 0006 8923      		and r24,r25
 686               	.LVL44:
 687 0008 8093 0000 		sts macro_mods,r24
 688 000c 0895      		ret
 689               		.cfi_endproc
 690               	.LFE128:
 692               		.section	.text.set_macro_mods,"ax",@progbits
 693               	.global	set_macro_mods
 695               	set_macro_mods:
 696               	.LFB129:
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 697               		.loc 1 192 0
 698               		.cfi_startproc
 699               	.LVL45:
 700               	/* prologue: function */
 701               	/* frame size = 0 */
 702               	/* stack size = 0 */
 703               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 704               		.loc 1 192 0
 705 0000 8093 0000 		sts macro_mods,r24
 706 0004 0895      		ret
 707               		.cfi_endproc
 708               	.LFE129:
 710               		.section	.text.clear_macro_mods,"ax",@progbits
 711               	.global	clear_macro_mods
 713               	clear_macro_mods:
 714               	.LFB130:
 193:./tmk_core/common/action_util.c **** 
 715               		.loc 1 193 0
 716               		.cfi_startproc
 717               	/* prologue: function */
 718               	/* frame size = 0 */
 719               	/* stack size = 0 */
 720               	.L__stack_usage = 0
 193:./tmk_core/common/action_util.c **** 
 721               		.loc 1 193 0
 722 0000 1092 0000 		sts macro_mods,__zero_reg__
 723 0004 0895      		ret
 724               		.cfi_endproc
 725               	.LFE130:
 727               		.section	.text.set_oneshot_mods,"ax",@progbits
 728               	.global	set_oneshot_mods
 730               	set_oneshot_mods:
 731               	.LFB131:
 198:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 732               		.loc 1 198 0
 733               		.cfi_startproc
 734               	.LVL46:
 735               	/* prologue: function */
 736               	/* frame size = 0 */
 737               	/* stack size = 0 */
 738               	.L__stack_usage = 0
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 739               		.loc 1 199 0
 740 0000 8093 0000 		sts oneshot_mods,r24
 741 0004 0895      		ret
 742               		.cfi_endproc
 743               	.LFE131:
 745               		.section	.text.clear_oneshot_mods,"ax",@progbits
 746               	.global	clear_oneshot_mods
 748               	clear_oneshot_mods:
 749               	.LFB132:
 205:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 750               		.loc 1 205 0
 751               		.cfi_startproc
 752               	/* prologue: function */
 753               	/* frame size = 0 */
 754               	/* stack size = 0 */
 755               	.L__stack_usage = 0
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 756               		.loc 1 206 0
 757 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 758 0004 0895      		ret
 759               		.cfi_endproc
 760               	.LFE132:
 762               		.section	.text.get_oneshot_mods,"ax",@progbits
 763               	.global	get_oneshot_mods
 765               	get_oneshot_mods:
 766               	.LFB133:
 212:./tmk_core/common/action_util.c ****     return oneshot_mods;
 767               		.loc 1 212 0
 768               		.cfi_startproc
 769               	/* prologue: function */
 770               	/* frame size = 0 */
 771               	/* stack size = 0 */
 772               	.L__stack_usage = 0
 214:./tmk_core/common/action_util.c **** #endif
 773               		.loc 1 214 0
 774 0000 8091 0000 		lds r24,oneshot_mods
 775 0004 0895      		ret
 776               		.cfi_endproc
 777               	.LFE133:
 779               		.section	.text.has_anykey,"ax",@progbits
 780               	.global	has_anykey
 782               	has_anykey:
 783               	.LFB134:
 221:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 784               		.loc 1 221 0
 785               		.cfi_startproc
 786               	/* prologue: function */
 787               	/* frame size = 0 */
 788               	/* stack size = 0 */
 789               	.L__stack_usage = 0
 790               	.LVL47:
 791               	.LBB26:
 224:./tmk_core/common/action_util.c ****             cnt++;
 792               		.loc 1 224 0
 793 0000 8091 0000 		lds r24,keyboard_report
 794 0004 9091 0000 		lds r25,keyboard_report+1
 795 0008 FC01      		movw r30,r24
 796 000a 3196      		adiw r30,1
 797 000c 9C01      		movw r18,r24
 798 000e 205E      		subi r18,-32
 799 0010 3F4F      		sbci r19,-1
 800               	.LBE26:
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 801               		.loc 1 222 0
 802 0012 80E0      		ldi r24,0
 803               	.LVL48:
 804               	.L69:
 805               	.LBB27:
 224:./tmk_core/common/action_util.c ****             cnt++;
 806               		.loc 1 224 0
 807 0014 9191      		ld r25,Z+
 808               	.LVL49:
 809 0016 9111      		cpse r25,__zero_reg__
 225:./tmk_core/common/action_util.c ****     }
 810               		.loc 1 225 0
 811 0018 8F5F      		subi r24,lo8(-(1))
 812               	.LVL50:
 813               	.L68:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 814               		.loc 1 223 0 discriminator 2
 815 001a E217      		cp r30,r18
 816 001c F307      		cpc r31,r19
 817 001e 01F4      		brne .L69
 818               	/* epilogue start */
 819               	.LBE27:
 228:./tmk_core/common/action_util.c **** 
 820               		.loc 1 228 0
 821 0020 0895      		ret
 822               		.cfi_endproc
 823               	.LFE134:
 825               		.section	.text.send_keyboard_report,"ax",@progbits
 826               	.global	send_keyboard_report
 828               	send_keyboard_report:
 829               	.LFB112:
 120:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 830               		.loc 1 120 0
 831               		.cfi_startproc
 832               	/* prologue: function */
 833               	/* frame size = 0 */
 834               	/* stack size = 0 */
 835               	.L__stack_usage = 0
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 836               		.loc 1 121 0
 837 0000 E091 0000 		lds r30,keyboard_report
 838 0004 F091 0000 		lds r31,keyboard_report+1
 839 0008 8091 0000 		lds r24,real_mods
 840 000c 8083      		st Z,r24
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 841               		.loc 1 122 0
 842 000e E091 0000 		lds r30,keyboard_report
 843 0012 F091 0000 		lds r31,keyboard_report+1
 844 0016 9081      		ld r25,Z
 845 0018 8091 0000 		lds r24,weak_mods
 846 001c 892B      		or r24,r25
 847 001e 8083      		st Z,r24
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 848               		.loc 1 123 0
 849 0020 E091 0000 		lds r30,keyboard_report
 850 0024 F091 0000 		lds r31,keyboard_report+1
 851 0028 9081      		ld r25,Z
 852 002a 8091 0000 		lds r24,macro_mods
 853 002e 892B      		or r24,r25
 854 0030 8083      		st Z,r24
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 855               		.loc 1 125 0
 856 0032 8091 0000 		lds r24,oneshot_mods
 857 0036 8823      		tst r24
 858 0038 01F0      		breq .L76
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 859               		.loc 1 132 0
 860 003a E091 0000 		lds r30,keyboard_report
 861 003e F091 0000 		lds r31,keyboard_report+1
 862 0042 9081      		ld r25,Z
 863 0044 892B      		or r24,r25
 864 0046 8083      		st Z,r24
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 865               		.loc 1 133 0
 866 0048 0E94 0000 		call has_anykey
 867               	.LVL51:
 868 004c 8111      		cpse r24,__zero_reg__
 869               	.LBB30:
 870               	.LBB31:
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 871               		.loc 1 206 0
 872 004e 1092 0000 		sts oneshot_mods,__zero_reg__
 873               	.L76:
 874               	.LBE31:
 875               	.LBE30:
 139:./tmk_core/common/action_util.c **** }
 876               		.loc 1 139 0
 877 0052 8091 0000 		lds r24,keyboard_report
 878 0056 9091 0000 		lds r25,keyboard_report+1
 879 005a 0C94 0000 		jmp host_keyboard_send
 880               	.LVL52:
 881               		.cfi_endproc
 882               	.LFE112:
 884               		.section	.text.has_anymod,"ax",@progbits
 885               	.global	has_anymod
 887               	has_anymod:
 888               	.LFB135:
 231:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 889               		.loc 1 231 0
 890               		.cfi_startproc
 891               	/* prologue: function */
 892               	/* frame size = 0 */
 893               	/* stack size = 0 */
 894               	.L__stack_usage = 0
 232:./tmk_core/common/action_util.c **** }
 895               		.loc 1 232 0
 896 0000 8091 0000 		lds r24,real_mods
 897 0004 0C94 0000 		jmp bitpop
 898               	.LVL53:
 899               		.cfi_endproc
 900               	.LFE135:
 902               		.section	.text.get_first_key,"ax",@progbits
 903               	.global	get_first_key
 905               	get_first_key:
 906               	.LFB136:
 236:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 907               		.loc 1 236 0
 908               		.cfi_startproc
 909 0000 CF93      		push r28
 910               	.LCFI0:
 911               		.cfi_def_cfa_offset 3
 912               		.cfi_offset 28, -2
 913 0002 DF93      		push r29
 914               	.LCFI1:
 915               		.cfi_def_cfa_offset 4
 916               		.cfi_offset 29, -3
 917               	/* prologue: function */
 918               	/* frame size = 0 */
 919               	/* stack size = 2 */
 920               	.L__stack_usage = 2
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 921               		.loc 1 238 0
 922 0004 8091 0000 		lds r24,keyboard_protocol
 923 0008 E091 0000 		lds r30,keyboard_report
 924 000c F091 0000 		lds r31,keyboard_report+1
 925 0010 8823      		tst r24
 926 0012 01F0      		breq .L83
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 927               		.loc 1 238 0 is_stmt 0 discriminator 1
 928 0014 8091 0000 		lds r24,keymap_config
 929 0018 87FF      		sbrs r24,7
 930 001a 00C0      		rjmp .L83
 931 001c DF01      		movw r26,r30
 932 001e 1196      		adiw r26,1
 933               	.LBB32:
 240:./tmk_core/common/action_util.c ****             ;
 934               		.loc 1 240 0 is_stmt 1
 935 0020 C0E0      		ldi r28,0
 936               	.L84:
 937               	.LVL54:
 240:./tmk_core/common/action_util.c ****             ;
 938               		.loc 1 240 0 is_stmt 0 discriminator 2
 939 0022 8D91      		ld r24,X+
 940 0024 8111      		cpse r24,__zero_reg__
 941 0026 00C0      		rjmp .L85
 240:./tmk_core/common/action_util.c ****             ;
 942               		.loc 1 240 0 discriminator 3
 943 0028 CF5F      		subi r28,lo8(-(1))
 944               	.LVL55:
 945 002a CF31      		cpi r28,lo8(31)
 946 002c 01F4      		brne .L84
 947               	.L85:
 242:./tmk_core/common/action_util.c ****     }
 948               		.loc 1 242 0 is_stmt 1
 949 002e D0E0      		ldi r29,0
 950 0030 EC0F      		add r30,r28
 951 0032 FD1F      		adc r31,r29
 952 0034 8181      		ldd r24,Z+1
 953 0036 0E94 0000 		call biton
 954               	.LVL56:
 955 003a 93E0      		ldi r25,3
 956               		1:
 957 003c CC0F      		lsl r28
 958 003e DD1F      		rol r29
 959 0040 9A95      		dec r25
 960 0042 01F4      		brne 1b
 961               	.LVL57:
 962 0044 8C2B      		or r24,r28
 963 0046 00C0      		rjmp .L87
 964               	.L83:
 965               	.LBE32:
 255:./tmk_core/common/action_util.c **** #endif
 966               		.loc 1 255 0
 967 0048 8281      		ldd r24,Z+2
 968               	.L87:
 969               	/* epilogue start */
 257:./tmk_core/common/action_util.c **** 
 970               		.loc 1 257 0
 971 004a DF91      		pop r29
 972 004c CF91      		pop r28
 973 004e 0895      		ret
 974               		.cfi_endproc
 975               	.LFE136:
 977               		.section	.bss.oneshot_layer_data,"aw",@nobits
 980               	oneshot_layer_data:
 981 0000 00        		.zero	1
 982               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 985               	oneshot_locked_mods:
 986 0000 00        		.zero	1
 987               		.section	.bss.oneshot_mods,"aw",@nobits
 990               	oneshot_mods:
 991 0000 00        		.zero	1
 992               	.global	keyboard_report
 993               		.section	.data.keyboard_report,"aw",@progbits
 996               	keyboard_report:
 997 0000 0000      		.word	__compound_literal.0
 998               		.section	.bss.__compound_literal.0,"aw",@nobits
 1001               	__compound_literal.0:
 1002 0000 0000 0000 		.zero	32
 1002      0000 0000 
 1002      0000 0000 
 1002      0000 0000 
 1002      0000 0000 
 1003               		.section	.bss.macro_mods,"aw",@nobits
 1006               	macro_mods:
 1007 0000 00        		.zero	1
 1008               		.section	.bss.weak_mods,"aw",@nobits
 1011               	weak_mods:
 1012 0000 00        		.zero	1
 1013               		.section	.bss.real_mods,"aw",@nobits
 1016               	real_mods:
 1017 0000 00        		.zero	1
 1018               		.text
 1019               	.Letext0:
 1020               		.file 2 "/usr/lib/avr/include/stdint.h"
 1021               		.file 3 "./tmk_core/common/report.h"
 1022               		.file 4 "./tmk_core/common/action_util.h"
 1023               		.file 5 "./quantum/keycode_config.h"
 1024               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1025               		.file 7 "./tmk_core/common/host.h"
 1026               		.file 8 "./tmk_core/common/action_layer.h"
 1027               		.file 9 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccHIxBHb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHIxBHb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHIxBHb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHIxBHb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHIxBHb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHIxBHb.s:13     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/ccHIxBHb.s:985    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/ccHIxBHb.s:31     .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/ccHIxBHb.s:49     .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/ccHIxBHb.s:66     .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/ccHIxBHb.s:980    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/ccHIxBHb.s:86     .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/ccHIxBHb.s:104    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/ccHIxBHb.s:129    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/ccHIxBHb.s:146    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/ccHIxBHb.s:191    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/ccHIxBHb.s:214    .text.add_key:0000000000000000 add_key
     /tmp/ccHIxBHb.s:996    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccHIxBHb.s:316    .text.del_key:0000000000000000 del_key
     /tmp/ccHIxBHb.s:404    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccHIxBHb.s:442    .text.get_mods:0000000000000000 get_mods
     /tmp/ccHIxBHb.s:1016   .bss.real_mods:0000000000000000 real_mods
     /tmp/ccHIxBHb.s:459    .text.add_mods:0000000000000000 add_mods
     /tmp/ccHIxBHb.s:480    .text.del_mods:0000000000000000 del_mods
     /tmp/ccHIxBHb.s:503    .text.set_mods:0000000000000000 set_mods
     /tmp/ccHIxBHb.s:521    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccHIxBHb.s:538    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccHIxBHb.s:1011   .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccHIxBHb.s:555    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccHIxBHb.s:576    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccHIxBHb.s:599    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccHIxBHb.s:617    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccHIxBHb.s:634    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/ccHIxBHb.s:1006   .bss.macro_mods:0000000000000000 macro_mods
     /tmp/ccHIxBHb.s:651    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/ccHIxBHb.s:672    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/ccHIxBHb.s:695    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/ccHIxBHb.s:713    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/ccHIxBHb.s:730    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccHIxBHb.s:990    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccHIxBHb.s:748    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccHIxBHb.s:765    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/ccHIxBHb.s:782    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccHIxBHb.s:828    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccHIxBHb.s:887    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccHIxBHb.s:905    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccHIxBHb.s:1001   .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
layer_on
layer_off
keyboard_protocol
keymap_config
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
