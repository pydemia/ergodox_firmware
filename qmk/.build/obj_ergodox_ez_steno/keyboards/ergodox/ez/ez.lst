   1               		.file	"ez.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ergodox_blink_all_leds,"ax",@progbits
  11               	.global	ergodox_blink_all_leds
  13               	ergodox_blink_all_leds:
  14               	.LFB125:
  15               		.file 1 "keyboards/ergodox/ez/ez.c"
   1:keyboards/ergodox/ez/ez.c **** #include "ez.h"
   2:keyboards/ergodox/ez/ez.c **** #include "i2cmaster.h"
   3:keyboards/ergodox/ez/ez.c **** 
   4:keyboards/ergodox/ez/ez.c **** bool i2c_initialized = 0;
   5:keyboards/ergodox/ez/ez.c **** uint8_t mcp23018_status = 0x20;
   6:keyboards/ergodox/ez/ez.c **** 
   7:keyboards/ergodox/ez/ez.c **** void matrix_init_kb(void) {
   8:keyboards/ergodox/ez/ez.c ****    // keyboard LEDs (see "PWM on ports OC1(A|B|C)" in "teensy-2-0.md")
   9:keyboards/ergodox/ez/ez.c ****     TCCR1A = 0b10101001;  // set and configure fast PWM
  10:keyboards/ergodox/ez/ez.c ****     TCCR1B = 0b00001001;  // set and configure fast PWM
  11:keyboards/ergodox/ez/ez.c **** 
  12:keyboards/ergodox/ez/ez.c ****     // (tied to Vcc for hardware convenience)
  13:keyboards/ergodox/ez/ez.c ****     DDRB  &= ~(1<<4);  // set B(4) as input
  14:keyboards/ergodox/ez/ez.c ****     PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
  15:keyboards/ergodox/ez/ez.c **** 
  16:keyboards/ergodox/ez/ez.c ****     // unused pins - C7, D4, D5, D7, E6
  17:keyboards/ergodox/ez/ez.c ****     // set as input with internal pull-ip enabled
  18:keyboards/ergodox/ez/ez.c ****     DDRC  &= ~(1<<7);
  19:keyboards/ergodox/ez/ez.c ****     DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
  20:keyboards/ergodox/ez/ez.c ****     DDRE  &= ~(1<<6);
  21:keyboards/ergodox/ez/ez.c ****     PORTC |=  (1<<7);
  22:keyboards/ergodox/ez/ez.c ****     PORTD |=  (1<<7 | 1<<5 | 1<<4);
  23:keyboards/ergodox/ez/ez.c ****     PORTE |=  (1<<6);
  24:keyboards/ergodox/ez/ez.c **** 
  25:keyboards/ergodox/ez/ez.c ****     ergodox_blink_all_leds();
  26:keyboards/ergodox/ez/ez.c **** 
  27:keyboards/ergodox/ez/ez.c ****     matrix_init_user();
  28:keyboards/ergodox/ez/ez.c **** }
  29:keyboards/ergodox/ez/ez.c **** 
  30:keyboards/ergodox/ez/ez.c **** void ergodox_blink_all_leds(void)
  31:keyboards/ergodox/ez/ez.c **** {
  16               		.loc 1 31 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB68:
  23               	.LBB69:
  24               	.LBB70:
  25               		.file 2 "keyboards/ergodox/ez/ez.h"
   1:keyboards/ergodox/ez/ez.h **** #ifndef ERGODOX_EZ_H
   2:keyboards/ergodox/ez/ez.h **** #define ERGODOX_EZ_H
   3:keyboards/ergodox/ez/ez.h **** 
   4:keyboards/ergodox/ez/ez.h **** #include "quantum.h"
   5:keyboards/ergodox/ez/ez.h **** #include <stdint.h>
   6:keyboards/ergodox/ez/ez.h **** #include <stdbool.h>
   7:keyboards/ergodox/ez/ez.h **** #include "i2cmaster.h"
   8:keyboards/ergodox/ez/ez.h **** #include <util/delay.h>
   9:keyboards/ergodox/ez/ez.h **** 
  10:keyboards/ergodox/ez/ez.h **** #define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))
  11:keyboards/ergodox/ez/ez.h **** #define CPU_16MHz       0x00
  12:keyboards/ergodox/ez/ez.h **** 
  13:keyboards/ergodox/ez/ez.h **** // I2C aliases and register addresses (see "mcp23018.md")
  14:keyboards/ergodox/ez/ez.h **** #define I2C_ADDR        0b0100000
  15:keyboards/ergodox/ez/ez.h **** #define I2C_ADDR_WRITE  ( (I2C_ADDR<<1) | I2C_WRITE )
  16:keyboards/ergodox/ez/ez.h **** #define I2C_ADDR_READ   ( (I2C_ADDR<<1) | I2C_READ  )
  17:keyboards/ergodox/ez/ez.h **** #define IODIRA          0x00            // i/o direction register
  18:keyboards/ergodox/ez/ez.h **** #define IODIRB          0x01
  19:keyboards/ergodox/ez/ez.h **** #define GPPUA           0x0C            // GPIO pull-up resistor register
  20:keyboards/ergodox/ez/ez.h **** #define GPPUB           0x0D
  21:keyboards/ergodox/ez/ez.h **** #define GPIOA           0x12            // general purpose i/o port register (write modifies OLAT)
  22:keyboards/ergodox/ez/ez.h **** #define GPIOB           0x13
  23:keyboards/ergodox/ez/ez.h **** #define OLATA           0x14            // output latch register
  24:keyboards/ergodox/ez/ez.h **** #define OLATB           0x15
  25:keyboards/ergodox/ez/ez.h **** 
  26:keyboards/ergodox/ez/ez.h **** extern uint8_t mcp23018_status;
  27:keyboards/ergodox/ez/ez.h **** 
  28:keyboards/ergodox/ez/ez.h **** void init_ergodox(void);
  29:keyboards/ergodox/ez/ez.h **** void ergodox_blink_all_leds(void);
  30:keyboards/ergodox/ez/ez.h **** uint8_t init_mcp23018(void);
  31:keyboards/ergodox/ez/ez.h **** uint8_t ergodox_left_leds_update(void);
  32:keyboards/ergodox/ez/ez.h **** 
  33:keyboards/ergodox/ez/ez.h **** #define LED_BRIGHTNESS_LO       15
  34:keyboards/ergodox/ez/ez.h **** #define LED_BRIGHTNESS_HI       255
  35:keyboards/ergodox/ez/ez.h **** 
  36:keyboards/ergodox/ez/ez.h **** 
  37:keyboards/ergodox/ez/ez.h **** inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
  38:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
  39:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
  40:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
  41:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }
  42:keyboards/ergodox/ez/ez.h **** 
  43:keyboards/ergodox/ez/ez.h **** inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
  26               		.loc 2 43 0
  27 0000 5698      		cbi 0xa,6
  28 0002 5E98      		cbi 0xb,6
  29               	.LBE70:
  30               	.LBE69:
  31               	.LBB71:
  32               	.LBB72:
  44:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
  33               		.loc 2 44 0
  34 0004 2598      		cbi 0x4,5
  35 0006 2D98      		cbi 0x5,5
  36               	.LBE72:
  37               	.LBE71:
  38               	.LBB73:
  39               	.LBB74:
  45:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
  40               		.loc 2 45 0
  41 0008 2698      		cbi 0x4,6
  42 000a 2E98      		cbi 0x5,6
  43               	.LBE74:
  44               	.LBE73:
  45               	.LBB75:
  46               	.LBB76:
  46:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
  47               		.loc 2 46 0
  48 000c 2798      		cbi 0x4,7
  49 000e 2F98      		cbi 0x5,7
  50               	.LVL0:
  51               	.LBE76:
  52               	.LBE75:
  53               	.LBE68:
  54               	.LBB77:
  55               	.LBB78:
  56               	.LBB79:
  47:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_off(uint8_t led) { DDRB &= ~(1<<(led+4)); PORTB &= ~(1<<(led+4)); }
  48:keyboards/ergodox/ez/ez.h **** 
  49:keyboards/ergodox/ez/ez.h **** inline void ergodox_led_all_on(void)
  50:keyboards/ergodox/ez/ez.h **** {
  51:keyboards/ergodox/ez/ez.h ****     ergodox_board_led_on();
  52:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_1_on();
  53:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_2_on();
  54:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_3_on();
  55:keyboards/ergodox/ez/ez.h **** }
  56:keyboards/ergodox/ez/ez.h **** 
  57:keyboards/ergodox/ez/ez.h **** inline void ergodox_led_all_off(void)
  58:keyboards/ergodox/ez/ez.h **** {
  59:keyboards/ergodox/ez/ez.h ****     ergodox_board_led_off();
  60:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_1_off();
  61:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_2_off();
  62:keyboards/ergodox/ez/ez.h ****     ergodox_right_led_3_off();
  63:keyboards/ergodox/ez/ez.h **** }
  64:keyboards/ergodox/ez/ez.h **** 
  65:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_1_set(uint8_t n)    { OCR1A = n; }
  57               		.loc 2 65 0
  58 0010 8FEF      		ldi r24,lo8(-1)
  59 0012 90E0      		ldi r25,0
  60 0014 9093 8900 		sts 136+1,r25
  61 0018 8093 8800 		sts 136,r24
  62               	.LVL1:
  63               	.LBE79:
  64               	.LBE78:
  65               	.LBB80:
  66               	.LBB81:
  66:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_set(uint8_t n)    { OCR1B = n; }
  67               		.loc 2 66 0
  68 001c 9093 8B00 		sts 138+1,r25
  69 0020 8093 8A00 		sts 138,r24
  70               	.LVL2:
  71               	.LBE81:
  72               	.LBE80:
  73               	.LBB82:
  74               	.LBB83:
  67:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_set(uint8_t n)    { OCR1C = n; }
  75               		.loc 2 67 0
  76 0024 9093 8D00 		sts 140+1,r25
  77 0028 8093 8C00 		sts 140,r24
  78               	.LVL3:
  79               	.LBE83:
  80               	.LBE82:
  81               	.LBE77:
  82               	.LBB84:
  83               	.LBB85:
  38:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
  84               		.loc 2 38 0
  85 002c 259A      		sbi 0x4,5
  86 002e 2D9A      		sbi 0x5,5
  87               	.LVL4:
  88               	.LBE85:
  89               	.LBE84:
  90               	.LBB86:
  91               	.LBB87:
  92               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  93               		.loc 3 187 0
  94 0030 2FEF      		ldi r18,lo8(159999)
  95 0032 80E7      		ldi r24,hi8(159999)
  96 0034 92E0      		ldi r25,hlo8(159999)
  97 0036 2150      	1:	subi r18,1
  98 0038 8040      		sbci r24,0
  99 003a 9040      		sbci r25,0
 100 003c 01F4      		brne 1b
 101 003e 00C0      		rjmp .
 102 0040 0000      		nop
 103               	.LVL5:
 104               	.LBE87:
 105               	.LBE86:
 106               	.LBB88:
 107               	.LBB89:
  39:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
 108               		.loc 2 39 0
 109 0042 269A      		sbi 0x4,6
 110 0044 2E9A      		sbi 0x5,6
 111               	.LVL6:
 112               	.LBE89:
 113               	.LBE88:
 114               	.LBB90:
 115               	.LBB91:
 116               		.loc 3 187 0
 117 0046 2FEF      		ldi r18,lo8(159999)
 118 0048 80E7      		ldi r24,hi8(159999)
 119 004a 92E0      		ldi r25,hlo8(159999)
 120 004c 2150      	1:	subi r18,1
 121 004e 8040      		sbci r24,0
 122 0050 9040      		sbci r25,0
 123 0052 01F4      		brne 1b
 124 0054 00C0      		rjmp .
 125 0056 0000      		nop
 126               	.LVL7:
 127               	.LBE91:
 128               	.LBE90:
 129               	.LBB92:
 130               	.LBB93:
  40:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }
 131               		.loc 2 40 0
 132 0058 279A      		sbi 0x4,7
 133 005a 2F9A      		sbi 0x5,7
 134               	.LVL8:
 135               	.LBE93:
 136               	.LBE92:
 137               	.LBB94:
 138               	.LBB95:
 139               		.loc 3 187 0
 140 005c 2FEF      		ldi r18,lo8(159999)
 141 005e 80E7      		ldi r24,hi8(159999)
 142 0060 92E0      		ldi r25,hlo8(159999)
 143 0062 2150      	1:	subi r18,1
 144 0064 8040      		sbci r24,0
 145 0066 9040      		sbci r25,0
 146 0068 01F4      		brne 1b
 147 006a 00C0      		rjmp .
 148 006c 0000      		nop
 149               	.LVL9:
 150               	.LBE95:
 151               	.LBE94:
 152               	.LBB96:
 153               	.LBB97:
  44:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
 154               		.loc 2 44 0
 155 006e 2598      		cbi 0x4,5
 156 0070 2D98      		cbi 0x5,5
 157               	.LVL10:
 158               	.LBE97:
 159               	.LBE96:
 160               	.LBB98:
 161               	.LBB99:
 162               		.loc 3 187 0
 163 0072 2FEF      		ldi r18,lo8(159999)
 164 0074 80E7      		ldi r24,hi8(159999)
 165 0076 92E0      		ldi r25,hlo8(159999)
 166 0078 2150      	1:	subi r18,1
 167 007a 8040      		sbci r24,0
 168 007c 9040      		sbci r25,0
 169 007e 01F4      		brne 1b
 170 0080 00C0      		rjmp .
 171 0082 0000      		nop
 172               	.LVL11:
 173               	.LBE99:
 174               	.LBE98:
 175               	.LBB100:
 176               	.LBB101:
  45:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
 177               		.loc 2 45 0
 178 0084 2698      		cbi 0x4,6
 179 0086 2E98      		cbi 0x5,6
 180               	.LVL12:
 181               	.LBE101:
 182               	.LBE100:
 183               	.LBB102:
 184               	.LBB103:
 185               		.loc 3 187 0
 186 0088 2FEF      		ldi r18,lo8(159999)
 187 008a 80E7      		ldi r24,hi8(159999)
 188 008c 92E0      		ldi r25,hlo8(159999)
 189 008e 2150      	1:	subi r18,1
 190 0090 8040      		sbci r24,0
 191 0092 9040      		sbci r25,0
 192 0094 01F4      		brne 1b
 193 0096 00C0      		rjmp .
 194 0098 0000      		nop
 195               	.LVL13:
 196               	.LBE103:
 197               	.LBE102:
 198               	.LBB104:
 199               	.LBB105:
  46:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_off(uint8_t led) { DDRB &= ~(1<<(led+4)); PORTB &= ~(1<<(led+4)); }
 200               		.loc 2 46 0
 201 009a 2798      		cbi 0x4,7
 202 009c 2F98      		cbi 0x5,7
 203               	.LBE105:
 204               	.LBE104:
 205               	.LBB106:
 206               	.LBB107:
 207               	.LBB108:
  43:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
 208               		.loc 2 43 0
 209 009e 5698      		cbi 0xa,6
 210 00a0 5E98      		cbi 0xb,6
 211               	.LBE108:
 212               	.LBE107:
 213               	.LBB109:
 214               	.LBB110:
  44:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
 215               		.loc 2 44 0
 216 00a2 2598      		cbi 0x4,5
 217 00a4 2D98      		cbi 0x5,5
 218               	.LBE110:
 219               	.LBE109:
 220               	.LBB111:
 221               	.LBB112:
  45:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
 222               		.loc 2 45 0
 223 00a6 2698      		cbi 0x4,6
 224 00a8 2E98      		cbi 0x5,6
 225               	.LBE112:
 226               	.LBE111:
 227               	.LBB113:
 228               	.LBB114:
  46:keyboards/ergodox/ez/ez.h **** inline void ergodox_right_led_off(uint8_t led) { DDRB &= ~(1<<(led+4)); PORTB &= ~(1<<(led+4)); }
 229               		.loc 2 46 0
 230 00aa 2798      		cbi 0x4,7
 231 00ac 2F98      		cbi 0x5,7
 232 00ae 0895      		ret
 233               	.LBE114:
 234               	.LBE113:
 235               	.LBE106:
 236               		.cfi_endproc
 237               	.LFE125:
 239               		.section	.text.matrix_init_kb,"ax",@progbits
 240               	.global	matrix_init_kb
 242               	matrix_init_kb:
 243               	.LFB124:
   7:keyboards/ergodox/ez/ez.c ****    // keyboard LEDs (see "PWM on ports OC1(A|B|C)" in "teensy-2-0.md")
 244               		.loc 1 7 0
 245               		.cfi_startproc
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
   9:keyboards/ergodox/ez/ez.c ****     TCCR1B = 0b00001001;  // set and configure fast PWM
 250               		.loc 1 9 0
 251 0000 89EA      		ldi r24,lo8(-87)
 252 0002 8093 8000 		sts 128,r24
  10:keyboards/ergodox/ez/ez.c **** 
 253               		.loc 1 10 0
 254 0006 89E0      		ldi r24,lo8(9)
 255 0008 8093 8100 		sts 129,r24
  13:keyboards/ergodox/ez/ez.c ****     PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
 256               		.loc 1 13 0
 257 000c 2498      		cbi 0x4,4
  14:keyboards/ergodox/ez/ez.c **** 
 258               		.loc 1 14 0
 259 000e 2C98      		cbi 0x5,4
  18:keyboards/ergodox/ez/ez.c ****     DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
 260               		.loc 1 18 0
 261 0010 3F98      		cbi 0x7,7
  19:keyboards/ergodox/ez/ez.c ****     DDRE  &= ~(1<<6);
 262               		.loc 1 19 0
 263 0012 8AB1      		in r24,0xa
 264 0014 8F74      		andi r24,lo8(79)
 265 0016 8AB9      		out 0xa,r24
  20:keyboards/ergodox/ez/ez.c ****     PORTC |=  (1<<7);
 266               		.loc 1 20 0
 267 0018 6E98      		cbi 0xd,6
  21:keyboards/ergodox/ez/ez.c ****     PORTD |=  (1<<7 | 1<<5 | 1<<4);
 268               		.loc 1 21 0
 269 001a 479A      		sbi 0x8,7
  22:keyboards/ergodox/ez/ez.c ****     PORTE |=  (1<<6);
 270               		.loc 1 22 0
 271 001c 8BB1      		in r24,0xb
 272 001e 806B      		ori r24,lo8(-80)
 273 0020 8BB9      		out 0xb,r24
  23:keyboards/ergodox/ez/ez.c **** 
 274               		.loc 1 23 0
 275 0022 769A      		sbi 0xe,6
  25:keyboards/ergodox/ez/ez.c **** 
 276               		.loc 1 25 0
 277 0024 0E94 0000 		call ergodox_blink_all_leds
 278               	.LVL14:
  27:keyboards/ergodox/ez/ez.c **** }
 279               		.loc 1 27 0
 280 0028 0C94 0000 		jmp matrix_init_user
 281               	.LVL15:
 282               		.cfi_endproc
 283               	.LFE124:
 285               		.section	.text.init_mcp23018,"ax",@progbits
 286               	.global	init_mcp23018
 288               	init_mcp23018:
 289               	.LFB126:
  32:keyboards/ergodox/ez/ez.c ****     ergodox_led_all_off();
  33:keyboards/ergodox/ez/ez.c ****     ergodox_led_all_set(LED_BRIGHTNESS_HI);
  34:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_1_on();
  35:keyboards/ergodox/ez/ez.c ****     _delay_ms(50);
  36:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_2_on();
  37:keyboards/ergodox/ez/ez.c ****     _delay_ms(50);
  38:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_3_on();
  39:keyboards/ergodox/ez/ez.c ****     _delay_ms(50);
  40:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_1_off();
  41:keyboards/ergodox/ez/ez.c ****     _delay_ms(50);
  42:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_2_off();
  43:keyboards/ergodox/ez/ez.c ****     _delay_ms(50);
  44:keyboards/ergodox/ez/ez.c ****     ergodox_right_led_3_off();
  45:keyboards/ergodox/ez/ez.c ****     //ergodox_led_all_on();
  46:keyboards/ergodox/ez/ez.c ****     //_delay_ms(333);
  47:keyboards/ergodox/ez/ez.c ****     ergodox_led_all_off();
  48:keyboards/ergodox/ez/ez.c **** }
  49:keyboards/ergodox/ez/ez.c **** 
  50:keyboards/ergodox/ez/ez.c **** uint8_t init_mcp23018(void) {
 290               		.loc 1 50 0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
  51:keyboards/ergodox/ez/ez.c ****     mcp23018_status = 0x20;
 296               		.loc 1 51 0
 297 0000 80E2      		ldi r24,lo8(32)
 298 0002 8093 0000 		sts mcp23018_status,r24
  52:keyboards/ergodox/ez/ez.c **** 
  53:keyboards/ergodox/ez/ez.c ****     // I2C subsystem
  54:keyboards/ergodox/ez/ez.c ****     if (i2c_initialized == 0) {
 299               		.loc 1 54 0
 300 0006 8091 0000 		lds r24,i2c_initialized
 301 000a 8111      		cpse r24,__zero_reg__
 302 000c 00C0      		rjmp .L4
  55:keyboards/ergodox/ez/ez.c ****         i2c_init();  // on pins D(1,0)
 303               		.loc 1 55 0
 304 000e 0E94 0000 		call i2c_init
 305               	.LVL16:
  56:keyboards/ergodox/ez/ez.c ****         i2c_initialized++;
 306               		.loc 1 56 0
 307 0012 81E0      		ldi r24,lo8(1)
 308 0014 8093 0000 		sts i2c_initialized,r24
 309               	.LVL17:
 310               	.LBB115:
 311               	.LBB116:
 312               		.loc 3 187 0
 313 0018 2FEF      		ldi r18,lo8(3199999)
 314 001a 83ED      		ldi r24,hi8(3199999)
 315 001c 90E3      		ldi r25,hlo8(3199999)
 316 001e 2150      	1:	subi r18,1
 317 0020 8040      		sbci r24,0
 318 0022 9040      		sbci r25,0
 319 0024 01F4      		brne 1b
 320 0026 00C0      		rjmp .
 321 0028 0000      		nop
 322               	.LVL18:
 323               	.L4:
 324               	.LBE116:
 325               	.LBE115:
  57:keyboards/ergodox/ez/ez.c ****         _delay_ms(1000);
  58:keyboards/ergodox/ez/ez.c ****     }
  59:keyboards/ergodox/ez/ez.c **** 
  60:keyboards/ergodox/ez/ez.c ****     // set pin direction
  61:keyboards/ergodox/ez/ez.c ****     // - unused  : input  : 1
  62:keyboards/ergodox/ez/ez.c ****     // - input   : input  : 1
  63:keyboards/ergodox/ez/ez.c ****     // - driving : output : 0
  64:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
 326               		.loc 1 64 0
 327 002a 80E4      		ldi r24,lo8(64)
 328 002c 0E94 0000 		call i2c_start
 329               	.LVL19:
 330 0030 8093 0000 		sts mcp23018_status,r24
 331 0034 8111      		cpse r24,__zero_reg__
 332 0036 00C0      		rjmp .L6
  65:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(IODIRA);            if (mcp23018_status) goto out;
 333               		.loc 1 65 0
 334 0038 0E94 0000 		call i2c_write
 335               	.LVL20:
 336 003c 8093 0000 		sts mcp23018_status,r24
 337 0040 8111      		cpse r24,__zero_reg__
 338 0042 00C0      		rjmp .L6
  66:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
 339               		.loc 1 66 0
 340 0044 0E94 0000 		call i2c_write
 341               	.LVL21:
 342 0048 8093 0000 		sts mcp23018_status,r24
 343 004c 8111      		cpse r24,__zero_reg__
 344 004e 00C0      		rjmp .L6
  67:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
 345               		.loc 1 67 0
 346 0050 8FE3      		ldi r24,lo8(63)
 347 0052 0E94 0000 		call i2c_write
 348               	.LVL22:
 349 0056 8093 0000 		sts mcp23018_status,r24
 350 005a 8111      		cpse r24,__zero_reg__
 351 005c 00C0      		rjmp .L6
  68:keyboards/ergodox/ez/ez.c ****     i2c_stop();
 352               		.loc 1 68 0
 353 005e 0E94 0000 		call i2c_stop
 354               	.LVL23:
  69:keyboards/ergodox/ez/ez.c **** 
  70:keyboards/ergodox/ez/ez.c ****     // set pull-up
  71:keyboards/ergodox/ez/ez.c ****     // - unused  : on  : 1
  72:keyboards/ergodox/ez/ez.c ****     // - input   : on  : 1
  73:keyboards/ergodox/ez/ez.c ****     // - driving : off : 0
  74:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
 355               		.loc 1 74 0
 356 0062 80E4      		ldi r24,lo8(64)
 357 0064 0E94 0000 		call i2c_start
 358               	.LVL24:
 359 0068 8093 0000 		sts mcp23018_status,r24
 360 006c 8111      		cpse r24,__zero_reg__
 361 006e 00C0      		rjmp .L6
  75:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(GPPUA);             if (mcp23018_status) goto out;
 362               		.loc 1 75 0
 363 0070 8CE0      		ldi r24,lo8(12)
 364 0072 0E94 0000 		call i2c_write
 365               	.LVL25:
 366 0076 8093 0000 		sts mcp23018_status,r24
 367 007a 8111      		cpse r24,__zero_reg__
 368 007c 00C0      		rjmp .L6
  76:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
 369               		.loc 1 76 0
 370 007e 0E94 0000 		call i2c_write
 371               	.LVL26:
 372 0082 8093 0000 		sts mcp23018_status,r24
 373 0086 8111      		cpse r24,__zero_reg__
 374 0088 00C0      		rjmp .L6
  77:keyboards/ergodox/ez/ez.c ****     mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
 375               		.loc 1 77 0
 376 008a 8FE3      		ldi r24,lo8(63)
 377 008c 0E94 0000 		call i2c_write
 378               	.LVL27:
 379 0090 8093 0000 		sts mcp23018_status,r24
 380               	.L6:
  78:keyboards/ergodox/ez/ez.c **** 
  79:keyboards/ergodox/ez/ez.c **** out:
  80:keyboards/ergodox/ez/ez.c ****     i2c_stop();
 381               		.loc 1 80 0
 382 0094 0E94 0000 		call i2c_stop
 383               	.LVL28:
  81:keyboards/ergodox/ez/ez.c **** 
  82:keyboards/ergodox/ez/ez.c ****     return mcp23018_status;
  83:keyboards/ergodox/ez/ez.c **** }
 384               		.loc 1 83 0
 385 0098 8091 0000 		lds r24,mcp23018_status
 386 009c 0895      		ret
 387               		.cfi_endproc
 388               	.LFE126:
 390               	.global	mcp23018_status
 391               		.section	.data.mcp23018_status,"aw",@progbits
 394               	mcp23018_status:
 395 0000 20        		.byte	32
 396               	.global	i2c_initialized
 397               		.section	.bss.i2c_initialized,"aw",@nobits
 400               	i2c_initialized:
 401 0000 00        		.zero	1
 402               		.text
 403               	.Letext0:
 404               		.file 4 "/usr/lib/avr/include/stdint.h"
 405               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 406               		.file 6 "./quantum/quantum.h"
 407               		.file 7 "keyboards/ergodox/ez/i2cmaster.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ez.c
     /tmp/cccaWybl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccaWybl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccaWybl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccaWybl.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccaWybl.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccaWybl.s:13     .text.ergodox_blink_all_leds:0000000000000000 ergodox_blink_all_leds
     /tmp/cccaWybl.s:242    .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/cccaWybl.s:288    .text.init_mcp23018:0000000000000000 init_mcp23018
     /tmp/cccaWybl.s:394    .data.mcp23018_status:0000000000000000 mcp23018_status
     /tmp/cccaWybl.s:400    .bss.i2c_initialized:0000000000000000 i2c_initialized

UNDEFINED SYMBOLS
matrix_init_user
i2c_init
i2c_start
i2c_write
i2c_stop
__do_copy_data
__do_clear_bss
