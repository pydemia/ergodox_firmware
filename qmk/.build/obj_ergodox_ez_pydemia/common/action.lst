   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_hand_swap,"ax",@progbits
  11               	.global	process_hand_swap
  13               	process_hand_swap:
  14               	.LFB104:
  15               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 DC01      		movw r26,r24
  24               	.LVL1:
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  25               		.loc 1 68 0
  26 0002 1196      		adiw r26,1
  27 0004 2C91      		ld r18,X
  28 0006 1197      		sbiw r26,1
  29               	.LVL2:
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  30               		.loc 1 69 0
  31 0008 8C91      		ld r24,X
  32               	.LVL3:
  33 000a 682F      		mov r22,r24
  34 000c 70E0      		ldi r23,0
  35 000e 41E0      		ldi r20,lo8(1)
  36 0010 50E0      		ldi r21,0
  37 0012 00C0      		rjmp 2f
  38               		1:
  39 0014 440F      		lsl r20
  40               		2:
  41 0016 8A95      		dec r24
  42 0018 02F4      		brpl 1b
  43               	.LVL4:
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  44               		.loc 1 70 0
  45 001a 1296      		adiw r26,2
  46 001c 8C91      		ld r24,X
  47 001e 1297      		sbiw r26,2
  48               	.LVL5:
  49 0020 30E0      		ldi r19,0
  50 0022 8823      		tst r24
  51 0024 01F0      		breq .L2
  52               		.loc 1 70 0 is_stmt 0 discriminator 1
  53 0026 8091 0000 		lds r24,swap_hands
  54               	.LVL6:
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  55               		.loc 1 73 0 is_stmt 1 discriminator 1
  56 002a 8823      		tst r24
  57 002c 01F0      		breq .L5
  58 002e 00C0      		rjmp .L7
  59               	.LVL7:
  60               	.L2:
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  61               		.loc 1 71 0 discriminator 2
  62 0030 F901      		movw r30,r18
  63 0032 E050      		subi r30,lo8(-(swap_state.4944))
  64 0034 F040      		sbci r31,hi8(-(swap_state.4944))
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  65               		.loc 1 70 0 discriminator 2
  66 0036 9081      		ld r25,Z
  67 0038 9423      		and r25,r20
  68 003a 01F0      		breq .L5
  69               	.L7:
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  70               		.loc 1 74 0
  71 003c 86E0      		ldi r24,lo8(6)
  72 003e 829F      		mul r24,r18
  73 0040 F001      		movw r30,r0
  74 0042 839F      		mul r24,r19
  75 0044 F00D      		add r31,r0
  76 0046 1124      		clr __zero_reg__
  77 0048 E60F      		add r30,r22
  78 004a F71F      		adc r31,r23
  79 004c EE0F      		lsl r30
  80 004e FF1F      		rol r31
  81 0050 E050      		subi r30,lo8(-(hand_swap_config))
  82 0052 F040      		sbci r31,hi8(-(hand_swap_config))
  83 0054 8081      		ld r24,Z
  84 0056 9181      		ldd r25,Z+1
  85 0058 8D93      		st X+,r24
  86 005a 9C93      		st X,r25
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  87               		.loc 1 75 0
  88 005c F901      		movw r30,r18
  89 005e E050      		subi r30,lo8(-(swap_state.4944))
  90 0060 F040      		sbci r31,hi8(-(swap_state.4944))
  91 0062 8081      		ld r24,Z
  92 0064 482B      		or r20,r24
  93               	.LVL8:
  94 0066 00C0      		rjmp .L10
  95               	.LVL9:
  96               	.L5:
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  97               		.loc 1 77 0
  98 0068 F901      		movw r30,r18
  99 006a E050      		subi r30,lo8(-(swap_state.4944))
 100 006c F040      		sbci r31,hi8(-(swap_state.4944))
 101 006e 4095      		com r20
 102               	.LVL10:
 103 0070 8081      		ld r24,Z
 104 0072 4823      		and r20,r24
 105               	.L10:
 106 0074 4083      		st Z,r20
 107               	.LVL11:
 108 0076 0895      		ret
 109               		.cfi_endproc
 110               	.LFE104:
 112               		.section	.text.action_exec,"ax",@progbits
 113               	.global	action_exec
 115               	action_exec:
 116               	.LFB103:
  38:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
 117               		.loc 1 38 0
 118               		.cfi_startproc
 119 0000 CF93      		push r28
 120               	.LCFI0:
 121               		.cfi_def_cfa_offset 3
 122               		.cfi_offset 28, -2
 123 0002 DF93      		push r29
 124               	.LCFI1:
 125               		.cfi_def_cfa_offset 4
 126               		.cfi_offset 29, -3
 127 0004 CDB7      		in r28,__SP_L__
 128 0006 DEB7      		in r29,__SP_H__
 129               	.LCFI2:
 130               		.cfi_def_cfa_register 28
 131 0008 2B97      		sbiw r28,11
 132               	.LCFI3:
 133               		.cfi_def_cfa_offset 15
 134 000a 0FB6      		in __tmp_reg__,__SREG__
 135 000c F894      		cli
 136 000e DEBF      		out __SP_H__,r29
 137 0010 0FBE      		out __SREG__,__tmp_reg__
 138 0012 CDBF      		out __SP_L__,r28
 139               	/* prologue: function */
 140               	/* frame size = 11 */
 141               	/* stack size = 13 */
 142               	.L__stack_usage = 13
 143 0014 942F      		mov r25,r20
 144 0016 4F83      		std Y+7,r20
 145 0018 252F      		mov r18,r21
 146 001a 5887      		std Y+8,r21
 147 001c 6987      		std Y+9,r22
 148 001e 7A87      		std Y+10,r23
 149 0020 8B87      		std Y+11,r24
 150               	.LBB4:
 151               	.LBB5:
 152               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 153               		.loc 2 49 0
 154 0022 4A85      		ldd r20,Y+10
 155 0024 5B85      		ldd r21,Y+11
 156 0026 452B      		or r20,r21
 157 0028 01F0      		breq .L16
 158 002a 2F3F      		cpi r18,lo8(-1)
 159 002c 01F4      		brne .L17
 160 002e 81E0      		ldi r24,lo8(1)
 161 0030 9F3F      		cpi r25,lo8(-1)
 162 0032 01F4      		brne .L17
 163 0034 00C0      		rjmp .L13
 164               	.L16:
 165 0036 81E0      		ldi r24,lo8(1)
 166 0038 00C0      		rjmp .L13
 167               	.L17:
 168 003a 80E0      		ldi r24,0
 169               	.L13:
 170               	.LBE5:
 171               	.LBE4:
  45:./tmk_core/common/action.c ****         process_hand_swap(&event);
 172               		.loc 1 45 0
 173 003c 80FD      		sbrc r24,0
 174 003e 00C0      		rjmp .L15
  46:./tmk_core/common/action.c ****     }
 175               		.loc 1 46 0
 176 0040 CE01      		movw r24,r28
 177 0042 0796      		adiw r24,7
 178 0044 0E94 0000 		call process_hand_swap
 179               	.LVL12:
 180               	.L15:
  50:./tmk_core/common/action.c **** 
 181               		.loc 1 50 0
 182 0048 DE01      		movw r26,r28
 183 004a 1196      		adiw r26,1
 184 004c 86E0      		ldi r24,lo8(6)
 185 004e FD01      		movw r30,r26
 186               		0:
 187 0050 1192      		st Z+,__zero_reg__
 188 0052 8A95      		dec r24
 189 0054 01F4      		brne 0b
 190 0056 85E0      		ldi r24,lo8(5)
 191 0058 FE01      		movw r30,r28
 192 005a 3796      		adiw r30,7
 193               		0:
 194 005c 0190      		ld r0,Z+
 195 005e 0D92      		st X+,r0
 196 0060 8A95      		dec r24
 197 0062 01F4      		brne 0b
  53:./tmk_core/common/action.c **** #else
 198               		.loc 1 53 0
 199 0064 4981      		ldd r20,Y+1
 200 0066 5A81      		ldd r21,Y+2
 201 0068 6B81      		ldd r22,Y+3
 202 006a 7C81      		ldd r23,Y+4
 203 006c 8D81      		ldd r24,Y+5
 204 006e 9E81      		ldd r25,Y+6
 205 0070 0E94 0000 		call action_tapping_process
 206               	.LVL13:
 207               	/* epilogue start */
  60:./tmk_core/common/action.c **** 
 208               		.loc 1 60 0
 209 0074 2B96      		adiw r28,11
 210 0076 0FB6      		in __tmp_reg__,__SREG__
 211 0078 F894      		cli
 212 007a DEBF      		out __SP_H__,r29
 213 007c 0FBE      		out __SREG__,__tmp_reg__
 214 007e CDBF      		out __SP_L__,r28
 215 0080 DF91      		pop r29
 216 0082 CF91      		pop r28
 217 0084 0895      		ret
 218               		.cfi_endproc
 219               	.LFE103:
 221               		.section	.text.process_record_quantum,"ax",@progbits
 222               		.weak	process_record_quantum
 224               	process_record_quantum:
 225               	.LFB106:
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
 226               		.loc 1 99 0
 227               		.cfi_startproc
 228               	.LVL14:
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 0 */
 232               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 101:./tmk_core/common/action.c **** }
 233               		.loc 1 101 0
 234 0000 81E0      		ldi r24,lo8(1)
 235               	.LVL15:
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE106:
 240               		.section	.text.register_code,"ax",@progbits
 241               	.global	register_code
 243               	register_code:
 244               	.LFB109:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 245               		.loc 1 547 0
 246               		.cfi_startproc
 247               	.LVL16:
 248 0000 CF93      		push r28
 249               	.LCFI4:
 250               		.cfi_def_cfa_offset 3
 251               		.cfi_offset 28, -2
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 254               	/* stack size = 1 */
 255               	.L__stack_usage = 1
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 256               		.loc 1 548 0
 257 0002 8823      		tst r24
 258 0004 01F4      		brne .+2
 259 0006 00C0      		rjmp .L22
 260 0008 C82F      		mov r28,r24
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 261               		.loc 1 553 0
 262 000a 8238      		cpi r24,lo8(-126)
 263 000c 01F4      		brne .L25
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 264               		.loc 1 556 0
 265 000e 0E94 0000 		call host_keyboard_leds
 266               	.LVL17:
 267 0012 81FD      		sbrc r24,1
 268 0014 00C0      		rjmp .L22
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 269               		.loc 1 558 0
 270 0016 89E3      		ldi r24,lo8(57)
 271 0018 0E94 0000 		call add_key
 272               	.LVL18:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 273               		.loc 1 559 0
 274 001c 0E94 0000 		call send_keyboard_report
 275               	.LVL19:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 276               		.loc 1 560 0
 277 0020 89E3      		ldi r24,lo8(57)
 278 0022 00C0      		rjmp .L57
 279               	.LVL20:
 280               	.L25:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 281               		.loc 1 564 0
 282 0024 8338      		cpi r24,lo8(-125)
 283 0026 01F4      		brne .L27
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 284               		.loc 1 566 0
 285 0028 0E94 0000 		call host_keyboard_leds
 286               	.LVL21:
 287 002c 80FD      		sbrc r24,0
 288 002e 00C0      		rjmp .L22
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 289               		.loc 1 568 0
 290 0030 83E5      		ldi r24,lo8(83)
 291 0032 0E94 0000 		call add_key
 292               	.LVL22:
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 293               		.loc 1 569 0
 294 0036 0E94 0000 		call send_keyboard_report
 295               	.LVL23:
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 296               		.loc 1 570 0
 297 003a 83E5      		ldi r24,lo8(83)
 298               	.L57:
 299 003c 0E94 0000 		call del_key
 300               	.LVL24:
 301               	.L58:
 302               	/* epilogue start */
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 303               		.loc 1 619 0
 304 0040 CF91      		pop r28
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 305               		.loc 1 571 0
 306 0042 0C94 0000 		jmp send_keyboard_report
 307               	.LVL25:
 308               	.L27:
 574:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 309               		.loc 1 574 0
 310 0046 8438      		cpi r24,lo8(-124)
 311 0048 01F4      		brne .L28
 576:./tmk_core/common/action.c **** #endif
 312               		.loc 1 576 0
 313 004a 0E94 0000 		call host_keyboard_leds
 314               	.LVL26:
 315 004e 82FD      		sbrc r24,2
 316 0050 00C0      		rjmp .L22
 578:./tmk_core/common/action.c ****         send_keyboard_report();
 317               		.loc 1 578 0
 318 0052 87E4      		ldi r24,lo8(71)
 319 0054 0E94 0000 		call add_key
 320               	.LVL27:
 579:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 321               		.loc 1 579 0
 322 0058 0E94 0000 		call send_keyboard_report
 323               	.LVL28:
 580:./tmk_core/common/action.c ****         send_keyboard_report();
 324               		.loc 1 580 0
 325 005c 87E4      		ldi r24,lo8(71)
 326 005e 00C0      		rjmp .L57
 327               	.LVL29:
 328               	.L28:
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 329               		.loc 1 585 0
 330 0060 8CEF      		ldi r24,lo8(-4)
 331               	.LVL30:
 332 0062 8C0F      		add r24,r28
 333 0064 813A      		cpi r24,lo8(-95)
 334 0066 00F4      		brsh .L29
 587:./tmk_core/common/action.c **** 
 335               		.loc 1 587 0
 336 0068 8C2F      		mov r24,r28
 337 006a 0E94 0000 		call command_proc
 338               	.LVL31:
 339 006e 8111      		cpse r24,__zero_reg__
 340 0070 00C0      		rjmp .L22
 605:./tmk_core/common/action.c ****             send_keyboard_report();
 341               		.loc 1 605 0
 342 0072 8C2F      		mov r24,r28
 343 0074 0E94 0000 		call add_key
 344               	.LVL32:
 345 0078 00C0      		rjmp .L58
 346               	.L29:
 609:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 347               		.loc 1 609 0
 348 007a 80E2      		ldi r24,lo8(32)
 349 007c 8C0F      		add r24,r28
 350 007e 8830      		cpi r24,lo8(8)
 351 0080 00F4      		brsh .L30
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 352               		.loc 1 610 0
 353 0082 C770      		andi r28,lo8(7)
 354               	.LVL33:
 355 0084 81E0      		ldi r24,lo8(1)
 356 0086 00C0      		rjmp 2f
 357               		1:
 358 0088 880F      		lsl r24
 359               		2:
 360 008a CA95      		dec r28
 361 008c 02F4      		brpl 1b
 362 008e 0E94 0000 		call add_mods
 363               	.LVL34:
 364 0092 00C0      		rjmp .L58
 365               	.LVL35:
 366               	.L30:
 613:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 367               		.loc 1 613 0
 368 0094 8BE5      		ldi r24,lo8(91)
 369 0096 8C0F      		add r24,r28
 370 0098 8330      		cpi r24,lo8(3)
 371 009a 00F4      		brsh .L31
 614:./tmk_core/common/action.c ****     }
 372               		.loc 1 614 0
 373 009c C53A      		cpi r28,lo8(-91)
 374 009e 01F0      		breq .L34
 614:./tmk_core/common/action.c ****     }
 375               		.loc 1 614 0 is_stmt 0 discriminator 1
 376 00a0 C63A      		cpi r28,lo8(-90)
 377 00a2 01F0      		breq .L35
 614:./tmk_core/common/action.c ****     }
 378               		.loc 1 614 0
 379 00a4 83E8      		ldi r24,lo8(-125)
 380 00a6 90E0      		ldi r25,0
 381 00a8 00C0      		rjmp .L32
 382               	.L34:
 383 00aa 81E8      		ldi r24,lo8(-127)
 384 00ac 90E0      		ldi r25,0
 385 00ae 00C0      		rjmp .L32
 386               	.L35:
 387 00b0 82E8      		ldi r24,lo8(-126)
 388 00b2 90E0      		ldi r25,0
 389               	.L32:
 390               	/* epilogue start */
 391               		.loc 1 619 0 is_stmt 1 discriminator 12
 392 00b4 CF91      		pop r28
 393               	.LVL36:
 614:./tmk_core/common/action.c ****     }
 394               		.loc 1 614 0 discriminator 12
 395 00b6 0C94 0000 		jmp host_system_send
 396               	.LVL37:
 397               	.L31:
 616:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 398               		.loc 1 616 0
 399 00ba 88E5      		ldi r24,lo8(88)
 400 00bc 8C0F      		add r24,r28
 401 00be 8531      		cpi r24,lo8(21)
 402 00c0 00F0      		brlo .+2
 403 00c2 00C0      		rjmp .L22
 617:./tmk_core/common/action.c ****     }
 404               		.loc 1 617 0
 405 00c4 C83A      		cpi r28,lo8(-88)
 406 00c6 01F0      		breq .L36
 617:./tmk_core/common/action.c ****     }
 407               		.loc 1 617 0 is_stmt 0 discriminator 1
 408 00c8 C93A      		cpi r28,lo8(-87)
 409 00ca 01F0      		breq .L37
 617:./tmk_core/common/action.c ****     }
 410               		.loc 1 617 0 discriminator 3
 411 00cc CA3A      		cpi r28,lo8(-86)
 412 00ce 01F0      		breq .L38
 617:./tmk_core/common/action.c ****     }
 413               		.loc 1 617 0 discriminator 5
 414 00d0 CB3A      		cpi r28,lo8(-85)
 415 00d2 01F0      		breq .L39
 617:./tmk_core/common/action.c ****     }
 416               		.loc 1 617 0 discriminator 7
 417 00d4 CC3A      		cpi r28,lo8(-84)
 418 00d6 01F0      		breq .L40
 617:./tmk_core/common/action.c ****     }
 419               		.loc 1 617 0 discriminator 9
 420 00d8 CB3B      		cpi r28,lo8(-69)
 421 00da 01F0      		breq .L41
 617:./tmk_core/common/action.c ****     }
 422               		.loc 1 617 0 discriminator 11
 423 00dc CC3B      		cpi r28,lo8(-68)
 424 00de 01F0      		breq .L42
 617:./tmk_core/common/action.c ****     }
 425               		.loc 1 617 0 discriminator 13
 426 00e0 CD3A      		cpi r28,lo8(-83)
 427 00e2 01F0      		breq .L43
 617:./tmk_core/common/action.c ****     }
 428               		.loc 1 617 0 discriminator 15
 429 00e4 C03B      		cpi r28,lo8(-80)
 430 00e6 01F0      		breq .L44
 617:./tmk_core/common/action.c ****     }
 431               		.loc 1 617 0 discriminator 17
 432 00e8 CE3A      		cpi r28,lo8(-82)
 433 00ea 01F0      		breq .L45
 617:./tmk_core/common/action.c ****     }
 434               		.loc 1 617 0 discriminator 19
 435 00ec CF3A      		cpi r28,lo8(-81)
 436 00ee 01F0      		breq .L46
 617:./tmk_core/common/action.c ****     }
 437               		.loc 1 617 0 discriminator 21
 438 00f0 C13B      		cpi r28,lo8(-79)
 439 00f2 01F0      		breq .L47
 617:./tmk_core/common/action.c ****     }
 440               		.loc 1 617 0 discriminator 23
 441 00f4 C23B      		cpi r28,lo8(-78)
 442 00f6 01F0      		breq .L48
 617:./tmk_core/common/action.c ****     }
 443               		.loc 1 617 0 discriminator 25
 444 00f8 C33B      		cpi r28,lo8(-77)
 445 00fa 01F0      		breq .L49
 617:./tmk_core/common/action.c ****     }
 446               		.loc 1 617 0 discriminator 27
 447 00fc C43B      		cpi r28,lo8(-76)
 448 00fe 01F0      		breq .L50
 617:./tmk_core/common/action.c ****     }
 449               		.loc 1 617 0 discriminator 29
 450 0100 C53B      		cpi r28,lo8(-75)
 451 0102 01F0      		breq .L51
 617:./tmk_core/common/action.c ****     }
 452               		.loc 1 617 0 discriminator 31
 453 0104 C63B      		cpi r28,lo8(-74)
 454 0106 01F0      		breq .L52
 617:./tmk_core/common/action.c ****     }
 455               		.loc 1 617 0 discriminator 33
 456 0108 C73B      		cpi r28,lo8(-73)
 457 010a 01F0      		breq .L53
 617:./tmk_core/common/action.c ****     }
 458               		.loc 1 617 0 discriminator 35
 459 010c C83B      		cpi r28,lo8(-72)
 460 010e 01F0      		breq .L54
 617:./tmk_core/common/action.c ****     }
 461               		.loc 1 617 0 discriminator 37
 462 0110 C93B      		cpi r28,lo8(-71)
 463 0112 01F0      		breq .L55
 617:./tmk_core/common/action.c ****     }
 464               		.loc 1 617 0 discriminator 39
 465 0114 CA3B      		cpi r28,lo8(-70)
 466 0116 01F4      		brne .+2
 467 0118 00C0      		rjmp .L56
 617:./tmk_core/common/action.c ****     }
 468               		.loc 1 617 0
 469 011a 80E0      		ldi r24,0
 470 011c 90E0      		ldi r25,0
 471 011e 00C0      		rjmp .L33
 472               	.L36:
 473 0120 82EE      		ldi r24,lo8(-30)
 474 0122 90E0      		ldi r25,0
 475 0124 00C0      		rjmp .L33
 476               	.L37:
 477 0126 89EE      		ldi r24,lo8(-23)
 478 0128 90E0      		ldi r25,0
 479 012a 00C0      		rjmp .L33
 480               	.L38:
 481 012c 8AEE      		ldi r24,lo8(-22)
 482 012e 90E0      		ldi r25,0
 483 0130 00C0      		rjmp .L33
 484               	.L39:
 485 0132 85EB      		ldi r24,lo8(-75)
 486 0134 90E0      		ldi r25,0
 487 0136 00C0      		rjmp .L33
 488               	.L40:
 489 0138 86EB      		ldi r24,lo8(-74)
 490 013a 90E0      		ldi r25,0
 491 013c 00C0      		rjmp .L33
 492               	.L41:
 493 013e 83EB      		ldi r24,lo8(-77)
 494 0140 90E0      		ldi r25,0
 495 0142 00C0      		rjmp .L33
 496               	.L42:
 497 0144 84EB      		ldi r24,lo8(-76)
 498 0146 90E0      		ldi r25,0
 499 0148 00C0      		rjmp .L33
 500               	.L43:
 501 014a 87EB      		ldi r24,lo8(-73)
 502 014c 90E0      		ldi r25,0
 503 014e 00C0      		rjmp .L33
 504               	.L44:
 505 0150 8CEC      		ldi r24,lo8(-52)
 506 0152 90E0      		ldi r25,0
 507 0154 00C0      		rjmp .L33
 508               	.L45:
 509 0156 8DEC      		ldi r24,lo8(-51)
 510 0158 90E0      		ldi r25,0
 511 015a 00C0      		rjmp .L33
 512               	.L46:
 513 015c 83E8      		ldi r24,lo8(-125)
 514 015e 91E0      		ldi r25,lo8(1)
 515 0160 00C0      		rjmp .L33
 516               	.L47:
 517 0162 8AE8      		ldi r24,lo8(-118)
 518 0164 91E0      		ldi r25,lo8(1)
 519 0166 00C0      		rjmp .L33
 520               	.L48:
 521 0168 82E9      		ldi r24,lo8(-110)
 522 016a 91E0      		ldi r25,lo8(1)
 523 016c 00C0      		rjmp .L33
 524               	.L49:
 525 016e 84E9      		ldi r24,lo8(-108)
 526 0170 91E0      		ldi r25,lo8(1)
 527 0172 00C0      		rjmp .L33
 528               	.L50:
 529 0174 81E2      		ldi r24,lo8(33)
 530 0176 92E0      		ldi r25,lo8(2)
 531 0178 00C0      		rjmp .L33
 532               	.L51:
 533 017a 83E2      		ldi r24,lo8(35)
 534 017c 92E0      		ldi r25,lo8(2)
 535 017e 00C0      		rjmp .L33
 536               	.L52:
 537 0180 84E2      		ldi r24,lo8(36)
 538 0182 92E0      		ldi r25,lo8(2)
 539 0184 00C0      		rjmp .L33
 540               	.L53:
 541 0186 85E2      		ldi r24,lo8(37)
 542 0188 92E0      		ldi r25,lo8(2)
 543 018a 00C0      		rjmp .L33
 544               	.L54:
 545 018c 86E2      		ldi r24,lo8(38)
 546 018e 92E0      		ldi r25,lo8(2)
 547 0190 00C0      		rjmp .L33
 548               	.L55:
 549 0192 87E2      		ldi r24,lo8(39)
 550 0194 92E0      		ldi r25,lo8(2)
 551 0196 00C0      		rjmp .L33
 552               	.L56:
 553 0198 8AE2      		ldi r24,lo8(42)
 554 019a 92E0      		ldi r25,lo8(2)
 555               	.L33:
 556               	/* epilogue start */
 557               		.loc 1 619 0 is_stmt 1 discriminator 84
 558 019c CF91      		pop r28
 559               	.LVL38:
 617:./tmk_core/common/action.c ****     }
 560               		.loc 1 617 0 discriminator 84
 561 019e 0C94 0000 		jmp host_consumer_send
 562               	.LVL39:
 563               	.L22:
 564               	/* epilogue start */
 565               		.loc 1 619 0
 566 01a2 CF91      		pop r28
 567 01a4 0895      		ret
 568               		.cfi_endproc
 569               	.LFE109:
 571               		.section	.text.unregister_code,"ax",@progbits
 572               	.global	unregister_code
 574               	unregister_code:
 575               	.LFB110:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 576               		.loc 1 622 0
 577               		.cfi_startproc
 578               	.LVL40:
 579               	/* prologue: function */
 580               	/* frame size = 0 */
 581               	/* stack size = 0 */
 582               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 583               		.loc 1 623 0
 584 0000 8823      		tst r24
 585 0002 01F4      		brne .+2
 586 0004 00C0      		rjmp .L59
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 587               		.loc 1 628 0
 588 0006 8238      		cpi r24,lo8(-126)
 589 0008 01F4      		brne .L62
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 590               		.loc 1 631 0
 591 000a 0E94 0000 		call host_keyboard_leds
 592               	.LVL41:
 593 000e 81FF      		sbrs r24,1
 594 0010 00C0      		rjmp .L59
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 595               		.loc 1 633 0
 596 0012 89E3      		ldi r24,lo8(57)
 597 0014 0E94 0000 		call add_key
 598               	.LVL42:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 599               		.loc 1 634 0
 600 0018 0E94 0000 		call send_keyboard_report
 601               	.LVL43:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 602               		.loc 1 635 0
 603 001c 89E3      		ldi r24,lo8(57)
 604 001e 00C0      		rjmp .L78
 605               	.LVL44:
 606               	.L62:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 607               		.loc 1 639 0
 608 0020 8338      		cpi r24,lo8(-125)
 609 0022 01F4      		brne .L64
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 610               		.loc 1 641 0
 611 0024 0E94 0000 		call host_keyboard_leds
 612               	.LVL45:
 613 0028 80FF      		sbrs r24,0
 614 002a 00C0      		rjmp .L59
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 615               		.loc 1 643 0
 616 002c 83E5      		ldi r24,lo8(83)
 617 002e 0E94 0000 		call add_key
 618               	.LVL46:
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 619               		.loc 1 644 0
 620 0032 0E94 0000 		call send_keyboard_report
 621               	.LVL47:
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 622               		.loc 1 645 0
 623 0036 83E5      		ldi r24,lo8(83)
 624               	.L78:
 625 0038 0E94 0000 		call del_key
 626               	.LVL48:
 627               	.L79:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 628               		.loc 1 646 0
 629 003c 0C94 0000 		jmp send_keyboard_report
 630               	.LVL49:
 631               	.L64:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 632               		.loc 1 649 0
 633 0040 8438      		cpi r24,lo8(-124)
 634 0042 01F4      		brne .L65
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 635               		.loc 1 651 0
 636 0044 0E94 0000 		call host_keyboard_leds
 637               	.LVL50:
 638 0048 82FF      		sbrs r24,2
 639 004a 00C0      		rjmp .L59
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 640               		.loc 1 653 0
 641 004c 87E4      		ldi r24,lo8(71)
 642 004e 0E94 0000 		call add_key
 643               	.LVL51:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 644               		.loc 1 654 0
 645 0052 0E94 0000 		call send_keyboard_report
 646               	.LVL52:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 647               		.loc 1 655 0
 648 0056 87E4      		ldi r24,lo8(71)
 649 0058 00C0      		rjmp .L78
 650               	.LVL53:
 651               	.L65:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 652               		.loc 1 660 0
 653 005a 9CEF      		ldi r25,lo8(-4)
 654 005c 980F      		add r25,r24
 655 005e 913A      		cpi r25,lo8(-95)
 656 0060 00F0      		brlo .L78
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 657               		.loc 1 664 0
 658 0062 90E2      		ldi r25,lo8(32)
 659 0064 980F      		add r25,r24
 660 0066 9830      		cpi r25,lo8(8)
 661 0068 00F4      		brsh .L67
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 662               		.loc 1 665 0
 663 006a 8770      		andi r24,lo8(7)
 664               	.LVL54:
 665 006c 91E0      		ldi r25,lo8(1)
 666 006e 00C0      		rjmp 2f
 667               		1:
 668 0070 990F      		lsl r25
 669               		2:
 670 0072 8A95      		dec r24
 671 0074 02F4      		brpl 1b
 672 0076 892F      		mov r24,r25
 673 0078 0E94 0000 		call del_mods
 674               	.LVL55:
 675 007c 00C0      		rjmp .L79
 676               	.LVL56:
 677               	.L67:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 678               		.loc 1 668 0
 679 007e 9BE5      		ldi r25,lo8(91)
 680 0080 980F      		add r25,r24
 681 0082 9330      		cpi r25,lo8(3)
 682 0084 00F4      		brsh .L68
 669:./tmk_core/common/action.c ****         host_system_send(0);
 683               		.loc 1 669 0
 684 0086 80E0      		ldi r24,0
 685 0088 90E0      		ldi r25,0
 686               	.LVL57:
 687 008a 0C94 0000 		jmp host_system_send
 688               	.LVL58:
 689               	.L68:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 690               		.loc 1 671 0
 691 008e 885A      		subi r24,lo8(-(88))
 692               	.LVL59:
 693 0090 8531      		cpi r24,lo8(21)
 694 0092 00F4      		brsh .L59
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 695               		.loc 1 672 0
 696 0094 80E0      		ldi r24,0
 697 0096 90E0      		ldi r25,0
 698               	.LVL60:
 699 0098 0C94 0000 		jmp host_consumer_send
 700               	.LVL61:
 701               	.L59:
 702 009c 0895      		ret
 703               		.cfi_endproc
 704               	.LFE110:
 706               		.section	.text.register_mods,"ax",@progbits
 707               	.global	register_mods
 709               	register_mods:
 710               	.LFB111:
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 711               		.loc 1 677 0
 712               		.cfi_startproc
 713               	.LVL62:
 714               	/* prologue: function */
 715               	/* frame size = 0 */
 716               	/* stack size = 0 */
 717               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 718               		.loc 1 678 0
 719 0000 8823      		tst r24
 720 0002 01F0      		breq .L80
 679:./tmk_core/common/action.c ****         add_mods(mods);
 721               		.loc 1 679 0
 722 0004 0E94 0000 		call add_mods
 723               	.LVL63:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 724               		.loc 1 680 0
 725 0008 0C94 0000 		jmp send_keyboard_report
 726               	.LVL64:
 727               	.L80:
 728 000c 0895      		ret
 729               		.cfi_endproc
 730               	.LFE111:
 732               		.section	.text.unregister_mods,"ax",@progbits
 733               	.global	unregister_mods
 735               	unregister_mods:
 736               	.LFB112:
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 737               		.loc 1 685 0
 738               		.cfi_startproc
 739               	.LVL65:
 740               	/* prologue: function */
 741               	/* frame size = 0 */
 742               	/* stack size = 0 */
 743               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 744               		.loc 1 686 0
 745 0000 8823      		tst r24
 746 0002 01F0      		breq .L82
 687:./tmk_core/common/action.c ****         del_mods(mods);
 747               		.loc 1 687 0
 748 0004 0E94 0000 		call del_mods
 749               	.LVL66:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 750               		.loc 1 688 0
 751 0008 0C94 0000 		jmp send_keyboard_report
 752               	.LVL67:
 753               	.L82:
 754 000c 0895      		ret
 755               		.cfi_endproc
 756               	.LFE112:
 758               		.section	.text.process_action,"ax",@progbits
 759               	.global	process_action
 761               	process_action:
 762               	.LFB108:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 763               		.loc 1 122 0
 764               		.cfi_startproc
 765               	.LVL68:
 766 0000 8F92      		push r8
 767               	.LCFI5:
 768               		.cfi_def_cfa_offset 3
 769               		.cfi_offset 8, -2
 770 0002 9F92      		push r9
 771               	.LCFI6:
 772               		.cfi_def_cfa_offset 4
 773               		.cfi_offset 9, -3
 774 0004 AF92      		push r10
 775               	.LCFI7:
 776               		.cfi_def_cfa_offset 5
 777               		.cfi_offset 10, -4
 778 0006 BF92      		push r11
 779               	.LCFI8:
 780               		.cfi_def_cfa_offset 6
 781               		.cfi_offset 11, -5
 782 0008 DF92      		push r13
 783               	.LCFI9:
 784               		.cfi_def_cfa_offset 7
 785               		.cfi_offset 13, -6
 786 000a EF92      		push r14
 787               	.LCFI10:
 788               		.cfi_def_cfa_offset 8
 789               		.cfi_offset 14, -7
 790 000c FF92      		push r15
 791               	.LCFI11:
 792               		.cfi_def_cfa_offset 9
 793               		.cfi_offset 15, -8
 794 000e 0F93      		push r16
 795               	.LCFI12:
 796               		.cfi_def_cfa_offset 10
 797               		.cfi_offset 16, -9
 798 0010 1F93      		push r17
 799               	.LCFI13:
 800               		.cfi_def_cfa_offset 11
 801               		.cfi_offset 17, -10
 802 0012 CF93      		push r28
 803               	.LCFI14:
 804               		.cfi_def_cfa_offset 12
 805               		.cfi_offset 28, -11
 806 0014 DF93      		push r29
 807               	.LCFI15:
 808               		.cfi_def_cfa_offset 13
 809               		.cfi_offset 29, -12
 810               	/* prologue: function */
 811               	/* frame size = 0 */
 812               	/* stack size = 11 */
 813               	.L__stack_usage = 11
 814 0016 7C01      		movw r14,r24
 815 0018 D62F      		mov r29,r22
 816 001a C72F      		mov r28,r23
 817               	.LVL69:
 126:./tmk_core/common/action.c **** #endif
 818               		.loc 1 126 0
 819 001c FC01      		movw r30,r24
 820 001e 0581      		ldd r16,Z+5
 821 0020 0295      		swap r16
 822 0022 0F70      		andi r16,lo8(15)
 823               	.LVL70:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 824               		.loc 1 136 0
 825 0024 1281      		ldd r17,Z+2
 826 0026 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 827               		.loc 1 138 0
 828 0028 0E94 0000 		call clear_weak_mods
 829               	.LVL71:
 830               	.L85:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 831               		.loc 1 143 0
 832 002c 0E94 0000 		call is_oneshot_layer_active
 833               	.LVL72:
 834 0030 8823      		tst r24
 835 0032 01F0      		breq .L174
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 836               		.loc 1 143 0 is_stmt 0 discriminator 1
 837 0034 1123      		tst r17
 838 0036 01F0      		breq .L174
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 839               		.loc 1 143 0 discriminator 2
 840 0038 80E2      		ldi r24,lo8(32)
 841 003a 8D0F      		add r24,r29
 842 003c 8830      		cpi r24,lo8(8)
 843 003e 00F0      		brlo .L174
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 844               		.loc 1 144 0 is_stmt 1
 845 0040 82E0      		ldi r24,lo8(2)
 846 0042 0E94 0000 		call clear_oneshot_layer_state
 847               	.LVL73:
 145:./tmk_core/common/action.c ****     }
 848               		.loc 1 145 0
 849 0046 0E94 0000 		call is_oneshot_layer_active
 850               	.LVL74:
 851 004a 91E0      		ldi r25,lo8(1)
 852 004c D82E      		mov r13,r24
 853 004e D926      		eor r13,r25
 854               	.LVL75:
 855 0050 00C0      		rjmp .L86
 856               	.LVL76:
 857               	.L174:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 858               		.loc 1 123 0
 859 0052 D12C      		mov r13,__zero_reg__
 860               	.LVL77:
 861               	.L86:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 862               		.loc 1 149 0
 863 0054 EC2F      		mov r30,r28
 864 0056 E295      		swap r30
 865 0058 EF70      		andi r30,lo8(15)
 866 005a 8E2F      		mov r24,r30
 867 005c 90E0      		ldi r25,0
 868 005e FC01      		movw r30,r24
 869 0060 E050      		subi r30,lo8(-(gs(.L89)))
 870 0062 F040      		sbci r31,hi8(-(gs(.L89)))
 871 0064 0C94 0000 		jmp __tablejump2__
 872               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 873               		.p2align	1
 874               	.L89:
 875 0000 0000      		.word gs(.L88)
 876 0002 0000      		.word gs(.L88)
 877 0004 0000      		.word gs(.L90)
 878 0006 0000      		.word gs(.L90)
 879 0008 0000      		.word gs(.L91)
 880 000a 0000      		.word gs(.L92)
 881 000c 0000      		.word gs(.L93)
 882 000e 0000      		.word gs(.L87)
 883 0010 0000      		.word gs(.L94)
 884 0012 0000      		.word gs(.L87)
 885 0014 0000      		.word gs(.L95)
 886 0016 0000      		.word gs(.L95)
 887 0018 0000      		.word gs(.L96)
 888 001a 0000      		.word gs(.L87)
 889 001c 0000      		.word gs(.L87)
 890 001e 0000      		.word gs(.L97)
 891               		.section	.text.process_action
 892               	.L88:
 893               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 894               		.loc 1 154 0
 895 0068 8C2F      		mov r24,r28
 896 006a 807F      		andi r24,lo8(-16)
 897 006c CF70      		andi r28,lo8(15)
 898               	.LVL78:
 899 006e 8823      		tst r24
 900 0070 01F0      		breq .L99
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 901               		.loc 1 154 0 is_stmt 0 discriminator 2
 902 0072 C295      		swap r28
 903 0074 C07F      		andi r28,lo8(-16)
 904               	.L99:
 905               	.LVL79:
 156:./tmk_core/common/action.c ****                     if (mods) {
 906               		.loc 1 156 0 is_stmt 1 discriminator 4
 907 0076 1123      		tst r17
 908 0078 01F0      		breq .L100
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 909               		.loc 1 157 0
 910 007a CC23      		tst r28
 911 007c 01F4      		brne .+2
 912 007e 00C0      		rjmp .L209
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 913               		.loc 1 158 0
 914 0080 80E2      		ldi r24,lo8(32)
 915 0082 8D0F      		add r24,r29
 916 0084 8830      		cpi r24,lo8(8)
 917 0086 00F0      		brlo .L102
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 918               		.loc 1 158 0 is_stmt 0 discriminator 1
 919 0088 D111      		cpse r29,__zero_reg__
 920 008a 00C0      		rjmp .L103
 921               	.L102:
 162:./tmk_core/common/action.c ****                         } else {
 922               		.loc 1 162 0 is_stmt 1
 923 008c 8C2F      		mov r24,r28
 924 008e 0E94 0000 		call add_mods
 925               	.LVL80:
 926 0092 00C0      		rjmp .L104
 927               	.L103:
 164:./tmk_core/common/action.c ****                         }
 928               		.loc 1 164 0
 929 0094 8C2F      		mov r24,r28
 930 0096 0E94 0000 		call add_weak_mods
 931               	.LVL81:
 932               	.L104:
 166:./tmk_core/common/action.c ****                     }
 933               		.loc 1 166 0
 934 009a 0E94 0000 		call send_keyboard_report
 935               	.LVL82:
 936 009e 00C0      		rjmp .L209
 937               	.L100:
 170:./tmk_core/common/action.c ****                     if (mods) {
 938               		.loc 1 170 0
 939 00a0 8D2F      		mov r24,r29
 940 00a2 0E94 0000 		call unregister_code
 941               	.LVL83:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 942               		.loc 1 171 0
 943 00a6 CC23      		tst r28
 944 00a8 01F4      		brne .+2
 945 00aa 00C0      		rjmp .L87
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 946               		.loc 1 172 0
 947 00ac 80E2      		ldi r24,lo8(32)
 948 00ae 8D0F      		add r24,r29
 949 00b0 8830      		cpi r24,lo8(8)
 950 00b2 00F0      		brlo .L106
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 951               		.loc 1 172 0 is_stmt 0 discriminator 1
 952 00b4 D111      		cpse r29,__zero_reg__
 953 00b6 00C0      		rjmp .L107
 954               	.L106:
 173:./tmk_core/common/action.c ****                         } else {
 955               		.loc 1 173 0 is_stmt 1
 956 00b8 8C2F      		mov r24,r28
 957 00ba 0E94 0000 		call del_mods
 958               	.LVL84:
 959 00be 00C0      		rjmp .L108
 960               	.L107:
 175:./tmk_core/common/action.c ****                         }
 961               		.loc 1 175 0
 962 00c0 8C2F      		mov r24,r28
 963 00c2 0E94 0000 		call del_weak_mods
 964               	.LVL85:
 965               	.L108:
 177:./tmk_core/common/action.c ****                     }
 966               		.loc 1 177 0
 967 00c6 0E94 0000 		call send_keyboard_report
 968               	.LVL86:
 969 00ca 00C0      		rjmp .L87
 970               	.LVL87:
 971               	.L90:
 972               	.LBE6:
 973               	.LBB7:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 974               		.loc 1 186 0
 975 00cc 8C2F      		mov r24,r28
 976 00ce 807F      		andi r24,lo8(-16)
 977 00d0 CF70      		andi r28,lo8(15)
 978               	.LVL88:
 979 00d2 8032      		cpi r24,lo8(32)
 980 00d4 01F0      		breq .L110
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 981               		.loc 1 186 0 is_stmt 0 discriminator 2
 982 00d6 C295      		swap r28
 983 00d8 C07F      		andi r28,lo8(-16)
 984               	.L110:
 985               	.LVL89:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 986               		.loc 1 188 0 is_stmt 1 discriminator 4
 987 00da DD23      		tst r29
 988 00dc 01F0      		breq .L112
 989 00de D130      		cpi r29,lo8(1)
 990 00e0 01F0      		breq .L113
 991 00e2 00C0      		rjmp .L215
 992               	.L112:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 993               		.loc 1 192 0
 994 00e4 1123      		tst r17
 995 00e6 01F0      		breq .L114
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 996               		.loc 1 193 0
 997 00e8 0023      		tst r16
 998 00ea 01F0      		breq .L210
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 999               		.loc 1 198 0
 1000 00ec 8C2F      		mov r24,r28
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1001               		.loc 1 196 0
 1002 00ee 0130      		cpi r16,lo8(1)
 1003 00f0 01F4      		brne .L206
 1004               	.LVL90:
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1005               		.loc 1 198 0
 1006 00f2 0E94 0000 		call set_oneshot_mods
 1007               	.LVL91:
 1008 00f6 00C0      		rjmp .L87
 1009               	.L114:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1010               		.loc 1 210 0
 1011 00f8 0023      		tst r16
 1012 00fa 01F0      		breq .L214
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1013               		.loc 1 213 0
 1014 00fc 0130      		cpi r16,lo8(1)
 1015 00fe 01F4      		brne .+2
 1016 0100 00C0      		rjmp .L87
 1017               	.L214:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1018               		.loc 1 225 0
 1019 0102 0E94 0000 		call clear_oneshot_mods
 1020               	.LVL92:
 1021 0106 00C0      		rjmp .L122
 1022               	.L113:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1023               		.loc 1 232 0
 1024 0108 1123      		tst r17
 1025 010a 01F0      		breq .L119
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1026               		.loc 1 233 0
 1027 010c 0230      		cpi r16,lo8(2)
 1028 010e 00F0      		brlo .+2
 1029 0110 00C0      		rjmp .L87
 1030               	.L210:
 234:./tmk_core/common/action.c ****                             }
 1031               		.loc 1 234 0
 1032 0112 8C2F      		mov r24,r28
 1033               	.LVL93:
 1034               	.L206:
 1035 0114 0E94 0000 		call register_mods
 1036               	.LVL94:
 1037 0118 00C0      		rjmp .L87
 1038               	.LVL95:
 1039               	.L119:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1040               		.loc 1 237 0
 1041 011a 0111      		cpse r16,__zero_reg__
 1042 011c 00C0      		rjmp .L87
 1043 011e 00C0      		rjmp .L122
 1044               	.L215:
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1045               		.loc 1 243 0
 1046 0120 1123      		tst r17
 1047 0122 01F0      		breq .L120
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1048               		.loc 1 244 0
 1049 0124 0023      		tst r16
 1050 0126 01F0      		breq .L210
 1051 0128 00C0      		rjmp .L209
 1052               	.L120:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1053               		.loc 1 262 0
 1054 012a 0111      		cpse r16,__zero_reg__
 1055 012c 00C0      		rjmp .L207
 1056               	.L122:
 267:./tmk_core/common/action.c ****                             }
 1057               		.loc 1 267 0
 1058 012e 8C2F      		mov r24,r28
 1059 0130 00C0      		rjmp .L208
 1060               	.LVL96:
 1061               	.L91:
 1062               	.LBE7:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1063               		.loc 1 278 0
 1064 0132 8C2F      		mov r24,r28
 1065 0134 8695      		lsr r24
 1066 0136 8695      		lsr r24
 1067 0138 8370      		andi r24,lo8(3)
 1068 013a 01F0      		breq .L123
 1069 013c 8130      		cpi r24,lo8(1)
 1070 013e 01F0      		breq .L124
 1071 0140 00C0      		rjmp .L87
 1072               	.L123:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1073               		.loc 1 280 0
 1074 0142 1123      		tst r17
 1075 0144 01F0      		breq .L125
 281:./tmk_core/common/action.c ****                     } else {
 1076               		.loc 1 281 0
 1077 0146 8D2F      		mov r24,r29
 1078 0148 9C2F      		mov r25,r28
 1079 014a 9370      		andi r25,lo8(3)
 1080 014c 00C0      		rjmp .L203
 1081               	.L125:
 283:./tmk_core/common/action.c ****                     }
 1082               		.loc 1 283 0
 1083 014e 80E0      		ldi r24,0
 1084 0150 90E0      		ldi r25,0
 1085               	.L203:
 1086 0152 0E94 0000 		call host_system_send
 1087               	.LVL97:
 1088 0156 00C0      		rjmp .L87
 1089               	.L124:
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1090               		.loc 1 287 0
 1091 0158 1123      		tst r17
 1092 015a 01F0      		breq .L126
 288:./tmk_core/common/action.c ****                     } else {
 1093               		.loc 1 288 0
 1094 015c 8D2F      		mov r24,r29
 1095 015e 9C2F      		mov r25,r28
 1096 0160 9370      		andi r25,lo8(3)
 1097 0162 00C0      		rjmp .L211
 1098               	.L126:
 290:./tmk_core/common/action.c ****                     }
 1099               		.loc 1 290 0
 1100 0164 80E0      		ldi r24,0
 1101 0166 90E0      		ldi r25,0
 1102               	.L211:
 1103 0168 0E94 0000 		call host_consumer_send
 1104               	.LVL98:
 1105 016c 00C0      		rjmp .L87
 1106               	.L92:
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1107               		.loc 1 300 0
 1108 016e 8D2F      		mov r24,r29
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1109               		.loc 1 299 0
 1110 0170 1123      		tst r17
 1111 0172 01F0      		breq .L127
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1112               		.loc 1 300 0
 1113 0174 0E94 0000 		call mousekey_on
 1114               	.LVL99:
 1115 0178 00C0      		rjmp .L204
 1116               	.L127:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1117               		.loc 1 303 0
 1118 017a 0E94 0000 		call mousekey_off
 1119               	.LVL100:
 1120               	.L204:
 304:./tmk_core/common/action.c ****             }
 1121               		.loc 1 304 0
 1122 017e 0E94 0000 		call mousekey_send
 1123               	.LVL101:
 1124 0182 00C0      		rjmp .L87
 1125               	.L94:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1126               		.loc 1 310 0
 1127 0184 8C2F      		mov r24,r28
 1128 0186 8370      		andi r24,lo8(3)
 1129 0188 01F0      		breq .+2
 1130 018a 00C0      		rjmp .L128
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1131               		.loc 1 312 0
 1132 018c 1111      		cpse r17,__zero_reg__
 1133 018e 00C0      		rjmp .L87
 1134               	.LVL102:
 1135               	.LBB8:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1136               		.loc 1 313 0
 1137 0190 2D2F      		mov r18,r29
 1138 0192 2295      		swap r18
 1139 0194 2695      		lsr r18
 1140 0196 2770      		andi r18,lo8(7)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1141               		.loc 1 314 0
 1142 0198 220F      		lsl r18
 1143 019a 220F      		lsl r18
 1144 019c 6D2F      		mov r22,r29
 1145 019e 6F70      		andi r22,lo8(15)
 1146 01a0 862F      		mov r24,r22
 1147 01a2 90E0      		ldi r25,0
 1148 01a4 A0E0      		ldi r26,0
 1149 01a6 B0E0      		ldi r27,0
 1150 01a8 4C01      		movw r8,r24
 1151 01aa 5D01      		movw r10,r26
 1152 01ac 022E      		mov r0,r18
 1153 01ae 00C0      		rjmp 2f
 1154               		1:
 1155 01b0 880C      		lsl r8
 1156 01b2 991C      		rol r9
 1157 01b4 AA1C      		rol r10
 1158 01b6 BB1C      		rol r11
 1159               		2:
 1160 01b8 0A94      		dec r0
 1161 01ba 02F4      		brpl 1b
 1162               	.LVL103:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1163               		.loc 1 315 0
 1164 01bc D4FF      		sbrs r29,4
 1165 01be 00C0      		rjmp .L175
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1166               		.loc 1 315 0 is_stmt 0 discriminator 1
 1167 01c0 8FE0      		ldi r24,lo8(15)
 1168 01c2 90E0      		ldi r25,0
 1169 01c4 A0E0      		ldi r26,0
 1170 01c6 B0E0      		ldi r27,0
 1171 01c8 00C0      		rjmp 2f
 1172               		1:
 1173 01ca 880F      		lsl r24
 1174 01cc 991F      		rol r25
 1175 01ce AA1F      		rol r26
 1176 01d0 BB1F      		rol r27
 1177               		2:
 1178 01d2 2A95      		dec r18
 1179 01d4 02F4      		brpl 1b
 1180 01d6 BC01      		movw r22,r24
 1181 01d8 CD01      		movw r24,r26
 1182 01da 6095      		com r22
 1183 01dc 7095      		com r23
 1184 01de 8095      		com r24
 1185 01e0 9095      		com r25
 1186 01e2 00C0      		rjmp .L129
 1187               	.L175:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1188               		.loc 1 315 0
 1189 01e4 60E0      		ldi r22,0
 1190 01e6 70E0      		ldi r23,0
 1191 01e8 CB01      		movw r24,r22
 1192               	.L129:
 1193               	.LVL104:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1194               		.loc 1 316 0 is_stmt 1 discriminator 4
 1195 01ea C695      		lsr r28
 1196 01ec C695      		lsr r28
 1197               	.LVL105:
 1198 01ee C370      		andi r28,lo8(3)
 1199 01f0 C230      		cpi r28,lo8(2)
 1200 01f2 01F0      		breq .L131
 1201 01f4 00F4      		brsh .L132
 1202 01f6 6829      		or r22,r8
 1203 01f8 7929      		or r23,r9
 1204 01fa 8A29      		or r24,r10
 1205 01fc 9B29      		or r25,r11
 1206               	.LVL106:
 1207 01fe C130      		cpi r28,lo8(1)
 1208 0200 01F0      		breq .L212
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1209               		.loc 1 317 0 discriminator 4
 1210 0202 0E94 0000 		call default_layer_and
 1211               	.LVL107:
 1212 0206 00C0      		rjmp .L87
 1213               	.LVL108:
 1214               	.L131:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1215               		.loc 1 319 0
 1216 0208 6829      		or r22,r8
 1217 020a 7929      		or r23,r9
 1218 020c 8A29      		or r24,r10
 1219 020e 9B29      		or r25,r11
 1220               	.LVL109:
 1221 0210 0E94 0000 		call default_layer_xor
 1222               	.LVL110:
 1223 0214 00C0      		rjmp .L87
 1224               	.LVL111:
 1225               	.L132:
 320:./tmk_core/common/action.c ****                     }
 1226               		.loc 1 320 0
 1227 0216 0E94 0000 		call default_layer_and
 1228               	.LVL112:
 1229 021a C501      		movw r24,r10
 1230 021c B401      		movw r22,r8
 1231               	.L212:
 1232 021e 0E94 0000 		call default_layer_or
 1233               	.LVL113:
 1234 0222 00C0      		rjmp .L87
 1235               	.LVL114:
 1236               	.L128:
 1237               	.LBE8:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1238               		.loc 1 325 0
 1239 0224 1123      		tst r17
 1240 0226 01F0      		breq .L134
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1241               		.loc 1 325 0 is_stmt 0 discriminator 1
 1242 0228 8C2F      		mov r24,r28
 1243 022a 8170      		andi r24,lo8(1)
 1244 022c 00C0      		rjmp .L135
 1245               	.L134:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1246               		.loc 1 325 0 discriminator 2
 1247 022e 8695      		lsr r24
 1248               	.L135:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1249               		.loc 1 325 0 discriminator 4
 1250 0230 8823      		tst r24
 1251 0232 01F4      		brne .+2
 1252 0234 00C0      		rjmp .L87
 1253               	.LVL115:
 1254               	.LBB9:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1255               		.loc 1 327 0 is_stmt 1
 1256 0236 2D2F      		mov r18,r29
 1257 0238 2295      		swap r18
 1258 023a 2695      		lsr r18
 1259 023c 2770      		andi r18,lo8(7)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1260               		.loc 1 328 0
 1261 023e 220F      		lsl r18
 1262 0240 220F      		lsl r18
 1263 0242 6D2F      		mov r22,r29
 1264 0244 6F70      		andi r22,lo8(15)
 1265 0246 862F      		mov r24,r22
 1266 0248 90E0      		ldi r25,0
 1267 024a A0E0      		ldi r26,0
 1268 024c B0E0      		ldi r27,0
 1269 024e 4C01      		movw r8,r24
 1270 0250 5D01      		movw r10,r26
 1271 0252 022E      		mov r0,r18
 1272 0254 00C0      		rjmp 2f
 1273               		1:
 1274 0256 880C      		lsl r8
 1275 0258 991C      		rol r9
 1276 025a AA1C      		rol r10
 1277 025c BB1C      		rol r11
 1278               		2:
 1279 025e 0A94      		dec r0
 1280 0260 02F4      		brpl 1b
 1281               	.LVL116:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1282               		.loc 1 329 0
 1283 0262 D4FF      		sbrs r29,4
 1284 0264 00C0      		rjmp .L176
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1285               		.loc 1 329 0 is_stmt 0 discriminator 1
 1286 0266 8FE0      		ldi r24,lo8(15)
 1287 0268 90E0      		ldi r25,0
 1288 026a A0E0      		ldi r26,0
 1289 026c B0E0      		ldi r27,0
 1290 026e 00C0      		rjmp 2f
 1291               		1:
 1292 0270 880F      		lsl r24
 1293 0272 991F      		rol r25
 1294 0274 AA1F      		rol r26
 1295 0276 BB1F      		rol r27
 1296               		2:
 1297 0278 2A95      		dec r18
 1298 027a 02F4      		brpl 1b
 1299 027c BC01      		movw r22,r24
 1300 027e CD01      		movw r24,r26
 1301 0280 6095      		com r22
 1302 0282 7095      		com r23
 1303 0284 8095      		com r24
 1304 0286 9095      		com r25
 1305 0288 00C0      		rjmp .L136
 1306               	.L176:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1307               		.loc 1 329 0
 1308 028a 60E0      		ldi r22,0
 1309 028c 70E0      		ldi r23,0
 1310 028e CB01      		movw r24,r22
 1311               	.L136:
 1312               	.LVL117:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1313               		.loc 1 330 0 is_stmt 1 discriminator 4
 1314 0290 C695      		lsr r28
 1315 0292 C695      		lsr r28
 1316               	.LVL118:
 1317 0294 C370      		andi r28,lo8(3)
 1318 0296 C230      		cpi r28,lo8(2)
 1319 0298 01F0      		breq .L138
 1320 029a 00F4      		brsh .L139
 1321 029c 6829      		or r22,r8
 1322 029e 7929      		or r23,r9
 1323 02a0 8A29      		or r24,r10
 1324 02a2 9B29      		or r25,r11
 1325               	.LVL119:
 1326 02a4 C130      		cpi r28,lo8(1)
 1327 02a6 01F0      		breq .L213
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1328               		.loc 1 331 0 discriminator 4
 1329 02a8 0E94 0000 		call layer_and
 1330               	.LVL120:
 1331 02ac 00C0      		rjmp .L87
 1332               	.LVL121:
 1333               	.L138:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1334               		.loc 1 333 0
 1335 02ae 6829      		or r22,r8
 1336 02b0 7929      		or r23,r9
 1337 02b2 8A29      		or r24,r10
 1338 02b4 9B29      		or r25,r11
 1339               	.LVL122:
 1340 02b6 0E94 0000 		call layer_xor
 1341               	.LVL123:
 1342 02ba 00C0      		rjmp .L87
 1343               	.LVL124:
 1344               	.L139:
 334:./tmk_core/common/action.c ****                     }
 1345               		.loc 1 334 0
 1346 02bc 0E94 0000 		call layer_and
 1347               	.LVL125:
 1348 02c0 C501      		movw r24,r10
 1349 02c2 B401      		movw r22,r8
 1350               	.L213:
 1351 02c4 0E94 0000 		call layer_or
 1352               	.LVL126:
 1353 02c8 00C0      		rjmp .L87
 1354               	.LVL127:
 1355               	.L95:
 1356               	.LBE9:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1357               		.loc 1 342 0
 1358 02ca 8D2F      		mov r24,r29
 1359 02cc 90E0      		ldi r25,0
 1360 02ce FC01      		movw r30,r24
 1361 02d0 E05E      		subi r30,-32
 1362 02d2 F109      		sbc r31,__zero_reg__
 1363 02d4 E531      		cpi r30,21
 1364 02d6 F105      		cpc r31,__zero_reg__
 1365 02d8 00F0      		brlo .+2
 1366 02da 00C0      		rjmp .L141
 1367 02dc E050      		subi r30,lo8(-(gs(.L143)))
 1368 02de F040      		sbci r31,hi8(-(gs(.L143)))
 1369 02e0 0C94 0000 		jmp __tablejump2__
 1370               		.section	.progmem.gcc_sw_table.process_action
 1371               		.p2align	1
 1372               	.L143:
 1373 0020 0000      		.word gs(.L142)
 1374 0022 0000      		.word gs(.L142)
 1375 0024 0000      		.word gs(.L142)
 1376 0026 0000      		.word gs(.L142)
 1377 0028 0000      		.word gs(.L142)
 1378 002a 0000      		.word gs(.L142)
 1379 002c 0000      		.word gs(.L142)
 1380 002e 0000      		.word gs(.L142)
 1381 0030 0000      		.word gs(.L142)
 1382 0032 0000      		.word gs(.L142)
 1383 0034 0000      		.word gs(.L142)
 1384 0036 0000      		.word gs(.L142)
 1385 0038 0000      		.word gs(.L142)
 1386 003a 0000      		.word gs(.L142)
 1387 003c 0000      		.word gs(.L142)
 1388 003e 0000      		.word gs(.L142)
 1389 0040 0000      		.word gs(.L144)
 1390 0042 0000      		.word gs(.L145)
 1391 0044 0000      		.word gs(.L146)
 1392 0046 0000      		.word gs(.L147)
 1393 0048 0000      		.word gs(.L148)
 1394               		.section	.text.process_action
 1395               	.L142:
 1396 02e4 DF70      		andi r29,lo8(15)
 1397               	.LVL128:
 1398 02e6 8C2F      		mov r24,r28
 1399 02e8 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1400               		.loc 1 345 0
 1401 02ea 1123      		tst r17
 1402 02ec 01F0      		breq .L149
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1403               		.loc 1 346 0
 1404 02ee 0E94 0000 		call layer_on
 1405               	.LVL129:
 347:./tmk_core/common/action.c ****                     } else {
 1406               		.loc 1 347 0
 1407 02f2 8D2F      		mov r24,r29
 1408 02f4 00C0      		rjmp .L206
 1409               	.L149:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1410               		.loc 1 349 0
 1411 02f6 0E94 0000 		call layer_off
 1412               	.LVL130:
 350:./tmk_core/common/action.c ****                     }
 1413               		.loc 1 350 0
 1414 02fa 8D2F      		mov r24,r29
 1415               	.LVL131:
 1416               	.L208:
 1417 02fc 0E94 0000 		call unregister_mods
 1418               	.LVL132:
 1419 0300 00C0      		rjmp .L87
 1420               	.L144:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1421               		.loc 1 355 0
 1422 0302 1123      		tst r17
 1423 0304 01F0      		breq .L150
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1424               		.loc 1 356 0
 1425 0306 0111      		cpse r16,__zero_reg__
 1426 0308 00C0      		rjmp .L87
 1427               	.L151:
 357:./tmk_core/common/action.c ****                         }
 1428               		.loc 1 357 0
 1429 030a 8C2F      		mov r24,r28
 1430 030c 8F71      		andi r24,lo8(31)
 1431 030e 0E94 0000 		call layer_invert
 1432               	.LVL133:
 1433 0312 00C0      		rjmp .L87
 1434               	.L150:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1435               		.loc 1 360 0
 1436 0314 0230      		cpi r16,lo8(2)
 1437 0316 00F0      		brlo .+2
 1438 0318 00C0      		rjmp .L87
 1439 031a 00C0      		rjmp .L151
 1440               	.L145:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1441               		.loc 1 366 0
 1442 031c 1123      		tst r17
 1443 031e 01F0      		breq .L152
 1444               	.L153:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1445               		.loc 1 366 0 is_stmt 0 discriminator 1
 1446 0320 8C2F      		mov r24,r28
 1447 0322 8F71      		andi r24,lo8(31)
 1448 0324 0E94 0000 		call layer_on
 1449               	.LVL134:
 1450 0328 00C0      		rjmp .L87
 1451               	.L146:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1452               		.loc 1 370 0 is_stmt 1
 1453 032a 1123      		tst r17
 1454 032c 01F0      		breq .L153
 1455               	.L152:
 367:./tmk_core/common/action.c ****                     break;
 1456               		.loc 1 367 0
 1457 032e 8C2F      		mov r24,r28
 1458 0330 8F71      		andi r24,lo8(31)
 1459 0332 0E94 0000 		call layer_off
 1460               	.LVL135:
 1461 0336 00C0      		rjmp .L87
 1462               	.L147:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1463               		.loc 1 374 0
 1464 0338 1123      		tst r17
 1465 033a 01F0      		breq .L154
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1466               		.loc 1 374 0 is_stmt 0 discriminator 1
 1467 033c 8C2F      		mov r24,r28
 1468 033e 8F71      		andi r24,lo8(31)
 1469 0340 0E94 0000 		call layer_move
 1470               	.LVL136:
 1471 0344 00C0      		rjmp .L87
 1472               	.L154:
 375:./tmk_core/common/action.c ****                     break;
 1473               		.loc 1 375 0 is_stmt 1
 1474 0346 0E94 0000 		call layer_clear
 1475               	.LVL137:
 1476 034a 00C0      		rjmp .L87
 1477               	.L148:
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1478               		.loc 1 403 0
 1479 034c 1123      		tst r17
 1480 034e 01F0      		breq .L155
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1481               		.loc 1 404 0
 1482 0350 CF71      		andi r28,lo8(31)
 1483               	.LVL138:
 1484 0352 8C2F      		mov r24,r28
 1485 0354 0E94 0000 		call layer_on
 1486               	.LVL139:
 405:./tmk_core/common/action.c ****                     } else {
 1487               		.loc 1 405 0
 1488 0358 63E0      		ldi r22,lo8(3)
 1489 035a 8C2F      		mov r24,r28
 1490 035c 0E94 0000 		call set_oneshot_layer
 1491               	.LVL140:
 1492 0360 00C0      		rjmp .L87
 1493               	.LVL141:
 1494               	.L155:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1495               		.loc 1 407 0
 1496 0362 81E0      		ldi r24,lo8(1)
 1497 0364 0E94 0000 		call clear_oneshot_layer_state
 1498               	.LVL142:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1499               		.loc 1 408 0
 1500 0368 0230      		cpi r16,lo8(2)
 1501 036a 00F4      		brsh .+2
 1502 036c 00C0      		rjmp .L87
 409:./tmk_core/common/action.c ****                         }
 1503               		.loc 1 409 0
 1504 036e 82E0      		ldi r24,lo8(2)
 1505 0370 0E94 0000 		call clear_oneshot_layer_state
 1506               	.LVL143:
 1507 0374 00C0      		rjmp .L87
 1508               	.L141:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1509               		.loc 1 417 0
 1510 0376 1123      		tst r17
 1511 0378 01F0      		breq .L156
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1512               		.loc 1 418 0
 1513 037a 0023      		tst r16
 1514 037c 01F0      		breq .L153
 1515               	.L209:
 420:./tmk_core/common/action.c ****                         } else {
 1516               		.loc 1 420 0
 1517 037e 8D2F      		mov r24,r29
 1518 0380 0E94 0000 		call register_code
 1519               	.LVL144:
 1520 0384 00C0      		rjmp .L87
 1521               	.L156:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1522               		.loc 1 426 0
 1523 0386 0023      		tst r16
 1524 0388 01F0      		breq .L152
 1525               	.L207:
 428:./tmk_core/common/action.c ****                         } else {
 1526               		.loc 1 428 0
 1527 038a 8D2F      		mov r24,r29
 1528 038c 0E94 0000 		call unregister_code
 1529               	.LVL145:
 1530 0390 00C0      		rjmp .L87
 1531               	.L96:
 442:./tmk_core/common/action.c ****             break;
 1532               		.loc 1 442 0
 1533 0392 4C2F      		mov r20,r28
 1534 0394 4F70      		andi r20,lo8(15)
 1535 0396 6D2F      		mov r22,r29
 1536 0398 C701      		movw r24,r14
 1537 039a 0E94 0000 		call action_get_macro
 1538               	.LVL146:
 1539 039e 0E94 0000 		call action_macro_play
 1540               	.LVL147:
 443:./tmk_core/common/action.c **** #endif
 1541               		.loc 1 443 0
 1542 03a2 00C0      		rjmp .L87
 1543               	.L93:
 472:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 1544               		.loc 1 472 0
 1545 03a4 D23F      		cpi r29,lo8(-14)
 1546 03a6 01F0      		breq .L167
 1547 03a8 00F4      		brsh .L159
 1548 03aa D03F      		cpi r29,lo8(-16)
 1549 03ac 01F0      		breq .L160
 1550 03ae D13F      		cpi r29,lo8(-15)
 1551 03b0 01F0      		breq .L161
 1552 03b2 00C0      		rjmp .L157
 1553               	.L159:
 1554 03b4 D43F      		cpi r29,lo8(-12)
 1555 03b6 01F0      		breq .L162
 1556 03b8 00F0      		brlo .L163
 1557 03ba D53F      		cpi r29,lo8(-11)
 1558 03bc 01F0      		breq .L164
 1559 03be 00C0      		rjmp .L157
 1560               	.L160:
 474:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 1561               		.loc 1 474 0
 1562 03c0 1123      		tst r17
 1563 03c2 01F0      		breq .L97
 1564               	.L166:
 475:./tmk_core/common/action.c ****                     }
 1565               		.loc 1 475 0
 1566 03c4 9091 0000 		lds r25,swap_hands
 1567 03c8 81E0      		ldi r24,lo8(1)
 1568 03ca 8927      		eor r24,r25
 1569 03cc 00C0      		rjmp .L202
 1570               	.L163:
 482:./tmk_core/common/action.c ****                     break;
 1571               		.loc 1 482 0
 1572 03ce 81E0      		ldi r24,lo8(1)
 1573 03d0 1827      		eor r17,r24
 1574               	.LVL148:
 1575 03d2 00C0      		rjmp .L167
 1576               	.LVL149:
 1577               	.L164:
 485:./tmk_core/common/action.c ****                         swap_hands = true;
 1578               		.loc 1 485 0
 1579 03d4 1111      		cpse r17,__zero_reg__
 1580 03d6 00C0      		rjmp .L97
 486:./tmk_core/common/action.c ****                     }
 1581               		.loc 1 486 0
 1582 03d8 81E0      		ldi r24,lo8(1)
 1583               	.L202:
 1584 03da 8093 0000 		sts swap_hands,r24
 1585 03de 00C0      		rjmp .L97
 1586               	.L162:
 490:./tmk_core/common/action.c ****                         swap_hands = false;
 1587               		.loc 1 490 0
 1588 03e0 1111      		cpse r17,__zero_reg__
 1589 03e2 00C0      		rjmp .L97
 491:./tmk_core/common/action.c ****                     }
 1590               		.loc 1 491 0
 1591 03e4 1092 0000 		sts swap_hands,__zero_reg__
 1592 03e8 00C0      		rjmp .L97
 1593               	.L161:
 497:./tmk_core/common/action.c ****                         if (!event.pressed) {
 1594               		.loc 1 497 0
 1595 03ea 0023      		tst r16
 1596 03ec 01F0      		breq .L167
 498:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 1597               		.loc 1 498 0
 1598 03ee 1111      		cpse r17,__zero_reg__
 1599 03f0 00C0      		rjmp .L97
 1600 03f2 00C0      		rjmp .L166
 1601               	.L157:
 506:./tmk_core/common/action.c ****                         if (event.pressed) {
 1602               		.loc 1 506 0
 1603 03f4 0023      		tst r16
 1604 03f6 01F0      		breq .L167
 508:./tmk_core/common/action.c ****                         } else {
 1605               		.loc 1 508 0
 1606 03f8 8D2F      		mov r24,r29
 507:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 1607               		.loc 1 507 0
 1608 03fa 1123      		tst r17
 1609 03fc 01F0      		breq .L168
 508:./tmk_core/common/action.c ****                         } else {
 1610               		.loc 1 508 0
 1611 03fe 0E94 0000 		call register_code
 1612               	.LVL150:
 1613 0402 00C0      		rjmp .L97
 1614               	.L168:
 510:./tmk_core/common/action.c ****                         }
 1615               		.loc 1 510 0
 1616 0404 0E94 0000 		call unregister_code
 1617               	.LVL151:
 1618 0408 00C0      		rjmp .L97
 1619               	.LVL152:
 1620               	.L167:
 513:./tmk_core/common/action.c ****                     }
 1621               		.loc 1 513 0
 1622 040a 1093 0000 		sts swap_hands,r17
 1623               	.L97:
 520:./tmk_core/common/action.c ****             break;
 1624               		.loc 1 520 0
 1625 040e 4C2F      		mov r20,r28
 1626 0410 4F70      		andi r20,lo8(15)
 1627 0412 6D2F      		mov r22,r29
 1628 0414 C701      		movw r24,r14
 1629 0416 0E94 0000 		call action_function
 1630               	.LVL153:
 1631               	.L87:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1632               		.loc 1 531 0
 1633 041a DD20      		tst r13
 1634 041c 01F0      		breq .L84
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1635               		.loc 1 531 0 is_stmt 0 discriminator 1
 1636 041e 0E94 0000 		call get_oneshot_layer_state
 1637               	.LVL154:
 1638 0422 80FD      		sbrc r24,0
 1639 0424 00C0      		rjmp .L84
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1640               		.loc 1 532 0 is_stmt 1
 1641 0426 F701      		movw r30,r14
 1642 0428 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1643               		.loc 1 533 0
 1644 042a 0E94 0000 		call get_oneshot_layer
 1645               	.LVL155:
 1646 042e 0E94 0000 		call layer_on
 1647               	.LVL156:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1648               		.loc 1 534 0
 1649 0432 C701      		movw r24,r14
 1650 0434 0E94 0000 		call process_record
 1651               	.LVL157:
 535:./tmk_core/common/action.c ****     }
 1652               		.loc 1 535 0
 1653 0438 0E94 0000 		call get_oneshot_layer
 1654               	.LVL158:
 1655               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1656               		.loc 1 538 0
 1657 043c DF91      		pop r29
 1658               	.LVL159:
 1659 043e CF91      		pop r28
 1660 0440 1F91      		pop r17
 1661 0442 0F91      		pop r16
 1662               	.LVL160:
 1663 0444 FF90      		pop r15
 1664 0446 EF90      		pop r14
 1665               	.LVL161:
 1666 0448 DF90      		pop r13
 1667               	.LVL162:
 1668 044a BF90      		pop r11
 1669 044c AF90      		pop r10
 1670 044e 9F90      		pop r9
 1671 0450 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 1672               		.loc 1 535 0
 1673 0452 0C94 0000 		jmp layer_off
 1674               	.LVL163:
 1675               	.L84:
 1676               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1677               		.loc 1 538 0
 1678 0456 DF91      		pop r29
 1679               	.LVL164:
 1680 0458 CF91      		pop r28
 1681 045a 1F91      		pop r17
 1682 045c 0F91      		pop r16
 1683               	.LVL165:
 1684 045e FF90      		pop r15
 1685 0460 EF90      		pop r14
 1686               	.LVL166:
 1687 0462 DF90      		pop r13
 1688               	.LVL167:
 1689 0464 BF90      		pop r11
 1690 0466 AF90      		pop r10
 1691 0468 9F90      		pop r9
 1692 046a 8F90      		pop r8
 1693 046c 0895      		ret
 1694               		.cfi_endproc
 1695               	.LFE108:
 1697               		.section	.text.process_record,"ax",@progbits
 1698               	.global	process_record
 1700               	process_record:
 1701               	.LFB107:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1702               		.loc 1 104 0
 1703               		.cfi_startproc
 1704               	.LVL168:
 1705 0000 0F93      		push r16
 1706               	.LCFI16:
 1707               		.cfi_def_cfa_offset 3
 1708               		.cfi_offset 16, -2
 1709 0002 1F93      		push r17
 1710               	.LCFI17:
 1711               		.cfi_def_cfa_offset 4
 1712               		.cfi_offset 17, -3
 1713 0004 CF93      		push r28
 1714               	.LCFI18:
 1715               		.cfi_def_cfa_offset 5
 1716               		.cfi_offset 28, -4
 1717 0006 DF93      		push r29
 1718               	.LCFI19:
 1719               		.cfi_def_cfa_offset 6
 1720               		.cfi_offset 29, -5
 1721               	/* prologue: function */
 1722               	/* frame size = 0 */
 1723               	/* stack size = 4 */
 1724               	.L__stack_usage = 4
 1725 0008 EC01      		movw r28,r24
 1726 000a 9881      		ld r25,Y
 1727 000c 8981      		ldd r24,Y+1
 1728               	.LVL169:
 1729               	.LBB12:
 1730               	.LBB13:
 1731               		.loc 2 49 0
 1732 000e 2B81      		ldd r18,Y+3
 1733 0010 3C81      		ldd r19,Y+4
 1734 0012 232B      		or r18,r19
 1735 0014 01F0      		breq .L221
 1736 0016 8F3F      		cpi r24,lo8(-1)
 1737 0018 01F4      		brne .L222
 1738 001a 81E0      		ldi r24,lo8(1)
 1739 001c 9F3F      		cpi r25,lo8(-1)
 1740 001e 01F4      		brne .L222
 1741 0020 00C0      		rjmp .L217
 1742               	.L221:
 1743 0022 81E0      		ldi r24,lo8(1)
 1744 0024 00C0      		rjmp .L217
 1745               	.L222:
 1746 0026 80E0      		ldi r24,0
 1747               	.L217:
 1748               	.LBE13:
 1749               	.LBE12:
 105:./tmk_core/common/action.c **** 
 1750               		.loc 1 105 0
 1751 0028 80FD      		sbrc r24,0
 1752 002a 00C0      		rjmp .L216
 107:./tmk_core/common/action.c ****         return;
 1753               		.loc 1 107 0
 1754 002c CE01      		movw r24,r28
 1755 002e 0E94 0000 		call process_record_quantum
 1756               	.LVL170:
 1757 0032 8823      		tst r24
 1758 0034 01F0      		breq .L216
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1759               		.loc 1 110 0
 1760 0036 6881      		ld r22,Y
 1761 0038 7981      		ldd r23,Y+1
 1762 003a 8A81      		ldd r24,Y+2
 1763 003c 0E94 0000 		call store_or_get_action
 1764               	.LVL171:
 1765 0040 8C01      		movw r16,r24
 1766               	.LVL172:
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1767               		.loc 1 113 0
 1768 0042 0E94 0000 		call layer_debug
 1769               	.LVL173:
 114:./tmk_core/common/action.c **** #endif
 1770               		.loc 1 114 0
 1771 0046 0E94 0000 		call default_layer_debug
 1772               	.LVL174:
 118:./tmk_core/common/action.c **** }
 1773               		.loc 1 118 0
 1774 004a B801      		movw r22,r16
 1775 004c CE01      		movw r24,r28
 1776 004e 0E94 0000 		call process_action
 1777               	.LVL175:
 1778               	.L216:
 1779               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1780               		.loc 1 119 0
 1781 0052 DF91      		pop r29
 1782 0054 CF91      		pop r28
 1783               	.LVL176:
 1784 0056 1F91      		pop r17
 1785 0058 0F91      		pop r16
 1786               	.LVL177:
 1787 005a 0895      		ret
 1788               		.cfi_endproc
 1789               	.LFE107:
 1791               		.section	.text.process_record_nocache,"ax",@progbits
 1792               	.global	process_record_nocache
 1794               	process_record_nocache:
 1795               	.LFB105:
  93:./tmk_core/common/action.c ****     process_record(record);
 1796               		.loc 1 93 0
 1797               		.cfi_startproc
 1798               	.LVL178:
 1799               	/* prologue: function */
 1800               	/* frame size = 0 */
 1801               	/* stack size = 0 */
 1802               	.L__stack_usage = 0
  94:./tmk_core/common/action.c **** }
 1803               		.loc 1 94 0
 1804 0000 0C94 0000 		jmp process_record
 1805               	.LVL179:
 1806               		.cfi_endproc
 1807               	.LFE105:
 1809               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1810               	.global	clear_keyboard_but_mods
 1812               	clear_keyboard_but_mods:
 1813               	.LFB114:
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1814               		.loc 1 699 0
 1815               		.cfi_startproc
 1816               	/* prologue: function */
 1817               	/* frame size = 0 */
 1818               	/* stack size = 0 */
 1819               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1820               		.loc 1 700 0
 1821 0000 0E94 0000 		call clear_weak_mods
 1822               	.LVL180:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1823               		.loc 1 701 0
 1824 0004 0E94 0000 		call clear_macro_mods
 1825               	.LVL181:
 702:./tmk_core/common/action.c ****     clear_keys();
 1826               		.loc 1 702 0
 1827 0008 0E94 0000 		call clear_keys
 1828               	.LVL182:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1829               		.loc 1 703 0
 1830 000c 0E94 0000 		call send_keyboard_report
 1831               	.LVL183:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1832               		.loc 1 705 0
 1833 0010 0E94 0000 		call mousekey_clear
 1834               	.LVL184:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1835               		.loc 1 706 0
 1836 0014 0E94 0000 		call mousekey_send
 1837               	.LVL185:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1838               		.loc 1 709 0
 1839 0018 80E0      		ldi r24,0
 1840 001a 90E0      		ldi r25,0
 1841 001c 0E94 0000 		call host_system_send
 1842               	.LVL186:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1843               		.loc 1 710 0
 1844 0020 80E0      		ldi r24,0
 1845 0022 90E0      		ldi r25,0
 1846 0024 0C94 0000 		jmp host_consumer_send
 1847               	.LVL187:
 1848               		.cfi_endproc
 1849               	.LFE114:
 1851               		.section	.text.clear_keyboard,"ax",@progbits
 1852               	.global	clear_keyboard
 1854               	clear_keyboard:
 1855               	.LFB113:
 693:./tmk_core/common/action.c ****     clear_mods();
 1856               		.loc 1 693 0
 1857               		.cfi_startproc
 1858               	/* prologue: function */
 1859               	/* frame size = 0 */
 1860               	/* stack size = 0 */
 1861               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1862               		.loc 1 694 0
 1863 0000 0E94 0000 		call clear_mods
 1864               	.LVL188:
 695:./tmk_core/common/action.c **** }
 1865               		.loc 1 695 0
 1866 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1867               	.LVL189:
 1868               		.cfi_endproc
 1869               	.LFE113:
 1871               		.section	.text.is_tap_key,"ax",@progbits
 1872               	.global	is_tap_key
 1874               	is_tap_key:
 1875               	.LFB115:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1876               		.loc 1 715 0
 1877               		.cfi_startproc
 1878               	.LVL190:
 1879               	/* prologue: function */
 1880               	/* frame size = 0 */
 1881               	/* stack size = 0 */
 1882               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1883               		.loc 1 716 0
 1884 0000 0E94 0000 		call layer_switch_get_action
 1885               	.LVL191:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1886               		.loc 1 718 0
 1887 0004 E92F      		mov r30,r25
 1888 0006 E295      		swap r30
 1889 0008 EF70      		andi r30,lo8(15)
 1890 000a 4E2F      		mov r20,r30
 1891 000c 50E0      		ldi r21,0
 1892 000e FA01      		movw r30,r20
 1893 0010 3297      		sbiw r30,2
 1894 0012 EE30      		cpi r30,14
 1895 0014 F105      		cpc r31,__zero_reg__
 1896 0016 00F4      		brsh .L241
 1897 0018 E050      		subi r30,lo8(-(gs(.L235)))
 1898 001a F040      		sbci r31,hi8(-(gs(.L235)))
 1899 001c 0C94 0000 		jmp __tablejump2__
 1900               		.section	.progmem.gcc_sw_table.is_tap_key,"a",@progbits
 1901               		.p2align	1
 1902               	.L235:
 1903 0000 0000      		.word gs(.L234)
 1904 0002 0000      		.word gs(.L234)
 1905 0004 0000      		.word gs(.L241)
 1906 0006 0000      		.word gs(.L241)
 1907 0008 0000      		.word gs(.L236)
 1908 000a 0000      		.word gs(.L241)
 1909 000c 0000      		.word gs(.L241)
 1910 000e 0000      		.word gs(.L241)
 1911 0010 0000      		.word gs(.L234)
 1912 0012 0000      		.word gs(.L234)
 1913 0014 0000      		.word gs(.L237)
 1914 0016 0000      		.word gs(.L241)
 1915 0018 0000      		.word gs(.L241)
 1916 001a 0000      		.word gs(.L237)
 1917               		.section	.text.is_tap_key
 1918               	.L234:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1919               		.loc 1 723 0
 1920 0020 803F      		cpi r24,lo8(-16)
 1921 0022 01F0      		breq .L243
 1922 0024 00F4      		brsh .L239
 1923 0026 803E      		cpi r24,lo8(-32)
 1924 0028 00F4      		brsh .L241
 1925 002a 00C0      		rjmp .L243
 1926               	.L239:
 1927 002c 843F      		cpi r24,lo8(-12)
 1928 002e 01F4      		brne .L241
 1929 0030 00C0      		rjmp .L243
 1930               	.L236:
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 1931               		.loc 1 731 0
 1932 0032 803E      		cpi r24,lo8(-32)
 1933 0034 00F0      		brlo .L243
 1934 0036 813F      		cpi r24,lo8(-15)
 1935 0038 01F4      		brne .L241
 1936 003a 00C0      		rjmp .L243
 1937               	.L237:
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1938               		.loc 1 739 0
 1939 003c 93FB      		bst r25,3
 1940 003e 8827      		clr r24
 1941 0040 80F9      		bld r24,0
 1942               	.LVL192:
 1943 0042 0895      		ret
 1944               	.LVL193:
 1945               	.L241:
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 1946               		.loc 1 742 0
 1947 0044 80E0      		ldi r24,0
 1948               	.LVL194:
 1949 0046 0895      		ret
 1950               	.LVL195:
 1951               	.L243:
 734:./tmk_core/common/action.c ****             }
 1952               		.loc 1 734 0
 1953 0048 81E0      		ldi r24,lo8(1)
 1954               	.LVL196:
 743:./tmk_core/common/action.c **** }
 1955               		.loc 1 743 0
 1956 004a 0895      		ret
 1957               		.cfi_endproc
 1958               	.LFE115:
 1960               		.section	.text.debug_event,"ax",@progbits
 1961               	.global	debug_event
 1963               	debug_event:
 1964               	.LFB116:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1965               		.loc 1 750 0
 1966               		.cfi_startproc
 1967 0000 CF93      		push r28
 1968               	.LCFI20:
 1969               		.cfi_def_cfa_offset 3
 1970               		.cfi_offset 28, -2
 1971 0002 DF93      		push r29
 1972               	.LCFI21:
 1973               		.cfi_def_cfa_offset 4
 1974               		.cfi_offset 29, -3
 1975 0004 00D0      		rcall .
 1976 0006 00D0      		rcall .
 1977 0008 1F92      		push __zero_reg__
 1978               	.LCFI22:
 1979               		.cfi_def_cfa_offset 9
 1980 000a CDB7      		in r28,__SP_L__
 1981 000c DEB7      		in r29,__SP_H__
 1982               	.LCFI23:
 1983               		.cfi_def_cfa_register 28
 1984               	/* prologue: function */
 1985               	/* frame size = 5 */
 1986               	/* stack size = 7 */
 1987               	.L__stack_usage = 7
 1988               	/* epilogue start */
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 752:./tmk_core/common/action.c **** }
 1989               		.loc 1 752 0
 1990 000e 0F90      		pop __tmp_reg__
 1991 0010 0F90      		pop __tmp_reg__
 1992 0012 0F90      		pop __tmp_reg__
 1993 0014 0F90      		pop __tmp_reg__
 1994 0016 0F90      		pop __tmp_reg__
 1995 0018 DF91      		pop r29
 1996 001a CF91      		pop r28
 1997 001c 0895      		ret
 1998               		.cfi_endproc
 1999               	.LFE116:
 2001               		.section	.text.debug_record,"ax",@progbits
 2002               	.global	debug_record
 2004               	debug_record:
 2005               	.LFB117:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 2006               		.loc 1 755 0
 2007               		.cfi_startproc
 2008 0000 CF93      		push r28
 2009               	.LCFI24:
 2010               		.cfi_def_cfa_offset 3
 2011               		.cfi_offset 28, -2
 2012 0002 DF93      		push r29
 2013               	.LCFI25:
 2014               		.cfi_def_cfa_offset 4
 2015               		.cfi_offset 29, -3
 2016 0004 00D0      		rcall .
 2017 0006 00D0      		rcall .
 2018 0008 00D0      		rcall .
 2019               	.LCFI26:
 2020               		.cfi_def_cfa_offset 10
 2021 000a CDB7      		in r28,__SP_L__
 2022 000c DEB7      		in r29,__SP_H__
 2023               	.LCFI27:
 2024               		.cfi_def_cfa_register 28
 2025               	/* prologue: function */
 2026               	/* frame size = 6 */
 2027               	/* stack size = 8 */
 2028               	.L__stack_usage = 8
 2029               	/* epilogue start */
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 2030               		.loc 1 760 0
 2031 000e 2696      		adiw r28,6
 2032 0010 0FB6      		in __tmp_reg__,__SREG__
 2033 0012 F894      		cli
 2034 0014 DEBF      		out __SP_H__,r29
 2035 0016 0FBE      		out __SREG__,__tmp_reg__
 2036 0018 CDBF      		out __SP_L__,r28
 2037 001a DF91      		pop r29
 2038 001c CF91      		pop r28
 2039 001e 0895      		ret
 2040               		.cfi_endproc
 2041               	.LFE117:
 2043               		.section	.text.debug_action,"ax",@progbits
 2044               	.global	debug_action
 2046               	debug_action:
 2047               	.LFB118:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 2048               		.loc 1 763 0
 2049               		.cfi_startproc
 2050               	.LVL197:
 2051               	/* prologue: function */
 2052               	/* frame size = 0 */
 2053               	/* stack size = 0 */
 2054               	.L__stack_usage = 0
 2055 0000 0895      		ret
 2056               		.cfi_endproc
 2057               	.LFE118:
 2059               		.section	.bss.swap_state.4944,"aw",@nobits
 2062               	swap_state.4944:
 2063 0000 0000 0000 		.zero	14
 2063      0000 0000 
 2063      0000 0000 
 2063      0000 
 2064               	.global	swap_hands
 2065               		.section	.bss.swap_hands,"aw",@nobits
 2068               	swap_hands:
 2069 0000 00        		.zero	1
 2070               		.text
 2071               	.Letext0:
 2072               		.file 3 "/usr/lib/avr/include/stdint.h"
 2073               		.file 4 "./tmk_core/common/keycode.h"
 2074               		.file 5 "./tmk_core/common/action_code.h"
 2075               		.file 6 "./tmk_core/common/action.h"
 2076               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2077               		.file 8 "./tmk_core/common/action_tapping.h"
 2078               		.file 9 "./tmk_core/common/host.h"
 2079               		.file 10 "./tmk_core/common/action_util.h"
 2080               		.file 11 "./tmk_core/common/command.h"
 2081               		.file 12 "./tmk_core/common/action_layer.h"
 2082               		.file 13 "./tmk_core/common/mousekey.h"
 2083               		.file 14 "./tmk_core/common/action_macro.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccoJAGaz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccoJAGaz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccoJAGaz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccoJAGaz.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccoJAGaz.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccoJAGaz.s:13     .text.process_hand_swap:0000000000000000 process_hand_swap
     /tmp/ccoJAGaz.s:2068   .bss.swap_hands:0000000000000000 swap_hands
     /tmp/ccoJAGaz.s:2062   .bss.swap_state.4944:0000000000000000 swap_state.4944
     /tmp/ccoJAGaz.s:115    .text.action_exec:0000000000000000 action_exec
     /tmp/ccoJAGaz.s:224    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccoJAGaz.s:243    .text.register_code:0000000000000000 register_code
     /tmp/ccoJAGaz.s:574    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccoJAGaz.s:709    .text.register_mods:0000000000000000 register_mods
     /tmp/ccoJAGaz.s:735    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccoJAGaz.s:761    .text.process_action:0000000000000000 process_action
     /tmp/ccoJAGaz.s:1700   .text.process_record:0000000000000000 process_record
     /tmp/ccoJAGaz.s:1794   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccoJAGaz.s:1812   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccoJAGaz.s:1854   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccoJAGaz.s:1874   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccoJAGaz.s:1963   .text.debug_event:0000000000000000 debug_event
     /tmp/ccoJAGaz.s:2004   .text.debug_record:0000000000000000 debug_record
     /tmp/ccoJAGaz.s:2046   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hand_swap_config
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
get_oneshot_layer_state
get_oneshot_layer
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_clear_bss
