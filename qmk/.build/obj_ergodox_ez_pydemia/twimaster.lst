   1               		.file	"twimaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_init,"ax",@progbits
  11               	.global	i2c_init
  13               	i2c_init:
  14               	.LFB0:
  15               		.file 1 "keyboards/ergodox/ez/twimaster.c"
   1:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
   2:keyboards/ergodox/ez/twimaster.c **** * Title:    I2C master library using hardware TWI interface
   3:keyboards/ergodox/ez/twimaster.c **** * Author:   Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4:keyboards/ergodox/ez/twimaster.c **** * File:     $Id: twimaster.c,v 1.3 2005/07/02 11:14:21 Peter Exp $
   5:keyboards/ergodox/ez/twimaster.c **** * Software: AVR-GCC 3.4.3 / avr-libc 1.2.3
   6:keyboards/ergodox/ez/twimaster.c **** * Target:   any AVR device with hardware TWI 
   7:keyboards/ergodox/ez/twimaster.c **** * Usage:    API compatible with I2C Software Library i2cmaster.h
   8:keyboards/ergodox/ez/twimaster.c **** **************************************************************************/
   9:keyboards/ergodox/ez/twimaster.c **** #include <inttypes.h>
  10:keyboards/ergodox/ez/twimaster.c **** #include <compat/twi.h>
  11:keyboards/ergodox/ez/twimaster.c **** 
  12:keyboards/ergodox/ez/twimaster.c **** #include <i2cmaster.h>
  13:keyboards/ergodox/ez/twimaster.c **** 
  14:keyboards/ergodox/ez/twimaster.c **** 
  15:keyboards/ergodox/ez/twimaster.c **** /* define CPU frequency in Mhz here if not defined in Makefile */
  16:keyboards/ergodox/ez/twimaster.c **** #ifndef F_CPU
  17:keyboards/ergodox/ez/twimaster.c **** #define F_CPU 16000000UL
  18:keyboards/ergodox/ez/twimaster.c **** #endif
  19:keyboards/ergodox/ez/twimaster.c **** 
  20:keyboards/ergodox/ez/twimaster.c **** /* I2C clock in Hz */
  21:keyboards/ergodox/ez/twimaster.c **** #define SCL_CLOCK  400000L
  22:keyboards/ergodox/ez/twimaster.c **** 
  23:keyboards/ergodox/ez/twimaster.c **** 
  24:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
  25:keyboards/ergodox/ez/twimaster.c ****  Initialization of the I2C bus interface. Need to be called only once
  26:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
  27:keyboards/ergodox/ez/twimaster.c **** void i2c_init(void)
  28:keyboards/ergodox/ez/twimaster.c **** {
  16               		.loc 1 28 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:keyboards/ergodox/ez/twimaster.c ****   /* initialize TWI clock
  30:keyboards/ergodox/ez/twimaster.c ****    * minimal values in Bit Rate Register (TWBR) and minimal Prescaler
  31:keyboards/ergodox/ez/twimaster.c ****    * bits in the TWI Status Register should give us maximal possible
  32:keyboards/ergodox/ez/twimaster.c ****    * I2C bus speed - about 444 kHz
  33:keyboards/ergodox/ez/twimaster.c ****    *
  34:keyboards/ergodox/ez/twimaster.c ****    * for more details, see 20.5.2 in ATmega16/32 secification
  35:keyboards/ergodox/ez/twimaster.c ****    */
  36:keyboards/ergodox/ez/twimaster.c ****   
  37:keyboards/ergodox/ez/twimaster.c ****   TWSR = 0;     /* no prescaler */
  22               		.loc 1 37 0
  23 0000 1092 B900 		sts 185,__zero_reg__
  38:keyboards/ergodox/ez/twimaster.c ****   TWBR = 10;    /* must be >= 10 for stable operation */
  24               		.loc 1 38 0
  25 0004 8AE0      		ldi r24,lo8(10)
  26 0006 8093 B800 		sts 184,r24
  27 000a 0895      		ret
  28               		.cfi_endproc
  29               	.LFE0:
  31               		.section	.text.i2c_start,"ax",@progbits
  32               	.global	i2c_start
  34               	i2c_start:
  35               	.LFB1:
  39:keyboards/ergodox/ez/twimaster.c **** 
  40:keyboards/ergodox/ez/twimaster.c **** }/* i2c_init */
  41:keyboards/ergodox/ez/twimaster.c **** 
  42:keyboards/ergodox/ez/twimaster.c **** 
  43:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************	
  44:keyboards/ergodox/ez/twimaster.c ****   Issues a start condition and sends address and transfer direction.
  45:keyboards/ergodox/ez/twimaster.c ****   return 0 = device accessible, 1= failed to access device
  46:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
  47:keyboards/ergodox/ez/twimaster.c **** unsigned char i2c_start(unsigned char address)
  48:keyboards/ergodox/ez/twimaster.c **** {
  36               		.loc 1 48 0
  37               		.cfi_startproc
  38               	.LVL0:
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  49:keyboards/ergodox/ez/twimaster.c ****     uint8_t   twst;
  50:keyboards/ergodox/ez/twimaster.c **** 
  51:keyboards/ergodox/ez/twimaster.c **** 	// send START condition
  52:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  43               		.loc 1 52 0
  44 0000 94EA      		ldi r25,lo8(-92)
  45 0002 9093 BC00 		sts 188,r25
  46               	.L3:
  53:keyboards/ergodox/ez/twimaster.c **** 
  54:keyboards/ergodox/ez/twimaster.c **** 	// wait until transmission completed
  55:keyboards/ergodox/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
  47               		.loc 1 55 0 discriminator 1
  48 0006 9091 BC00 		lds r25,188
  49 000a 97FF      		sbrs r25,7
  50 000c 00C0      		rjmp .L3
  56:keyboards/ergodox/ez/twimaster.c **** 
  57:keyboards/ergodox/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits.
  58:keyboards/ergodox/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
  51               		.loc 1 58 0
  52 000e 9091 B900 		lds r25,185
  53 0012 987F      		andi r25,lo8(-8)
  54               	.LVL1:
  59:keyboards/ergodox/ez/twimaster.c **** 	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  55               		.loc 1 59 0
  56 0014 9830      		cpi r25,lo8(8)
  57 0016 01F0      		breq .L4
  58               		.loc 1 59 0 is_stmt 0 discriminator 1
  59 0018 9031      		cpi r25,lo8(16)
  60 001a 01F0      		breq .L4
  61               	.LVL2:
  62               	.L7:
  63               		.loc 1 59 0
  64 001c 81E0      		ldi r24,lo8(1)
  65 001e 0895      		ret
  66               	.LVL3:
  67               	.L4:
  60:keyboards/ergodox/ez/twimaster.c **** 
  61:keyboards/ergodox/ez/twimaster.c **** 	// send device address
  62:keyboards/ergodox/ez/twimaster.c **** 	TWDR = address;
  68               		.loc 1 62 0 is_stmt 1
  69 0020 8093 BB00 		sts 187,r24
  63:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
  70               		.loc 1 63 0
  71 0024 84E8      		ldi r24,lo8(-124)
  72               	.LVL4:
  73 0026 8093 BC00 		sts 188,r24
  74               	.LVL5:
  75               	.L6:
  64:keyboards/ergodox/ez/twimaster.c **** 
  65:keyboards/ergodox/ez/twimaster.c **** 	// wail until transmission completed and ACK/NACK has been received
  66:keyboards/ergodox/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
  76               		.loc 1 66 0 discriminator 1
  77 002a 8091 BC00 		lds r24,188
  78 002e 87FF      		sbrs r24,7
  79 0030 00C0      		rjmp .L6
  67:keyboards/ergodox/ez/twimaster.c **** 
  68:keyboards/ergodox/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits.
  69:keyboards/ergodox/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
  80               		.loc 1 69 0
  81 0032 8091 B900 		lds r24,185
  82 0036 887F      		andi r24,lo8(-8)
  83               	.LVL6:
  70:keyboards/ergodox/ez/twimaster.c **** 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  84               		.loc 1 70 0
  85 0038 8831      		cpi r24,lo8(24)
  86 003a 01F0      		breq .L8
  87               		.loc 1 70 0 is_stmt 0 discriminator 1
  88 003c 8034      		cpi r24,lo8(64)
  89 003e 01F4      		brne .L7
  90               	.L8:
  71:keyboards/ergodox/ez/twimaster.c **** 
  72:keyboards/ergodox/ez/twimaster.c **** 	return 0;
  91               		.loc 1 72 0 is_stmt 1
  92 0040 80E0      		ldi r24,0
  93               	.LVL7:
  73:keyboards/ergodox/ez/twimaster.c **** 
  74:keyboards/ergodox/ez/twimaster.c **** }/* i2c_start */
  94               		.loc 1 74 0
  95 0042 0895      		ret
  96               		.cfi_endproc
  97               	.LFE1:
  99               		.section	.text.i2c_start_wait,"ax",@progbits
 100               	.global	i2c_start_wait
 102               	i2c_start_wait:
 103               	.LFB2:
  75:keyboards/ergodox/ez/twimaster.c **** 
  76:keyboards/ergodox/ez/twimaster.c **** 
  77:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
  78:keyboards/ergodox/ez/twimaster.c ****  Issues a start condition and sends address and transfer direction.
  79:keyboards/ergodox/ez/twimaster.c ****  If device is busy, use ack polling to wait until device is ready
  80:keyboards/ergodox/ez/twimaster.c ****  
  81:keyboards/ergodox/ez/twimaster.c ****  Input:   address and transfer direction of I2C device
  82:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
  83:keyboards/ergodox/ez/twimaster.c **** void i2c_start_wait(unsigned char address)
  84:keyboards/ergodox/ez/twimaster.c **** {
 104               		.loc 1 84 0
 105               		.cfi_startproc
 106               	.LVL8:
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 0 */
 110               	.L__stack_usage = 0
  85:keyboards/ergodox/ez/twimaster.c ****     uint8_t   twst;
  86:keyboards/ergodox/ez/twimaster.c **** 
  87:keyboards/ergodox/ez/twimaster.c **** 
  88:keyboards/ergodox/ez/twimaster.c ****     while ( 1 )
  89:keyboards/ergodox/ez/twimaster.c ****     {
  90:keyboards/ergodox/ez/twimaster.c **** 	    // send START condition
  91:keyboards/ergodox/ez/twimaster.c **** 	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 111               		.loc 1 91 0
 112 0000 24EA      		ldi r18,lo8(-92)
  92:keyboards/ergodox/ez/twimaster.c ****     
  93:keyboards/ergodox/ez/twimaster.c ****     	// wait until transmission completed
  94:keyboards/ergodox/ez/twimaster.c ****     	while(!(TWCR & (1<<TWINT)));
  95:keyboards/ergodox/ez/twimaster.c ****     
  96:keyboards/ergodox/ez/twimaster.c ****     	// check value of TWI Status Register. Mask prescaler bits.
  97:keyboards/ergodox/ez/twimaster.c ****     	twst = TW_STATUS & 0xF8;
  98:keyboards/ergodox/ez/twimaster.c ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
  99:keyboards/ergodox/ez/twimaster.c ****     
 100:keyboards/ergodox/ez/twimaster.c ****     	// send device address
 101:keyboards/ergodox/ez/twimaster.c ****     	TWDR = address;
 102:keyboards/ergodox/ez/twimaster.c ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 113               		.loc 1 102 0
 114 0002 34E8      		ldi r19,lo8(-124)
 103:keyboards/ergodox/ez/twimaster.c ****     
 104:keyboards/ergodox/ez/twimaster.c ****     	// wail until transmission completed
 105:keyboards/ergodox/ez/twimaster.c ****     	while(!(TWCR & (1<<TWINT)));
 106:keyboards/ergodox/ez/twimaster.c ****     
 107:keyboards/ergodox/ez/twimaster.c ****     	// check value of TWI Status Register. Mask prescaler bits.
 108:keyboards/ergodox/ez/twimaster.c ****     	twst = TW_STATUS & 0xF8;
 109:keyboards/ergodox/ez/twimaster.c ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 110:keyboards/ergodox/ez/twimaster.c ****     	{    	    
 111:keyboards/ergodox/ez/twimaster.c ****     	    /* device busy, send stop condition to terminate write operation */
 112:keyboards/ergodox/ez/twimaster.c **** 	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 115               		.loc 1 112 0
 116 0004 44E9      		ldi r20,lo8(-108)
 117               	.L19:
  91:keyboards/ergodox/ez/twimaster.c ****     
 118               		.loc 1 91 0
 119 0006 2093 BC00 		sts 188,r18
 120               	.L20:
  94:keyboards/ergodox/ez/twimaster.c ****     
 121               		.loc 1 94 0 discriminator 1
 122 000a 9091 BC00 		lds r25,188
 123 000e 97FF      		sbrs r25,7
 124 0010 00C0      		rjmp .L20
  97:keyboards/ergodox/ez/twimaster.c ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 125               		.loc 1 97 0
 126 0012 9091 B900 		lds r25,185
 127 0016 987F      		andi r25,lo8(-8)
 128               	.LVL9:
  98:keyboards/ergodox/ez/twimaster.c ****     
 129               		.loc 1 98 0
 130 0018 9830      		cpi r25,lo8(8)
 131 001a 01F0      		breq .L21
  98:keyboards/ergodox/ez/twimaster.c ****     
 132               		.loc 1 98 0 is_stmt 0 discriminator 1
 133 001c 9031      		cpi r25,lo8(16)
 134 001e 01F4      		brne .L19
 135               	.L21:
 101:keyboards/ergodox/ez/twimaster.c ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 136               		.loc 1 101 0 is_stmt 1
 137 0020 8093 BB00 		sts 187,r24
 102:keyboards/ergodox/ez/twimaster.c ****     
 138               		.loc 1 102 0
 139 0024 3093 BC00 		sts 188,r19
 140               	.LVL10:
 141               	.L23:
 105:keyboards/ergodox/ez/twimaster.c ****     
 142               		.loc 1 105 0 discriminator 1
 143 0028 9091 BC00 		lds r25,188
 144 002c 97FF      		sbrs r25,7
 145 002e 00C0      		rjmp .L23
 108:keyboards/ergodox/ez/twimaster.c ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 146               		.loc 1 108 0
 147 0030 9091 B900 		lds r25,185
 148 0034 987F      		andi r25,lo8(-8)
 149               	.LVL11:
 109:keyboards/ergodox/ez/twimaster.c ****     	{    	    
 150               		.loc 1 109 0
 151 0036 9032      		cpi r25,lo8(32)
 152 0038 01F0      		breq .L24
 109:keyboards/ergodox/ez/twimaster.c ****     	{    	    
 153               		.loc 1 109 0 is_stmt 0 discriminator 1
 154 003a 9835      		cpi r25,lo8(88)
 155 003c 01F4      		brne .L18
 156               	.L24:
 157               		.loc 1 112 0 is_stmt 1
 158 003e 4093 BC00 		sts 188,r20
 159               	.LVL12:
 160               	.L26:
 113:keyboards/ergodox/ez/twimaster.c **** 	        
 114:keyboards/ergodox/ez/twimaster.c **** 	        // wait until stop condition is executed and bus released
 115:keyboards/ergodox/ez/twimaster.c **** 	        while(TWCR & (1<<TWSTO));
 161               		.loc 1 115 0 discriminator 1
 162 0042 9091 BC00 		lds r25,188
 163 0046 94FD      		sbrc r25,4
 164 0048 00C0      		rjmp .L26
 165 004a 00C0      		rjmp .L19
 166               	.LVL13:
 167               	.L18:
 168 004c 0895      		ret
 169               		.cfi_endproc
 170               	.LFE2:
 172               		.section	.text.i2c_rep_start,"ax",@progbits
 173               	.global	i2c_rep_start
 175               	i2c_rep_start:
 176               	.LFB3:
 116:keyboards/ergodox/ez/twimaster.c **** 	        
 117:keyboards/ergodox/ez/twimaster.c ****     	    continue;
 118:keyboards/ergodox/ez/twimaster.c ****     	}
 119:keyboards/ergodox/ez/twimaster.c ****     	//if( twst != TW_MT_SLA_ACK) return 1;
 120:keyboards/ergodox/ez/twimaster.c ****     	break;
 121:keyboards/ergodox/ez/twimaster.c ****      }
 122:keyboards/ergodox/ez/twimaster.c **** 
 123:keyboards/ergodox/ez/twimaster.c **** }/* i2c_start_wait */
 124:keyboards/ergodox/ez/twimaster.c **** 
 125:keyboards/ergodox/ez/twimaster.c **** 
 126:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
 127:keyboards/ergodox/ez/twimaster.c ****  Issues a repeated start condition and sends address and transfer direction 
 128:keyboards/ergodox/ez/twimaster.c **** 
 129:keyboards/ergodox/ez/twimaster.c ****  Input:   address and transfer direction of I2C device
 130:keyboards/ergodox/ez/twimaster.c ****  
 131:keyboards/ergodox/ez/twimaster.c ****  Return:  0 device accessible
 132:keyboards/ergodox/ez/twimaster.c ****           1 failed to access device
 133:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
 134:keyboards/ergodox/ez/twimaster.c **** unsigned char i2c_rep_start(unsigned char address)
 135:keyboards/ergodox/ez/twimaster.c **** {
 177               		.loc 1 135 0
 178               		.cfi_startproc
 179               	.LVL14:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 136:keyboards/ergodox/ez/twimaster.c ****     return i2c_start( address );
 184               		.loc 1 136 0
 185 0000 0C94 0000 		jmp i2c_start
 186               	.LVL15:
 187               		.cfi_endproc
 188               	.LFE3:
 190               		.section	.text.i2c_stop,"ax",@progbits
 191               	.global	i2c_stop
 193               	i2c_stop:
 194               	.LFB4:
 137:keyboards/ergodox/ez/twimaster.c **** 
 138:keyboards/ergodox/ez/twimaster.c **** }/* i2c_rep_start */
 139:keyboards/ergodox/ez/twimaster.c **** 
 140:keyboards/ergodox/ez/twimaster.c **** 
 141:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
 142:keyboards/ergodox/ez/twimaster.c ****  Terminates the data transfer and releases the I2C bus
 143:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
 144:keyboards/ergodox/ez/twimaster.c **** void i2c_stop(void)
 145:keyboards/ergodox/ez/twimaster.c **** {
 195               		.loc 1 145 0
 196               		.cfi_startproc
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 146:keyboards/ergodox/ez/twimaster.c ****     /* send stop condition */
 147:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 201               		.loc 1 147 0
 202 0000 84E9      		ldi r24,lo8(-108)
 203 0002 8093 BC00 		sts 188,r24
 204               	.L38:
 148:keyboards/ergodox/ez/twimaster.c **** 	
 149:keyboards/ergodox/ez/twimaster.c **** 	// wait until stop condition is executed and bus released
 150:keyboards/ergodox/ez/twimaster.c **** 	while(TWCR & (1<<TWSTO));
 205               		.loc 1 150 0 discriminator 1
 206 0006 8091 BC00 		lds r24,188
 207 000a 84FD      		sbrc r24,4
 208 000c 00C0      		rjmp .L38
 209               	/* epilogue start */
 151:keyboards/ergodox/ez/twimaster.c **** 
 152:keyboards/ergodox/ez/twimaster.c **** }/* i2c_stop */
 210               		.loc 1 152 0
 211 000e 0895      		ret
 212               		.cfi_endproc
 213               	.LFE4:
 215               		.section	.text.i2c_write,"ax",@progbits
 216               	.global	i2c_write
 218               	i2c_write:
 219               	.LFB5:
 153:keyboards/ergodox/ez/twimaster.c **** 
 154:keyboards/ergodox/ez/twimaster.c **** 
 155:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
 156:keyboards/ergodox/ez/twimaster.c ****   Send one byte to I2C device
 157:keyboards/ergodox/ez/twimaster.c ****   
 158:keyboards/ergodox/ez/twimaster.c ****   Input:    byte to be transfered
 159:keyboards/ergodox/ez/twimaster.c ****   Return:   0 write successful 
 160:keyboards/ergodox/ez/twimaster.c ****             1 write failed
 161:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
 162:keyboards/ergodox/ez/twimaster.c **** unsigned char i2c_write( unsigned char data )
 163:keyboards/ergodox/ez/twimaster.c **** {	
 220               		.loc 1 163 0
 221               		.cfi_startproc
 222               	.LVL16:
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 0 */
 226               	.L__stack_usage = 0
 164:keyboards/ergodox/ez/twimaster.c ****     uint8_t   twst;
 165:keyboards/ergodox/ez/twimaster.c ****     
 166:keyboards/ergodox/ez/twimaster.c **** 	// send data to the previously addressed device
 167:keyboards/ergodox/ez/twimaster.c **** 	TWDR = data;
 227               		.loc 1 167 0
 228 0000 8093 BB00 		sts 187,r24
 168:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 229               		.loc 1 168 0
 230 0004 84E8      		ldi r24,lo8(-124)
 231               	.LVL17:
 232 0006 8093 BC00 		sts 188,r24
 233               	.LVL18:
 234               	.L41:
 169:keyboards/ergodox/ez/twimaster.c **** 
 170:keyboards/ergodox/ez/twimaster.c **** 	// wait until transmission completed
 171:keyboards/ergodox/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
 235               		.loc 1 171 0 discriminator 1
 236 000a 8091 BC00 		lds r24,188
 237 000e 87FF      		sbrs r24,7
 238 0010 00C0      		rjmp .L41
 172:keyboards/ergodox/ez/twimaster.c **** 
 173:keyboards/ergodox/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits
 174:keyboards/ergodox/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
 239               		.loc 1 174 0
 240 0012 9091 B900 		lds r25,185
 241               	.LVL19:
 242 0016 987F      		andi r25,lo8(-8)
 243               	.LVL20:
 244 0018 81E0      		ldi r24,lo8(1)
 245 001a 9832      		cpi r25,lo8(40)
 246 001c 01F4      		brne .L42
 247 001e 80E0      		ldi r24,0
 248               	.L42:
 175:keyboards/ergodox/ez/twimaster.c **** 	if( twst != TW_MT_DATA_ACK) return 1;
 176:keyboards/ergodox/ez/twimaster.c **** 	return 0;
 177:keyboards/ergodox/ez/twimaster.c **** 
 178:keyboards/ergodox/ez/twimaster.c **** }/* i2c_write */
 249               		.loc 1 178 0
 250 0020 0895      		ret
 251               		.cfi_endproc
 252               	.LFE5:
 254               		.section	.text.i2c_readAck,"ax",@progbits
 255               	.global	i2c_readAck
 257               	i2c_readAck:
 258               	.LFB6:
 179:keyboards/ergodox/ez/twimaster.c **** 
 180:keyboards/ergodox/ez/twimaster.c **** 
 181:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
 182:keyboards/ergodox/ez/twimaster.c ****  Read one byte from the I2C device, request more data from device 
 183:keyboards/ergodox/ez/twimaster.c ****  
 184:keyboards/ergodox/ez/twimaster.c ****  Return:  byte read from I2C device
 185:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
 186:keyboards/ergodox/ez/twimaster.c **** unsigned char i2c_readAck(void)
 187:keyboards/ergodox/ez/twimaster.c **** {
 259               		.loc 1 187 0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 188:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 265               		.loc 1 188 0
 266 0000 84EC      		ldi r24,lo8(-60)
 267 0002 8093 BC00 		sts 188,r24
 268               	.L45:
 189:keyboards/ergodox/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));    
 269               		.loc 1 189 0 discriminator 1
 270 0006 8091 BC00 		lds r24,188
 271 000a 87FF      		sbrs r24,7
 272 000c 00C0      		rjmp .L45
 190:keyboards/ergodox/ez/twimaster.c **** 
 191:keyboards/ergodox/ez/twimaster.c ****     return TWDR;
 273               		.loc 1 191 0
 274 000e 8091 BB00 		lds r24,187
 192:keyboards/ergodox/ez/twimaster.c **** 
 193:keyboards/ergodox/ez/twimaster.c **** }/* i2c_readAck */
 275               		.loc 1 193 0
 276 0012 0895      		ret
 277               		.cfi_endproc
 278               	.LFE6:
 280               		.section	.text.i2c_readNak,"ax",@progbits
 281               	.global	i2c_readNak
 283               	i2c_readNak:
 284               	.LFB7:
 194:keyboards/ergodox/ez/twimaster.c **** 
 195:keyboards/ergodox/ez/twimaster.c **** 
 196:keyboards/ergodox/ez/twimaster.c **** /*************************************************************************
 197:keyboards/ergodox/ez/twimaster.c ****  Read one byte from the I2C device, read is followed by a stop condition 
 198:keyboards/ergodox/ez/twimaster.c ****  
 199:keyboards/ergodox/ez/twimaster.c ****  Return:  byte read from I2C device
 200:keyboards/ergodox/ez/twimaster.c **** *************************************************************************/
 201:keyboards/ergodox/ez/twimaster.c **** unsigned char i2c_readNak(void)
 202:keyboards/ergodox/ez/twimaster.c **** {
 285               		.loc 1 202 0
 286               		.cfi_startproc
 287               	/* prologue: function */
 288               	/* frame size = 0 */
 289               	/* stack size = 0 */
 290               	.L__stack_usage = 0
 203:keyboards/ergodox/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 291               		.loc 1 203 0
 292 0000 84E8      		ldi r24,lo8(-124)
 293 0002 8093 BC00 		sts 188,r24
 294               	.L48:
 204:keyboards/ergodox/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
 295               		.loc 1 204 0 discriminator 1
 296 0006 8091 BC00 		lds r24,188
 297 000a 87FF      		sbrs r24,7
 298 000c 00C0      		rjmp .L48
 205:keyboards/ergodox/ez/twimaster.c **** 	
 206:keyboards/ergodox/ez/twimaster.c ****     return TWDR;
 299               		.loc 1 206 0
 300 000e 8091 BB00 		lds r24,187
 207:keyboards/ergodox/ez/twimaster.c **** 
 208:keyboards/ergodox/ez/twimaster.c **** }/* i2c_readNak */
 301               		.loc 1 208 0
 302 0012 0895      		ret
 303               		.cfi_endproc
 304               	.LFE7:
 306               		.text
 307               	.Letext0:
 308               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 twimaster.c
     /tmp/ccivFZZ7.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccivFZZ7.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccivFZZ7.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccivFZZ7.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccivFZZ7.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccivFZZ7.s:13     .text.i2c_init:0000000000000000 i2c_init
     /tmp/ccivFZZ7.s:34     .text.i2c_start:0000000000000000 i2c_start
     /tmp/ccivFZZ7.s:102    .text.i2c_start_wait:0000000000000000 i2c_start_wait
     /tmp/ccivFZZ7.s:175    .text.i2c_rep_start:0000000000000000 i2c_rep_start
     /tmp/ccivFZZ7.s:193    .text.i2c_stop:0000000000000000 i2c_stop
     /tmp/ccivFZZ7.s:218    .text.i2c_write:0000000000000000 i2c_write
     /tmp/ccivFZZ7.s:257    .text.i2c_readAck:0000000000000000 i2c_readAck
     /tmp/ccivFZZ7.s:283    .text.i2c_readNak:0000000000000000 i2c_readNak

NO UNDEFINED SYMBOLS
