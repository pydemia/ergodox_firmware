   1               		.file	"process_tap_dance.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_tap_dance_action_on_dance_finished,"ax",@progbits
  12               	process_tap_dance_action_on_dance_finished:
  13               	.LFB111:
  14               		.file 1 "quantum/process_keycode/process_tap_dance.c"
   1:quantum/process_keycode/process_tap_dance.c **** #include "quantum.h"
   2:quantum/process_keycode/process_tap_dance.c **** #include "action_tapping.h"
   3:quantum/process_keycode/process_tap_dance.c **** 
   4:quantum/process_keycode/process_tap_dance.c **** static uint16_t last_td;
   5:quantum/process_keycode/process_tap_dance.c **** static int8_t highest_td = -1;
   6:quantum/process_keycode/process_tap_dance.c **** 
   7:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_finished (qk_tap_dance_state_t *state, void *user_data) {
   8:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
   9:quantum/process_keycode/process_tap_dance.c **** 
  10:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  11:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc1);
  12:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  13:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
  14:quantum/process_keycode/process_tap_dance.c ****   }
  15:quantum/process_keycode/process_tap_dance.c **** }
  16:quantum/process_keycode/process_tap_dance.c **** 
  17:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_reset (qk_tap_dance_state_t *state, void *user_data) {
  18:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  19:quantum/process_keycode/process_tap_dance.c **** 
  20:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  21:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc1);
  22:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  23:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc2);
  24:quantum/process_keycode/process_tap_dance.c ****   }
  25:quantum/process_keycode/process_tap_dance.c **** }
  26:quantum/process_keycode/process_tap_dance.c **** 
  27:quantum/process_keycode/process_tap_dance.c **** static inline void _process_tap_dance_action_fn (qk_tap_dance_state_t *state,
  28:quantum/process_keycode/process_tap_dance.c ****                                                  void *user_data,
  29:quantum/process_keycode/process_tap_dance.c ****                                                  qk_tap_dance_user_fn_t fn)
  30:quantum/process_keycode/process_tap_dance.c **** {
  31:quantum/process_keycode/process_tap_dance.c ****   if (fn) {
  32:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
  33:quantum/process_keycode/process_tap_dance.c ****   }
  34:quantum/process_keycode/process_tap_dance.c **** }
  35:quantum/process_keycode/process_tap_dance.c **** 
  36:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_each_tap (qk_tap_dance_action_t *action)
  37:quantum/process_keycode/process_tap_dance.c **** {
  38:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_each_tap);
  39:quantum/process_keycode/process_tap_dance.c **** }
  40:quantum/process_keycode/process_tap_dance.c **** 
  41:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_dance_finished (qk_tap_dance_action_t *action)
  42:quantum/process_keycode/process_tap_dance.c **** {
  15               		.loc 1 42 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 DC01      		movw r26,r24
  43:quantum/process_keycode/process_tap_dance.c ****   if (action->state.finished)
  23               		.loc 1 43 0
  24 0002 1D96      		adiw r26,13
  25 0004 8C91      		ld r24,X
  26 0006 1D97      		sbiw r26,13
  27               	.LVL1:
  28 0008 8111      		cpse r24,__zero_reg__
  29 000a 00C0      		rjmp .L1
  30               	.LVL2:
  31               	.LBB6:
  32               	.LBB7:
  44:quantum/process_keycode/process_tap_dance.c ****     return;
  45:quantum/process_keycode/process_tap_dance.c ****   action->state.finished = true;
  33               		.loc 1 45 0
  34 000c 81E0      		ldi r24,lo8(1)
  35 000e 1D96      		adiw r26,13
  36 0010 8C93      		st X,r24
  37 0012 1D97      		sbiw r26,13
  46:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_dance_finished);
  38               		.loc 1 46 0
  39 0014 1296      		adiw r26,2
  40 0016 ED91      		ld r30,X+
  41 0018 FC91      		ld r31,X
  42 001a 1397      		sbiw r26,2+1
  43 001c CD01      		movw r24,r26
  44 001e 0696      		adiw r24,6
  45               	.LVL3:
  46               	.LBB8:
  47               	.LBB9:
  31:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
  48               		.loc 1 31 0
  49 0020 3097      		sbiw r30,0
  50 0022 01F0      		breq .L1
  32:quantum/process_keycode/process_tap_dance.c ****   }
  51               		.loc 1 32 0
  52 0024 1E96      		adiw r26,14
  53 0026 6D91      		ld r22,X+
  54 0028 7C91      		ld r23,X
  55 002a 1F97      		sbiw r26,14+1
  56 002c 0994      		ijmp
  57               	.LVL4:
  58               	.L1:
  59 002e 0895      		ret
  60               	.LBE9:
  61               	.LBE8:
  62               	.LBE7:
  63               	.LBE6:
  64               		.cfi_endproc
  65               	.LFE111:
  67               		.section	.text.qk_tap_dance_pair_finished,"ax",@progbits
  68               	.global	qk_tap_dance_pair_finished
  70               	qk_tap_dance_pair_finished:
  71               	.LFB107:
   7:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  72               		.loc 1 7 0
  73               		.cfi_startproc
  74               	.LVL5:
  75               	/* prologue: function */
  76               	/* frame size = 0 */
  77               	/* stack size = 0 */
  78               	.L__stack_usage = 0
  10:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc1);
  79               		.loc 1 10 0
  80 0000 FC01      		movw r30,r24
  81 0002 8081      		ld r24,Z
  82               	.LVL6:
  83 0004 8130      		cpi r24,lo8(1)
  84 0006 01F4      		brne .L10
  11:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  85               		.loc 1 11 0
  86 0008 FB01      		movw r30,r22
  87               	.LVL7:
  88 000a 8081      		ld r24,Z
  89 000c 9181      		ldd r25,Z+1
  90 000e 00C0      		rjmp .L12
  91               	.LVL8:
  92               	.L10:
  12:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
  93               		.loc 1 12 0
  94 0010 8230      		cpi r24,lo8(2)
  95 0012 01F4      		brne .L9
  13:quantum/process_keycode/process_tap_dance.c ****   }
  96               		.loc 1 13 0
  97 0014 FB01      		movw r30,r22
  98               	.LVL9:
  99 0016 8281      		ldd r24,Z+2
 100 0018 9381      		ldd r25,Z+3
 101               	.L12:
 102 001a 0C94 0000 		jmp register_code16
 103               	.LVL10:
 104               	.L9:
 105 001e 0895      		ret
 106               		.cfi_endproc
 107               	.LFE107:
 109               		.section	.text.qk_tap_dance_pair_reset,"ax",@progbits
 110               	.global	qk_tap_dance_pair_reset
 112               	qk_tap_dance_pair_reset:
 113               	.LFB108:
  17:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 114               		.loc 1 17 0
 115               		.cfi_startproc
 116               	.LVL11:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
  20:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc1);
 121               		.loc 1 20 0
 122 0000 FC01      		movw r30,r24
 123 0002 8081      		ld r24,Z
 124               	.LVL12:
 125 0004 8130      		cpi r24,lo8(1)
 126 0006 01F4      		brne .L14
  21:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
 127               		.loc 1 21 0
 128 0008 FB01      		movw r30,r22
 129               	.LVL13:
 130 000a 8081      		ld r24,Z
 131 000c 9181      		ldd r25,Z+1
 132 000e 00C0      		rjmp .L16
 133               	.LVL14:
 134               	.L14:
  22:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc2);
 135               		.loc 1 22 0
 136 0010 8230      		cpi r24,lo8(2)
 137 0012 01F4      		brne .L13
  23:quantum/process_keycode/process_tap_dance.c ****   }
 138               		.loc 1 23 0
 139 0014 FB01      		movw r30,r22
 140               	.LVL15:
 141 0016 8281      		ldd r24,Z+2
 142 0018 9381      		ldd r25,Z+3
 143               	.L16:
 144 001a 0C94 0000 		jmp unregister_code16
 145               	.LVL16:
 146               	.L13:
 147 001e 0895      		ret
 148               		.cfi_endproc
 149               	.LFE108:
 151               		.section	.text.reset_tap_dance,"ax",@progbits
 152               	.global	reset_tap_dance
 154               	reset_tap_dance:
 155               	.LFB115:
  47:quantum/process_keycode/process_tap_dance.c **** }
  48:quantum/process_keycode/process_tap_dance.c **** 
  49:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_reset (qk_tap_dance_action_t *action)
  50:quantum/process_keycode/process_tap_dance.c **** {
  51:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_reset);
  52:quantum/process_keycode/process_tap_dance.c **** }
  53:quantum/process_keycode/process_tap_dance.c **** 
  54:quantum/process_keycode/process_tap_dance.c **** bool process_tap_dance(uint16_t keycode, keyrecord_t *record) {
  55:quantum/process_keycode/process_tap_dance.c ****   uint16_t idx = keycode - QK_TAP_DANCE;
  56:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
  57:quantum/process_keycode/process_tap_dance.c **** 
  58:quantum/process_keycode/process_tap_dance.c ****   if (last_td && last_td != keycode) {
  59:quantum/process_keycode/process_tap_dance.c ****     (&tap_dance_actions[last_td - QK_TAP_DANCE])->state.interrupted = true;
  60:quantum/process_keycode/process_tap_dance.c ****   }
  61:quantum/process_keycode/process_tap_dance.c **** 
  62:quantum/process_keycode/process_tap_dance.c ****   switch(keycode) {
  63:quantum/process_keycode/process_tap_dance.c ****   case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
  64:quantum/process_keycode/process_tap_dance.c ****     if ((int16_t)idx > highest_td)
  65:quantum/process_keycode/process_tap_dance.c ****       highest_td = idx;
  66:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[idx];
  67:quantum/process_keycode/process_tap_dance.c **** 
  68:quantum/process_keycode/process_tap_dance.c ****     action->state.pressed = record->event.pressed;
  69:quantum/process_keycode/process_tap_dance.c ****     if (record->event.pressed) {
  70:quantum/process_keycode/process_tap_dance.c ****       action->state.keycode = keycode;
  71:quantum/process_keycode/process_tap_dance.c ****       action->state.count++;
  72:quantum/process_keycode/process_tap_dance.c ****       action->state.timer = timer_read();
  73:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_each_tap (action);
  74:quantum/process_keycode/process_tap_dance.c **** 
  75:quantum/process_keycode/process_tap_dance.c ****       if (last_td && last_td != keycode) {
  76:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *paction = &tap_dance_actions[last_td - QK_TAP_DANCE];
  77:quantum/process_keycode/process_tap_dance.c ****         paction->state.interrupted = true;
  78:quantum/process_keycode/process_tap_dance.c ****         process_tap_dance_action_on_dance_finished (paction);
  79:quantum/process_keycode/process_tap_dance.c ****         reset_tap_dance (&paction->state);
  80:quantum/process_keycode/process_tap_dance.c ****       }
  81:quantum/process_keycode/process_tap_dance.c **** 
  82:quantum/process_keycode/process_tap_dance.c ****       last_td = keycode;
  83:quantum/process_keycode/process_tap_dance.c ****     }
  84:quantum/process_keycode/process_tap_dance.c **** 
  85:quantum/process_keycode/process_tap_dance.c ****     break;
  86:quantum/process_keycode/process_tap_dance.c **** 
  87:quantum/process_keycode/process_tap_dance.c ****   default:
  88:quantum/process_keycode/process_tap_dance.c ****     if (!record->event.pressed)
  89:quantum/process_keycode/process_tap_dance.c ****       return true;
  90:quantum/process_keycode/process_tap_dance.c **** 
  91:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1)
  92:quantum/process_keycode/process_tap_dance.c ****       return true;
  93:quantum/process_keycode/process_tap_dance.c **** 
  94:quantum/process_keycode/process_tap_dance.c ****     for (int i = 0; i <= highest_td; i++) {
  95:quantum/process_keycode/process_tap_dance.c ****       action = &tap_dance_actions[i];
  96:quantum/process_keycode/process_tap_dance.c ****       if (action->state.count == 0)
  97:quantum/process_keycode/process_tap_dance.c ****         continue;
  98:quantum/process_keycode/process_tap_dance.c ****       action->state.interrupted = true;
  99:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 100:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 101:quantum/process_keycode/process_tap_dance.c ****     }
 102:quantum/process_keycode/process_tap_dance.c ****     break;
 103:quantum/process_keycode/process_tap_dance.c ****   }
 104:quantum/process_keycode/process_tap_dance.c **** 
 105:quantum/process_keycode/process_tap_dance.c ****   return true;
 106:quantum/process_keycode/process_tap_dance.c **** }
 107:quantum/process_keycode/process_tap_dance.c **** 
 108:quantum/process_keycode/process_tap_dance.c **** void matrix_scan_tap_dance () {
 109:quantum/process_keycode/process_tap_dance.c ****   if (highest_td == -1)
 110:quantum/process_keycode/process_tap_dance.c ****     return;
 111:quantum/process_keycode/process_tap_dance.c **** 
 112:quantum/process_keycode/process_tap_dance.c ****   for (int i = 0; i <= highest_td; i++) {
 113:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 114:quantum/process_keycode/process_tap_dance.c **** 
 115:quantum/process_keycode/process_tap_dance.c ****     if (action->state.count && timer_elapsed (action->state.timer) > TAPPING_TERM) {
 116:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 117:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 118:quantum/process_keycode/process_tap_dance.c ****     }
 119:quantum/process_keycode/process_tap_dance.c ****   }
 120:quantum/process_keycode/process_tap_dance.c **** }
 121:quantum/process_keycode/process_tap_dance.c **** 
 122:quantum/process_keycode/process_tap_dance.c **** void reset_tap_dance (qk_tap_dance_state_t *state) {
 156               		.loc 1 122 0
 157               		.cfi_startproc
 158               	.LVL17:
 159 0000 CF93      		push r28
 160               	.LCFI0:
 161               		.cfi_def_cfa_offset 3
 162               		.cfi_offset 28, -2
 163 0002 DF93      		push r29
 164               	.LCFI1:
 165               		.cfi_def_cfa_offset 4
 166               		.cfi_offset 29, -3
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 2 */
 170               	.L__stack_usage = 2
 123:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
 124:quantum/process_keycode/process_tap_dance.c **** 
 125:quantum/process_keycode/process_tap_dance.c ****   if (state->pressed)
 171               		.loc 1 125 0
 172 0004 FC01      		movw r30,r24
 173 0006 2681      		ldd r18,Z+6
 174 0008 2111      		cpse r18,__zero_reg__
 175 000a 00C0      		rjmp .L17
 176 000c EC01      		movw r28,r24
 126:quantum/process_keycode/process_tap_dance.c ****     return;
 127:quantum/process_keycode/process_tap_dance.c **** 
 128:quantum/process_keycode/process_tap_dance.c ****   action = &tap_dance_actions[state->keycode - QK_TAP_DANCE];
 177               		.loc 1 128 0
 178 000e 8181      		ldd r24,Z+1
 179 0010 9281      		ldd r25,Z+2
 180               	.LVL18:
 181 0012 9157      		subi r25,113
 182               	.LVL19:
 183               	.LBB14:
 184               	.LBB15:
  51:quantum/process_keycode/process_tap_dance.c **** }
 185               		.loc 1 51 0
 186 0014 24E0      		ldi r18,4
 187               		1:
 188 0016 880F      		lsl r24
 189 0018 991F      		rol r25
 190 001a 2A95      		dec r18
 191 001c 01F4      		brne 1b
 192               	.LVL20:
 193 001e DC01      		movw r26,r24
 194 0020 A050      		subi r26,lo8(-(tap_dance_actions))
 195 0022 B040      		sbci r27,hi8(-(tap_dance_actions))
 196               	.LVL21:
 197 0024 1496      		adiw r26,4
 198 0026 ED91      		ld r30,X+
 199 0028 FC91      		ld r31,X
 200 002a 1597      		sbiw r26,4+1
 201 002c 8050      		subi r24,lo8(-(tap_dance_actions+6))
 202 002e 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 203               	.LVL22:
 204               	.LBB16:
 205               	.LBB17:
  31:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
 206               		.loc 1 31 0
 207 0030 3097      		sbiw r30,0
 208 0032 01F0      		breq .L19
  32:quantum/process_keycode/process_tap_dance.c ****   }
 209               		.loc 1 32 0
 210 0034 1E96      		adiw r26,14
 211 0036 6D91      		ld r22,X+
 212 0038 7C91      		ld r23,X
 213 003a 1F97      		sbiw r26,14+1
 214 003c 0995      		icall
 215               	.LVL23:
 216               	.L19:
 217               	.LBE17:
 218               	.LBE16:
 219               	.LBE15:
 220               	.LBE14:
 129:quantum/process_keycode/process_tap_dance.c **** 
 130:quantum/process_keycode/process_tap_dance.c ****   process_tap_dance_action_on_reset (action);
 131:quantum/process_keycode/process_tap_dance.c **** 
 132:quantum/process_keycode/process_tap_dance.c ****   state->count = 0;
 221               		.loc 1 132 0
 222 003e 1882      		st Y,__zero_reg__
 133:quantum/process_keycode/process_tap_dance.c ****   state->interrupted = false;
 223               		.loc 1 133 0
 224 0040 1D82      		std Y+5,__zero_reg__
 134:quantum/process_keycode/process_tap_dance.c ****   state->finished = false;
 225               		.loc 1 134 0
 226 0042 1F82      		std Y+7,__zero_reg__
 135:quantum/process_keycode/process_tap_dance.c ****   last_td = 0;
 227               		.loc 1 135 0
 228 0044 1092 0000 		sts last_td+1,__zero_reg__
 229 0048 1092 0000 		sts last_td,__zero_reg__
 230               	.LVL24:
 231               	.L17:
 232               	/* epilogue start */
 136:quantum/process_keycode/process_tap_dance.c **** }
 233               		.loc 1 136 0
 234 004c DF91      		pop r29
 235 004e CF91      		pop r28
 236 0050 0895      		ret
 237               		.cfi_endproc
 238               	.LFE115:
 240               		.section	.text.process_tap_dance,"ax",@progbits
 241               	.global	process_tap_dance
 243               	process_tap_dance:
 244               	.LFB113:
  54:quantum/process_keycode/process_tap_dance.c ****   uint16_t idx = keycode - QK_TAP_DANCE;
 245               		.loc 1 54 0
 246               		.cfi_startproc
 247               	.LVL25:
 248 0000 EF92      		push r14
 249               	.LCFI2:
 250               		.cfi_def_cfa_offset 3
 251               		.cfi_offset 14, -2
 252 0002 FF92      		push r15
 253               	.LCFI3:
 254               		.cfi_def_cfa_offset 4
 255               		.cfi_offset 15, -3
 256 0004 0F93      		push r16
 257               	.LCFI4:
 258               		.cfi_def_cfa_offset 5
 259               		.cfi_offset 16, -4
 260 0006 1F93      		push r17
 261               	.LCFI5:
 262               		.cfi_def_cfa_offset 6
 263               		.cfi_offset 17, -5
 264 0008 CF93      		push r28
 265               	.LCFI6:
 266               		.cfi_def_cfa_offset 7
 267               		.cfi_offset 28, -6
 268 000a DF93      		push r29
 269               	.LCFI7:
 270               		.cfi_def_cfa_offset 8
 271               		.cfi_offset 29, -7
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 6 */
 275               	.L__stack_usage = 6
 276 000c 8C01      		movw r16,r24
 277               	.LVL26:
  58:quantum/process_keycode/process_tap_dance.c ****     (&tap_dance_actions[last_td - QK_TAP_DANCE])->state.interrupted = true;
 278               		.loc 1 58 0
 279 000e 8091 0000 		lds r24,last_td
 280 0012 9091 0000 		lds r25,last_td+1
 281               	.LVL27:
 282 0016 0097      		sbiw r24,0
 283 0018 01F0      		breq .L24
  58:quantum/process_keycode/process_tap_dance.c ****     (&tap_dance_actions[last_td - QK_TAP_DANCE])->state.interrupted = true;
 284               		.loc 1 58 0 is_stmt 0 discriminator 1
 285 001a 0817      		cp r16,r24
 286 001c 1907      		cpc r17,r25
 287 001e 01F0      		breq .L24
  59:quantum/process_keycode/process_tap_dance.c ****   }
 288               		.loc 1 59 0 is_stmt 1
 289 0020 24E0      		ldi r18,4
 290               		1:
 291 0022 880F      		lsl r24
 292 0024 991F      		rol r25
 293 0026 2A95      		dec r18
 294 0028 01F4      		brne 1b
 295 002a FC01      		movw r30,r24
 296 002c E050      		subi r30,lo8(-(tap_dance_actions-4096))
 297 002e F040      		sbci r31,hi8(-(tap_dance_actions-4096))
 298 0030 81E0      		ldi r24,lo8(1)
 299 0032 8387      		std Z+11,r24
 300               	.L24:
  62:quantum/process_keycode/process_tap_dance.c ****   case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 301               		.loc 1 62 0
 302 0034 C801      		movw r24,r16
 303 0036 9157      		subi r25,113
 304 0038 FB01      		movw r30,r22
 305 003a 4281      		ldd r20,Z+2
 306 003c 8F3F      		cpi r24,-1
 307 003e 9105      		cpc r25,__zero_reg__
 308 0040 01F0      		breq .+4
 309 0042 00F0      		brlo .+2
 310 0044 00C0      		rjmp .L25
  64:quantum/process_keycode/process_tap_dance.c ****       highest_td = idx;
 311               		.loc 1 64 0
 312 0046 2091 0000 		lds r18,highest_td
 313 004a 022E      		mov __tmp_reg__,r18
 314 004c 000C      		lsl r0
 315 004e 330B      		sbc r19,r19
 316 0050 2817      		cp r18,r24
 317 0052 3907      		cpc r19,r25
 318 0054 04F4      		brge .L27
  65:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[idx];
 319               		.loc 1 65 0
 320 0056 8093 0000 		sts highest_td,r24
 321               	.L27:
 322               	.LVL28:
  68:quantum/process_keycode/process_tap_dance.c ****     if (record->event.pressed) {
 323               		.loc 1 68 0
 324 005a 7C01      		movw r14,r24
 325 005c 94E0      		ldi r25,4
 326               		1:
 327 005e EE0C      		lsl r14
 328 0060 FF1C      		rol r15
 329 0062 9A95      		dec r25
 330 0064 01F4      		brne 1b
 331 0066 E701      		movw r28,r14
 332 0068 C050      		subi r28,lo8(-(tap_dance_actions))
 333 006a D040      		sbci r29,hi8(-(tap_dance_actions))
 334 006c 4C87      		std Y+12,r20
  69:quantum/process_keycode/process_tap_dance.c ****       action->state.keycode = keycode;
 335               		.loc 1 69 0
 336 006e FB01      		movw r30,r22
 337 0070 8281      		ldd r24,Z+2
 338 0072 8823      		tst r24
 339 0074 01F4      		brne .+2
 340 0076 00C0      		rjmp .L29
  70:quantum/process_keycode/process_tap_dance.c ****       action->state.count++;
 341               		.loc 1 70 0
 342 0078 1887      		std Y+8,r17
 343 007a 0F83      		std Y+7,r16
  71:quantum/process_keycode/process_tap_dance.c ****       action->state.timer = timer_read();
 344               		.loc 1 71 0
 345 007c 8E81      		ldd r24,Y+6
 346 007e 8F5F      		subi r24,lo8(-(1))
 347 0080 8E83      		std Y+6,r24
  72:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_each_tap (action);
 348               		.loc 1 72 0
 349 0082 0E94 0000 		call timer_read
 350               	.LVL29:
 351 0086 9A87      		std Y+10,r25
 352 0088 8987      		std Y+9,r24
 353               	.LVL30:
 354               	.LBB24:
 355               	.LBB25:
  38:quantum/process_keycode/process_tap_dance.c **** }
 356               		.loc 1 38 0
 357 008a E881      		ld r30,Y
 358 008c F981      		ldd r31,Y+1
 359 008e C701      		movw r24,r14
 360 0090 8050      		subi r24,lo8(-(tap_dance_actions+6))
 361 0092 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 362               	.LVL31:
 363               	.LBB26:
 364               	.LBB27:
  31:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
 365               		.loc 1 31 0
 366 0094 3097      		sbiw r30,0
 367 0096 01F0      		breq .L30
  32:quantum/process_keycode/process_tap_dance.c ****   }
 368               		.loc 1 32 0
 369 0098 6E85      		ldd r22,Y+14
 370 009a 7F85      		ldd r23,Y+15
 371 009c 0995      		icall
 372               	.LVL32:
 373               	.L30:
 374               	.LBE27:
 375               	.LBE26:
 376               	.LBE25:
 377               	.LBE24:
  75:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *paction = &tap_dance_actions[last_td - QK_TAP_DANCE];
 378               		.loc 1 75 0
 379 009e 8091 0000 		lds r24,last_td
 380 00a2 9091 0000 		lds r25,last_td+1
 381 00a6 0097      		sbiw r24,0
 382 00a8 01F0      		breq .L31
  75:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *paction = &tap_dance_actions[last_td - QK_TAP_DANCE];
 383               		.loc 1 75 0 is_stmt 0 discriminator 1
 384 00aa 0817      		cp r16,r24
 385 00ac 1907      		cpc r17,r25
 386 00ae 01F0      		breq .L31
 387               	.LBB28:
  76:quantum/process_keycode/process_tap_dance.c ****         paction->state.interrupted = true;
 388               		.loc 1 76 0 is_stmt 1
 389 00b0 9157      		subi r25,113
 390               	.LVL33:
  77:quantum/process_keycode/process_tap_dance.c ****         process_tap_dance_action_on_dance_finished (paction);
 391               		.loc 1 77 0
 392 00b2 EC01      		movw r28,r24
 393 00b4 84E0      		ldi r24,4
 394               		1:
 395 00b6 CC0F      		lsl r28
 396 00b8 DD1F      		rol r29
 397 00ba 8A95      		dec r24
 398 00bc 01F4      		brne 1b
 399               	.LVL34:
 400 00be CE01      		movw r24,r28
 401 00c0 8050      		subi r24,lo8(-(tap_dance_actions))
 402 00c2 9040      		sbci r25,hi8(-(tap_dance_actions))
 403               	.LVL35:
 404 00c4 21E0      		ldi r18,lo8(1)
 405 00c6 FC01      		movw r30,r24
 406 00c8 2387      		std Z+11,r18
  78:quantum/process_keycode/process_tap_dance.c ****         reset_tap_dance (&paction->state);
 407               		.loc 1 78 0
 408 00ca 0E94 0000 		call process_tap_dance_action_on_dance_finished
 409               	.LVL36:
  79:quantum/process_keycode/process_tap_dance.c ****       }
 410               		.loc 1 79 0
 411 00ce CE01      		movw r24,r28
 412 00d0 8050      		subi r24,lo8(-(tap_dance_actions+6))
 413 00d2 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 414 00d4 0E94 0000 		call reset_tap_dance
 415               	.LVL37:
 416               	.L31:
 417               	.LBE28:
  82:quantum/process_keycode/process_tap_dance.c ****     }
 418               		.loc 1 82 0
 419 00d8 1093 0000 		sts last_td+1,r17
 420 00dc 0093 0000 		sts last_td,r16
 421 00e0 00C0      		rjmp .L29
 422               	.LVL38:
 423               	.L25:
  88:quantum/process_keycode/process_tap_dance.c ****       return true;
 424               		.loc 1 88 0
 425 00e2 4423      		tst r20
 426 00e4 01F0      		breq .L29
  91:quantum/process_keycode/process_tap_dance.c ****       return true;
 427               		.loc 1 91 0
 428 00e6 8091 0000 		lds r24,highest_td
 429 00ea 8F3F      		cpi r24,lo8(-1)
 430 00ec 01F0      		breq .L29
 431 00ee C0E0      		ldi r28,lo8(tap_dance_actions)
 432 00f0 D0E0      		ldi r29,hi8(tap_dance_actions)
 433 00f2 00E0      		ldi r16,0
 434 00f4 10E0      		ldi r17,0
 435               	.LVL39:
 436               	.LBB29:
  98:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 437               		.loc 1 98 0
 438 00f6 FF24      		clr r15
 439 00f8 F394      		inc r15
 440               	.LVL40:
 441               	.L33:
  94:quantum/process_keycode/process_tap_dance.c ****       action = &tap_dance_actions[i];
 442               		.loc 1 94 0 discriminator 1
 443 00fa 8091 0000 		lds r24,highest_td
 444 00fe 082E      		mov __tmp_reg__,r24
 445 0100 000C      		lsl r0
 446 0102 990B      		sbc r25,r25
 447 0104 8017      		cp r24,r16
 448 0106 9107      		cpc r25,r17
 449 0108 04F0      		brlt .L29
 450               	.LVL41:
  96:quantum/process_keycode/process_tap_dance.c ****         continue;
 451               		.loc 1 96 0
 452 010a 8E81      		ldd r24,Y+6
 453 010c 8823      		tst r24
 454 010e 01F0      		breq .L34
  98:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 455               		.loc 1 98 0
 456 0110 FB86      		std Y+11,r15
  99:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 457               		.loc 1 99 0
 458 0112 CE01      		movw r24,r28
 459 0114 0E94 0000 		call process_tap_dance_action_on_dance_finished
 460               	.LVL42:
 100:quantum/process_keycode/process_tap_dance.c ****     }
 461               		.loc 1 100 0
 462 0118 CE01      		movw r24,r28
 463 011a 0696      		adiw r24,6
 464 011c 0E94 0000 		call reset_tap_dance
 465               	.LVL43:
 466               	.L34:
  94:quantum/process_keycode/process_tap_dance.c ****       action = &tap_dance_actions[i];
 467               		.loc 1 94 0 discriminator 2
 468 0120 0F5F      		subi r16,-1
 469 0122 1F4F      		sbci r17,-1
 470               	.LVL44:
 471 0124 6096      		adiw r28,16
 472 0126 00C0      		rjmp .L33
 473               	.LVL45:
 474               	.L29:
 475               	.LBE29:
 106:quantum/process_keycode/process_tap_dance.c **** 
 476               		.loc 1 106 0
 477 0128 81E0      		ldi r24,lo8(1)
 478               	/* epilogue start */
 479 012a DF91      		pop r29
 480 012c CF91      		pop r28
 481 012e 1F91      		pop r17
 482 0130 0F91      		pop r16
 483 0132 FF90      		pop r15
 484 0134 EF90      		pop r14
 485 0136 0895      		ret
 486               		.cfi_endproc
 487               	.LFE113:
 489               		.section	.text.matrix_scan_tap_dance,"ax",@progbits
 490               	.global	matrix_scan_tap_dance
 492               	matrix_scan_tap_dance:
 493               	.LFB114:
 108:quantum/process_keycode/process_tap_dance.c ****   if (highest_td == -1)
 494               		.loc 1 108 0
 495               		.cfi_startproc
 496 0000 0F93      		push r16
 497               	.LCFI8:
 498               		.cfi_def_cfa_offset 3
 499               		.cfi_offset 16, -2
 500 0002 1F93      		push r17
 501               	.LCFI9:
 502               		.cfi_def_cfa_offset 4
 503               		.cfi_offset 17, -3
 504 0004 CF93      		push r28
 505               	.LCFI10:
 506               		.cfi_def_cfa_offset 5
 507               		.cfi_offset 28, -4
 508 0006 DF93      		push r29
 509               	.LCFI11:
 510               		.cfi_def_cfa_offset 6
 511               		.cfi_offset 29, -5
 512               	/* prologue: function */
 513               	/* frame size = 0 */
 514               	/* stack size = 4 */
 515               	.L__stack_usage = 4
 109:quantum/process_keycode/process_tap_dance.c ****     return;
 516               		.loc 1 109 0
 517 0008 8091 0000 		lds r24,highest_td
 518 000c 8F3F      		cpi r24,lo8(-1)
 519 000e 01F0      		breq .L54
 520 0010 C0E0      		ldi r28,lo8(tap_dance_actions)
 521 0012 D0E0      		ldi r29,hi8(tap_dance_actions)
 522 0014 00E0      		ldi r16,0
 523 0016 10E0      		ldi r17,0
 524               	.L56:
 525               	.LVL46:
 526               	.LBB30:
 112:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 527               		.loc 1 112 0 discriminator 1
 528 0018 8091 0000 		lds r24,highest_td
 529 001c 082E      		mov __tmp_reg__,r24
 530 001e 000C      		lsl r0
 531 0020 990B      		sbc r25,r25
 532 0022 8017      		cp r24,r16
 533 0024 9107      		cpc r25,r17
 534 0026 04F0      		brlt .L54
 535               	.LVL47:
 536               	.LBB31:
 115:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 537               		.loc 1 115 0
 538 0028 8E81      		ldd r24,Y+6
 539 002a 8823      		tst r24
 540 002c 01F0      		breq .L58
 115:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 541               		.loc 1 115 0 is_stmt 0 discriminator 1
 542 002e 8985      		ldd r24,Y+9
 543 0030 9A85      		ldd r25,Y+10
 544 0032 0E94 0000 		call timer_elapsed
 545               	.LVL48:
 546 0036 8739      		cpi r24,-105
 547 0038 9105      		cpc r25,__zero_reg__
 548 003a 00F0      		brlo .L58
 116:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 549               		.loc 1 116 0 is_stmt 1
 550 003c CE01      		movw r24,r28
 551 003e 0E94 0000 		call process_tap_dance_action_on_dance_finished
 552               	.LVL49:
 117:quantum/process_keycode/process_tap_dance.c ****     }
 553               		.loc 1 117 0
 554 0042 CE01      		movw r24,r28
 555 0044 0696      		adiw r24,6
 556 0046 0E94 0000 		call reset_tap_dance
 557               	.LVL50:
 558               	.L58:
 559               	.LBE31:
 112:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 560               		.loc 1 112 0 discriminator 2
 561 004a 0F5F      		subi r16,-1
 562 004c 1F4F      		sbci r17,-1
 563               	.LVL51:
 564 004e 6096      		adiw r28,16
 565 0050 00C0      		rjmp .L56
 566               	.LVL52:
 567               	.L54:
 568               	/* epilogue start */
 569               	.LBE30:
 120:quantum/process_keycode/process_tap_dance.c **** 
 570               		.loc 1 120 0
 571 0052 DF91      		pop r29
 572 0054 CF91      		pop r28
 573 0056 1F91      		pop r17
 574 0058 0F91      		pop r16
 575 005a 0895      		ret
 576               		.cfi_endproc
 577               	.LFE114:
 579               		.section	.data.highest_td,"aw",@progbits
 582               	highest_td:
 583 0000 FF        		.byte	-1
 584               		.section	.bss.last_td,"aw",@nobits
 587               	last_td:
 588 0000 0000      		.zero	2
 589               		.text
 590               	.Letext0:
 591               		.file 2 "/usr/lib/avr/include/stdint.h"
 592               		.file 3 "./tmk_core/common/keyboard.h"
 593               		.file 4 "./tmk_core/common/action.h"
 594               		.file 5 "./quantum/process_keycode/process_tap_dance.h"
 595               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 596               		.file 7 "./quantum/quantum.h"
 597               		.file 8 "./tmk_core/common/timer.h"
 598               		.file 9 "./quantum/keymap.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_tap_dance.c
     /tmp/cceDrWhO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceDrWhO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceDrWhO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceDrWhO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceDrWhO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceDrWhO.s:12     .text.process_tap_dance_action_on_dance_finished:0000000000000000 process_tap_dance_action_on_dance_finished
     /tmp/cceDrWhO.s:70     .text.qk_tap_dance_pair_finished:0000000000000000 qk_tap_dance_pair_finished
     /tmp/cceDrWhO.s:112    .text.qk_tap_dance_pair_reset:0000000000000000 qk_tap_dance_pair_reset
     /tmp/cceDrWhO.s:154    .text.reset_tap_dance:0000000000000000 reset_tap_dance
     /tmp/cceDrWhO.s:587    .bss.last_td:0000000000000000 last_td
     /tmp/cceDrWhO.s:243    .text.process_tap_dance:0000000000000000 process_tap_dance
     /tmp/cceDrWhO.s:582    .data.highest_td:0000000000000000 highest_td
     /tmp/cceDrWhO.s:492    .text.matrix_scan_tap_dance:0000000000000000 matrix_scan_tap_dance

UNDEFINED SYMBOLS
register_code16
unregister_code16
tap_dance_actions
timer_read
timer_elapsed
__do_copy_data
__do_clear_bss
