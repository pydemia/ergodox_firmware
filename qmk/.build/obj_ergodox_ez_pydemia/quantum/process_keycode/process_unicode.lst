   1               		.file	"process_unicode.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.hex_to_keycode,"ax",@progbits
  11               		.weak	hex_to_keycode
  13               	hex_to_keycode:
  14               	.LFB107:
  15               		.file 1 "quantum/process_keycode/process_unicode.c"
   1:quantum/process_keycode/process_unicode.c **** #include "process_unicode.h"
   2:quantum/process_keycode/process_unicode.c **** 
   3:quantum/process_keycode/process_unicode.c **** static uint8_t input_mode;
   4:quantum/process_keycode/process_unicode.c **** 
   5:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
   6:quantum/process_keycode/process_unicode.c **** uint16_t hex_to_keycode(uint8_t hex)
   7:quantum/process_keycode/process_unicode.c **** {
  16               		.loc 1 7 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
   8:quantum/process_keycode/process_unicode.c ****   if (hex == 0x0) {
  23               		.loc 1 8 0
  24 0000 8823      		tst r24
  25 0002 01F0      		breq .L4
  26 0004 90E0      		ldi r25,0
   9:quantum/process_keycode/process_unicode.c ****     return KC_0;
  10:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  27               		.loc 1 10 0
  28 0006 8A30      		cpi r24,lo8(10)
  29 0008 00F4      		brsh .L3
  11:quantum/process_keycode/process_unicode.c ****     return KC_1 + (hex - 0x1);
  30               		.loc 1 11 0
  31 000a 4D96      		adiw r24,29
  32               	.LVL1:
  33 000c 0895      		ret
  34               	.LVL2:
  35               	.L3:
  12:quantum/process_keycode/process_unicode.c ****   } else {
  13:quantum/process_keycode/process_unicode.c ****     return KC_A + (hex - 0xA);
  36               		.loc 1 13 0
  37 000e 0697      		sbiw r24,6
  38               	.LVL3:
  39 0010 0895      		ret
  40               	.LVL4:
  41               	.L4:
   9:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  42               		.loc 1 9 0
  43 0012 87E2      		ldi r24,lo8(39)
  44 0014 90E0      		ldi r25,0
  45               	.LVL5:
  14:quantum/process_keycode/process_unicode.c ****   }
  15:quantum/process_keycode/process_unicode.c **** }
  46               		.loc 1 15 0
  47 0016 0895      		ret
  48               		.cfi_endproc
  49               	.LFE107:
  51               		.section	.text.set_unicode_input_mode,"ax",@progbits
  52               	.global	set_unicode_input_mode
  54               	set_unicode_input_mode:
  55               	.LFB108:
  16:quantum/process_keycode/process_unicode.c **** 
  17:quantum/process_keycode/process_unicode.c **** void set_unicode_input_mode(uint8_t os_target)
  18:quantum/process_keycode/process_unicode.c **** {
  56               		.loc 1 18 0
  57               		.cfi_startproc
  58               	.LVL6:
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  19:quantum/process_keycode/process_unicode.c ****   input_mode = os_target;
  63               		.loc 1 19 0
  64 0000 8093 0000 		sts input_mode,r24
  65 0004 0895      		ret
  66               		.cfi_endproc
  67               	.LFE108:
  69               		.section	.text.get_unicode_input_mode,"ax",@progbits
  70               	.global	get_unicode_input_mode
  72               	get_unicode_input_mode:
  73               	.LFB109:
  20:quantum/process_keycode/process_unicode.c **** }
  21:quantum/process_keycode/process_unicode.c **** 
  22:quantum/process_keycode/process_unicode.c **** uint8_t get_unicode_input_mode(void) {
  74               		.loc 1 22 0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  23:quantum/process_keycode/process_unicode.c ****   return input_mode;
  24:quantum/process_keycode/process_unicode.c **** }
  80               		.loc 1 24 0
  81 0000 8091 0000 		lds r24,input_mode
  82 0004 0895      		ret
  83               		.cfi_endproc
  84               	.LFE109:
  86               		.section	.text.unicode_input_start,"ax",@progbits
  87               		.weak	unicode_input_start
  89               	unicode_input_start:
  90               	.LFB110:
  25:quantum/process_keycode/process_unicode.c **** 
  26:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  27:quantum/process_keycode/process_unicode.c **** void unicode_input_start (void) {
  91               		.loc 1 27 0
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  28:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
  97               		.loc 1 28 0
  98 0000 8091 0000 		lds r24,input_mode
  99 0004 8130      		cpi r24,lo8(1)
 100 0006 01F0      		breq .L10
 101 0008 00F0      		brlo .L11
 102 000a 8230      		cpi r24,lo8(2)
 103 000c 01F4      		brne .L9
  29:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  30:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  31:quantum/process_keycode/process_unicode.c ****     break;
  32:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  33:quantum/process_keycode/process_unicode.c ****     register_code(KC_LCTL);
  34:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
  35:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
  36:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
  37:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
  38:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
  39:quantum/process_keycode/process_unicode.c ****     break;
  40:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  41:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
 104               		.loc 1 41 0
 105 000e 82EE      		ldi r24,lo8(-30)
 106 0010 0E94 0000 		call register_code
 107               	.LVL7:
  42:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
 108               		.loc 1 42 0
 109 0014 87E5      		ldi r24,lo8(87)
 110 0016 0E94 0000 		call register_code
 111               	.LVL8:
  43:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
 112               		.loc 1 43 0
 113 001a 87E5      		ldi r24,lo8(87)
 114 001c 00C0      		rjmp .L13
 115               	.L11:
  30:quantum/process_keycode/process_unicode.c ****     break;
 116               		.loc 1 30 0
 117 001e 82EE      		ldi r24,lo8(-30)
 118 0020 0E94 0000 		call register_code
 119               	.LVL9:
  31:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
 120               		.loc 1 31 0
 121 0024 00C0      		rjmp .L9
 122               	.L10:
  33:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
 123               		.loc 1 33 0
 124 0026 80EE      		ldi r24,lo8(-32)
 125 0028 0E94 0000 		call register_code
 126               	.LVL10:
  34:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 127               		.loc 1 34 0
 128 002c 81EE      		ldi r24,lo8(-31)
 129 002e 0E94 0000 		call register_code
 130               	.LVL11:
  35:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 131               		.loc 1 35 0
 132 0032 88E1      		ldi r24,lo8(24)
 133 0034 0E94 0000 		call register_code
 134               	.LVL12:
  36:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
 135               		.loc 1 36 0
 136 0038 88E1      		ldi r24,lo8(24)
 137 003a 0E94 0000 		call unregister_code
 138               	.LVL13:
  37:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
 139               		.loc 1 37 0
 140 003e 81EE      		ldi r24,lo8(-31)
 141 0040 0E94 0000 		call unregister_code
 142               	.LVL14:
  38:quantum/process_keycode/process_unicode.c ****     break;
 143               		.loc 1 38 0
 144 0044 80EE      		ldi r24,lo8(-32)
 145               	.L13:
 146               		.loc 1 43 0
 147 0046 0E94 0000 		call unregister_code
 148               	.LVL15:
 149               	.L9:
 150               	.LBB4:
 151               	.LBB5:
 152               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 153               		.loc 2 187 0
 154 004a 8FE3      		ldi r24,lo8(-25537)
 155 004c 9CE9      		ldi r25,hi8(-25537)
 156 004e 0197      	1:	sbiw r24,1
 157 0050 01F4      		brne 1b
 158 0052 00C0      		rjmp .
 159 0054 0000      		nop
 160               	.LVL16:
 161 0056 0895      		ret
 162               	.LBE5:
 163               	.LBE4:
 164               		.cfi_endproc
 165               	.LFE110:
 167               		.section	.text.unicode_input_finish,"ax",@progbits
 168               		.weak	unicode_input_finish
 170               	unicode_input_finish:
 171               	.LFB111:
  44:quantum/process_keycode/process_unicode.c ****     break;
  45:quantum/process_keycode/process_unicode.c ****   }
  46:quantum/process_keycode/process_unicode.c ****   wait_ms(UNICODE_TYPE_DELAY);
  47:quantum/process_keycode/process_unicode.c **** }
  48:quantum/process_keycode/process_unicode.c **** 
  49:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  50:quantum/process_keycode/process_unicode.c **** void unicode_input_finish (void) {
 172               		.loc 1 50 0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
  51:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 178               		.loc 1 51 0
 179 0000 8091 0000 		lds r24,input_mode
 180 0004 8130      		cpi r24,lo8(1)
 181 0006 01F0      		breq .L16
 182 0008 00F0      		brlo .L17
 183 000a 8230      		cpi r24,lo8(2)
 184 000c 01F4      		brne .L21
 185               	.L17:
  52:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  53:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  54:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LALT);
 186               		.loc 1 54 0
 187 000e 82EE      		ldi r24,lo8(-30)
 188 0010 00C0      		rjmp .L22
 189               	.L16:
  55:quantum/process_keycode/process_unicode.c ****     break;
  56:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  57:quantum/process_keycode/process_unicode.c ****     register_code(KC_SPC);
 190               		.loc 1 57 0
 191 0012 8CE2      		ldi r24,lo8(44)
 192 0014 0E94 0000 		call register_code
 193               	.LVL17:
  58:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_SPC);
 194               		.loc 1 58 0
 195 0018 8CE2      		ldi r24,lo8(44)
 196               	.L22:
 197 001a 0C94 0000 		jmp unregister_code
 198               	.LVL18:
 199               	.L21:
 200 001e 0895      		ret
 201               		.cfi_endproc
 202               	.LFE111:
 204               		.section	.text.register_hex,"ax",@progbits
 205               	.global	register_hex
 207               	register_hex:
 208               	.LFB112:
  59:quantum/process_keycode/process_unicode.c ****     break;
  60:quantum/process_keycode/process_unicode.c ****   }
  61:quantum/process_keycode/process_unicode.c **** }
  62:quantum/process_keycode/process_unicode.c **** 
  63:quantum/process_keycode/process_unicode.c **** void register_hex(uint16_t hex) {
 209               		.loc 1 63 0
 210               		.cfi_startproc
 211               	.LVL19:
 212 0000 EF92      		push r14
 213               	.LCFI0:
 214               		.cfi_def_cfa_offset 3
 215               		.cfi_offset 14, -2
 216 0002 FF92      		push r15
 217               	.LCFI1:
 218               		.cfi_def_cfa_offset 4
 219               		.cfi_offset 15, -3
 220 0004 1F93      		push r17
 221               	.LCFI2:
 222               		.cfi_def_cfa_offset 5
 223               		.cfi_offset 17, -4
 224 0006 CF93      		push r28
 225               	.LCFI3:
 226               		.cfi_def_cfa_offset 6
 227               		.cfi_offset 28, -5
 228 0008 DF93      		push r29
 229               	.LCFI4:
 230               		.cfi_def_cfa_offset 7
 231               		.cfi_offset 29, -6
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 5 */
 235               	.L__stack_usage = 5
 236 000a 7C01      		movw r14,r24
 237               	.LVL20:
 238               		.loc 1 63 0
 239 000c CCE0      		ldi r28,lo8(12)
 240 000e D0E0      		ldi r29,0
 241               	.LVL21:
 242               	.L24:
 243               	.LBB6:
 244               	.LBB7:
  64:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
  65:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 245               		.loc 1 65 0 discriminator 3
 246 0010 C701      		movw r24,r14
 247 0012 0C2E      		mov r0,r28
 248 0014 00C0      		rjmp 2f
 249               		1:
 250 0016 9695      		lsr r25
 251 0018 8795      		ror r24
 252               		2:
 253 001a 0A94      		dec r0
 254 001c 02F4      		brpl 1b
 255 001e 182F      		mov r17,r24
 256 0020 1F70      		andi r17,lo8(15)
 257               	.LVL22:
  66:quantum/process_keycode/process_unicode.c ****     register_code(hex_to_keycode(digit));
 258               		.loc 1 66 0 discriminator 3
 259 0022 812F      		mov r24,r17
 260 0024 0E94 0000 		call hex_to_keycode
 261               	.LVL23:
 262 0028 0E94 0000 		call register_code
 263               	.LVL24:
  67:quantum/process_keycode/process_unicode.c ****     unregister_code(hex_to_keycode(digit));
 264               		.loc 1 67 0 discriminator 3
 265 002c 812F      		mov r24,r17
 266 002e 0E94 0000 		call hex_to_keycode
 267               	.LVL25:
 268 0032 0E94 0000 		call unregister_code
 269               	.LVL26:
 270 0036 2497      		sbiw r28,4
 271               	.LBE7:
  64:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 272               		.loc 1 64 0 discriminator 3
 273 0038 CC3F      		cpi r28,-4
 274 003a 8FEF      		ldi r24,-1
 275 003c D807      		cpc r29,r24
 276 003e 01F4      		brne .L24
 277               	/* epilogue start */
 278               	.LBE6:
  68:quantum/process_keycode/process_unicode.c ****   }
  69:quantum/process_keycode/process_unicode.c **** }
 279               		.loc 1 69 0
 280 0040 DF91      		pop r29
 281 0042 CF91      		pop r28
 282 0044 1F91      		pop r17
 283               	.LVL27:
 284 0046 FF90      		pop r15
 285 0048 EF90      		pop r14
 286               	.LVL28:
 287 004a 0895      		ret
 288               		.cfi_endproc
 289               	.LFE112:
 291               		.section	.text.process_unicode,"ax",@progbits
 292               	.global	process_unicode
 294               	process_unicode:
 295               	.LFB113:
  70:quantum/process_keycode/process_unicode.c **** 
  71:quantum/process_keycode/process_unicode.c **** bool process_unicode(uint16_t keycode, keyrecord_t *record) {
 296               		.loc 1 71 0
 297               		.cfi_startproc
 298               	.LVL29:
 299 0000 CF93      		push r28
 300               	.LCFI5:
 301               		.cfi_def_cfa_offset 3
 302               		.cfi_offset 28, -2
 303 0002 DF93      		push r29
 304               	.LCFI6:
 305               		.cfi_def_cfa_offset 4
 306               		.cfi_offset 29, -3
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 2 */
 310               	.L__stack_usage = 2
  72:quantum/process_keycode/process_unicode.c ****   if (keycode > QK_UNICODE && record->event.pressed) {
 311               		.loc 1 72 0
 312 0004 8130      		cpi r24,1
 313 0006 20E8      		ldi r18,-128
 314 0008 9207      		cpc r25,r18
 315 000a 00F0      		brlo .L27
 316               		.loc 1 72 0 is_stmt 0 discriminator 1
 317 000c FB01      		movw r30,r22
 318 000e 2281      		ldd r18,Z+2
 319 0010 2223      		tst r18
 320 0012 01F0      		breq .L27
 321 0014 EC01      		movw r28,r24
 322               	.LVL30:
 323               	.LBB8:
  73:quantum/process_keycode/process_unicode.c ****     uint16_t unicode = keycode & 0x7FFF;
  74:quantum/process_keycode/process_unicode.c ****     unicode_input_start();
 324               		.loc 1 74 0 is_stmt 1
 325 0016 0E94 0000 		call unicode_input_start
 326               	.LVL31:
  75:quantum/process_keycode/process_unicode.c ****     register_hex(unicode);
 327               		.loc 1 75 0
 328 001a CE01      		movw r24,r28
 329 001c 9F77      		andi r25,127
 330               	.LVL32:
 331 001e 0E94 0000 		call register_hex
 332               	.LVL33:
  76:quantum/process_keycode/process_unicode.c ****     unicode_input_finish();
 333               		.loc 1 76 0
 334 0022 0E94 0000 		call unicode_input_finish
 335               	.LVL34:
 336               	.L27:
 337               	.LBE8:
  77:quantum/process_keycode/process_unicode.c ****   }
  78:quantum/process_keycode/process_unicode.c ****   return true;
  79:quantum/process_keycode/process_unicode.c **** }
 338               		.loc 1 79 0
 339 0026 81E0      		ldi r24,lo8(1)
 340               	/* epilogue start */
 341 0028 DF91      		pop r29
 342 002a CF91      		pop r28
 343 002c 0895      		ret
 344               		.cfi_endproc
 345               	.LFE113:
 347               		.section	.bss.input_mode,"aw",@nobits
 350               	input_mode:
 351 0000 00        		.zero	1
 352               		.text
 353               	.Letext0:
 354               		.file 3 "/usr/lib/avr/include/stdint.h"
 355               		.file 4 "./tmk_core/common/keyboard.h"
 356               		.file 5 "./tmk_core/common/action.h"
 357               		.file 6 "./tmk_core/common/keycode.h"
 358               		.file 7 "./quantum/keymap.h"
 359               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_unicode.c
     /tmp/ccae3mY3.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccae3mY3.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccae3mY3.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccae3mY3.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccae3mY3.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccae3mY3.s:13     .text.hex_to_keycode:0000000000000000 hex_to_keycode
     /tmp/ccae3mY3.s:54     .text.set_unicode_input_mode:0000000000000000 set_unicode_input_mode
     /tmp/ccae3mY3.s:350    .bss.input_mode:0000000000000000 input_mode
     /tmp/ccae3mY3.s:72     .text.get_unicode_input_mode:0000000000000000 get_unicode_input_mode
     /tmp/ccae3mY3.s:89     .text.unicode_input_start:0000000000000000 unicode_input_start
     /tmp/ccae3mY3.s:170    .text.unicode_input_finish:0000000000000000 unicode_input_finish
     /tmp/ccae3mY3.s:207    .text.register_hex:0000000000000000 register_hex
     /tmp/ccae3mY3.s:294    .text.process_unicode:0000000000000000 process_unicode

UNDEFINED SYMBOLS
register_code
unregister_code
__do_clear_bss
