   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB107:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 3 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
   4:quantum/quantum.c ****   switch (code) {
  38               		.loc 1 4 0
  39 0008 9C01      		movw r18,r24
  40 000a 3A95      		dec r19
  41 000c 2115      		cp r18,__zero_reg__
  42 000e 3F41      		sbci r19,31
  43 0010 00F4      		brsh .L1
  44 0012 8B01      		movw r16,r22
  45 0014 EC01      		movw r28,r24
   5:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
   6:quantum/quantum.c ****     break;
   7:quantum/quantum.c ****   default:
   8:quantum/quantum.c ****     return;
   9:quantum/quantum.c ****   }
  10:quantum/quantum.c **** 
  11:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 11 0
  47 0016 90FF      		sbrs r25,0
  48 0018 00C0      		rjmp .L4
  12:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 12 0
  50 001a 80EE      		ldi r24,lo8(-32)
  51               	.LVL1:
  52 001c FB01      		movw r30,r22
  53 001e 0995      		icall
  54               	.LVL2:
  55               	.L4:
  13:quantum/quantum.c ****   if (code & QK_LSFT)
  56               		.loc 1 13 0
  57 0020 D1FF      		sbrs r29,1
  58 0022 00C0      		rjmp .L5
  14:quantum/quantum.c ****     f(KC_LSFT);
  59               		.loc 1 14 0
  60 0024 81EE      		ldi r24,lo8(-31)
  61 0026 F801      		movw r30,r16
  62 0028 0995      		icall
  63               	.LVL3:
  64               	.L5:
  15:quantum/quantum.c ****   if (code & QK_LALT)
  65               		.loc 1 15 0
  66 002a D2FF      		sbrs r29,2
  67 002c 00C0      		rjmp .L6
  16:quantum/quantum.c ****     f(KC_LALT);
  68               		.loc 1 16 0
  69 002e 82EE      		ldi r24,lo8(-30)
  70 0030 F801      		movw r30,r16
  71 0032 0995      		icall
  72               	.LVL4:
  73               	.L6:
  17:quantum/quantum.c ****   if (code & QK_LGUI)
  74               		.loc 1 17 0
  75 0034 D3FF      		sbrs r29,3
  76 0036 00C0      		rjmp .L7
  18:quantum/quantum.c ****     f(KC_LGUI);
  77               		.loc 1 18 0
  78 0038 83EE      		ldi r24,lo8(-29)
  79 003a F801      		movw r30,r16
  80 003c 0995      		icall
  81               	.LVL5:
  82               	.L7:
  19:quantum/quantum.c **** 
  20:quantum/quantum.c ****   if (code & QK_RCTL)
  83               		.loc 1 20 0
  84 003e CE01      		movw r24,r28
  85 0040 8827      		clr r24
  86 0042 9171      		andi r25,17
  87 0044 892B      		or r24,r25
  88 0046 01F0      		breq .L8
  21:quantum/quantum.c ****     f(KC_RCTL);
  89               		.loc 1 21 0
  90 0048 84EE      		ldi r24,lo8(-28)
  91 004a F801      		movw r30,r16
  92 004c 0995      		icall
  93               	.LVL6:
  94               	.L8:
  22:quantum/quantum.c ****   if (code & QK_RSFT)
  95               		.loc 1 22 0
  96 004e CE01      		movw r24,r28
  97 0050 8827      		clr r24
  98 0052 9271      		andi r25,18
  99 0054 892B      		or r24,r25
 100 0056 01F0      		breq .L9
  23:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 23 0
 102 0058 85EE      		ldi r24,lo8(-27)
 103 005a F801      		movw r30,r16
 104 005c 0995      		icall
 105               	.LVL7:
 106               	.L9:
  24:quantum/quantum.c ****   if (code & QK_RALT)
 107               		.loc 1 24 0
 108 005e CE01      		movw r24,r28
 109 0060 8827      		clr r24
 110 0062 9471      		andi r25,20
 111 0064 892B      		or r24,r25
 112 0066 01F0      		breq .L10
  25:quantum/quantum.c ****     f(KC_RALT);
 113               		.loc 1 25 0
 114 0068 86EE      		ldi r24,lo8(-26)
 115 006a F801      		movw r30,r16
 116 006c 0995      		icall
 117               	.LVL8:
 118               	.L10:
  26:quantum/quantum.c ****   if (code & QK_RGUI)
 119               		.loc 1 26 0
 120 006e CC27      		clr r28
 121 0070 D871      		andi r29,24
 122               	.LVL9:
 123 0072 CD2B      		or r28,r29
 124 0074 01F0      		breq .L1
  27:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 27 0
 126 0076 87EE      		ldi r24,lo8(-25)
 127 0078 F801      		movw r30,r16
 128               	/* epilogue start */
  28:quantum/quantum.c **** }
 129               		.loc 1 28 0
 130 007a DF91      		pop r29
 131 007c CF91      		pop r28
 132 007e 1F91      		pop r17
 133 0080 0F91      		pop r16
 134               	.LVL10:
  27:quantum/quantum.c ****     f(KC_RGUI);
 135               		.loc 1 27 0
 136 0082 0994      		ijmp
 137               	.LVL11:
 138               	.L1:
 139               	/* epilogue start */
 140               		.loc 1 28 0
 141 0084 DF91      		pop r29
 142 0086 CF91      		pop r28
 143 0088 1F91      		pop r17
 144 008a 0F91      		pop r16
 145 008c 0895      		ret
 146               		.cfi_endproc
 147               	.LFE107:
 149               		.section	.text.register_code16,"ax",@progbits
 150               	.global	register_code16
 152               	register_code16:
 153               	.LFB108:
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** void register_code16 (uint16_t code) {
 154               		.loc 1 30 0
 155               		.cfi_startproc
 156               	.LVL12:
 157 0000 CF93      		push r28
 158               	.LCFI4:
 159               		.cfi_def_cfa_offset 3
 160               		.cfi_offset 28, -2
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 1 */
 164               	.L__stack_usage = 1
 165 0002 C82F      		mov r28,r24
  31:quantum/quantum.c ****   do_code16 (code, register_code);
 166               		.loc 1 31 0
 167 0004 60E0      		ldi r22,lo8(gs(register_code))
 168 0006 70E0      		ldi r23,hi8(gs(register_code))
 169 0008 0E94 0000 		call do_code16
 170               	.LVL13:
  32:quantum/quantum.c ****   register_code (code);
 171               		.loc 1 32 0
 172 000c 8C2F      		mov r24,r28
 173               	/* epilogue start */
  33:quantum/quantum.c **** }
 174               		.loc 1 33 0
 175 000e CF91      		pop r28
  32:quantum/quantum.c ****   register_code (code);
 176               		.loc 1 32 0
 177 0010 0C94 0000 		jmp register_code
 178               	.LVL14:
 179               		.cfi_endproc
 180               	.LFE108:
 182               		.section	.text.unregister_code16,"ax",@progbits
 183               	.global	unregister_code16
 185               	unregister_code16:
 186               	.LFB109:
  34:quantum/quantum.c **** 
  35:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 187               		.loc 1 35 0
 188               		.cfi_startproc
 189               	.LVL15:
 190 0000 CF93      		push r28
 191               	.LCFI5:
 192               		.cfi_def_cfa_offset 3
 193               		.cfi_offset 28, -2
 194 0002 DF93      		push r29
 195               	.LCFI6:
 196               		.cfi_def_cfa_offset 4
 197               		.cfi_offset 29, -3
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 2 */
 201               	.L__stack_usage = 2
 202 0004 EC01      		movw r28,r24
  36:quantum/quantum.c ****   unregister_code (code);
 203               		.loc 1 36 0
 204 0006 0E94 0000 		call unregister_code
 205               	.LVL16:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 206               		.loc 1 37 0
 207 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 208 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 209 000e CE01      		movw r24,r28
 210               	/* epilogue start */
  38:quantum/quantum.c **** }
 211               		.loc 1 38 0
 212 0010 DF91      		pop r29
 213 0012 CF91      		pop r28
 214               	.LVL17:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 215               		.loc 1 37 0
 216 0014 0C94 0000 		jmp do_code16
 217               	.LVL18:
 218               		.cfi_endproc
 219               	.LFE109:
 221               		.section	.text.process_action_kb,"ax",@progbits
 222               		.weak	process_action_kb
 224               	process_action_kb:
 225               	.LFB110:
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** __attribute__ ((weak))
  41:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 226               		.loc 1 41 0
 227               		.cfi_startproc
 228               	.LVL19:
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 0 */
 232               	.L__stack_usage = 0
  42:quantum/quantum.c ****   return true;
  43:quantum/quantum.c **** }
 233               		.loc 1 43 0
 234 0000 81E0      		ldi r24,lo8(1)
 235               	.LVL20:
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE110:
 240               		.section	.text.process_record_user,"ax",@progbits
 241               		.weak	process_record_user
 243               	process_record_user:
 244               	.LFB112:
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** __attribute__ ((weak))
  46:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  47:quantum/quantum.c ****   return process_record_user(keycode, record);
  48:quantum/quantum.c **** }
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** __attribute__ ((weak))
  51:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 245               		.loc 1 51 0
 246               		.cfi_startproc
 247               	.LVL21:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  52:quantum/quantum.c ****   return true;
  53:quantum/quantum.c **** }
 252               		.loc 1 53 0
 253 0000 81E0      		ldi r24,lo8(1)
 254               	.LVL22:
 255 0002 0895      		ret
 256               		.cfi_endproc
 257               	.LFE112:
 259               		.section	.text.process_record_kb,"ax",@progbits
 260               		.weak	process_record_kb
 262               	process_record_kb:
 263               	.LFB111:
  46:quantum/quantum.c ****   return process_record_user(keycode, record);
 264               		.loc 1 46 0
 265               		.cfi_startproc
 266               	.LVL23:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
  47:quantum/quantum.c **** }
 271               		.loc 1 47 0
 272 0000 0C94 0000 		jmp process_record_user
 273               	.LVL24:
 274               		.cfi_endproc
 275               	.LFE111:
 277               		.section	.text.reset_keyboard,"ax",@progbits
 278               	.global	reset_keyboard
 280               	reset_keyboard:
 281               	.LFB113:
  54:quantum/quantum.c **** 
  55:quantum/quantum.c **** void reset_keyboard(void) {
 282               		.loc 1 55 0
 283               		.cfi_startproc
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
  56:quantum/quantum.c ****   clear_keyboard();
 288               		.loc 1 56 0
 289 0000 0E94 0000 		call clear_keyboard
 290               	.LVL25:
 291               	.LBB4:
 292               	.LBB5:
 293               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 294               		.loc 2 187 0
 295 0004 2FEF      		ldi r18,lo8(799999)
 296 0006 84E3      		ldi r24,hi8(799999)
 297 0008 9CE0      		ldi r25,hlo8(799999)
 298 000a 2150      	1:	subi r18,1
 299 000c 8040      		sbci r24,0
 300 000e 9040      		sbci r25,0
 301 0010 01F4      		brne 1b
 302 0012 00C0      		rjmp .
 303 0014 0000      		nop
 304               	.LVL26:
 305               	.LBE5:
 306               	.LBE4:
  57:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  58:quantum/quantum.c ****   stop_all_notes();
  59:quantum/quantum.c ****   shutdown_user();
  60:quantum/quantum.c **** #endif
  61:quantum/quantum.c ****   wait_ms(250);
  62:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  63:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  64:quantum/quantum.c **** #endif
  65:quantum/quantum.c ****   bootloader_jump();
 307               		.loc 1 65 0
 308 0016 0C94 0000 		jmp bootloader_jump
 309               	.LVL27:
 310               		.cfi_endproc
 311               	.LFE113:
 313               		.section	.text.process_record_quantum,"ax",@progbits
 314               	.global	process_record_quantum
 316               	process_record_quantum:
 317               	.LFB114:
  66:quantum/quantum.c **** }
  67:quantum/quantum.c **** 
  68:quantum/quantum.c **** // Shift / paren setup
  69:quantum/quantum.c **** 
  70:quantum/quantum.c **** #ifndef LSPO_KEY
  71:quantum/quantum.c ****   #define LSPO_KEY KC_9
  72:quantum/quantum.c **** #endif
  73:quantum/quantum.c **** #ifndef RSPC_KEY
  74:quantum/quantum.c ****   #define RSPC_KEY KC_0
  75:quantum/quantum.c **** #endif
  76:quantum/quantum.c **** 
  77:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  78:quantum/quantum.c **** 
  79:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 318               		.loc 1 79 0
 319               		.cfi_startproc
 320               	.LVL28:
 321 0000 0F93      		push r16
 322               	.LCFI7:
 323               		.cfi_def_cfa_offset 3
 324               		.cfi_offset 16, -2
 325 0002 1F93      		push r17
 326               	.LCFI8:
 327               		.cfi_def_cfa_offset 4
 328               		.cfi_offset 17, -3
 329 0004 CF93      		push r28
 330               	.LCFI9:
 331               		.cfi_def_cfa_offset 5
 332               		.cfi_offset 28, -4
 333 0006 DF93      		push r29
 334               	.LCFI10:
 335               		.cfi_def_cfa_offset 6
 336               		.cfi_offset 29, -5
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 4 */
 340               	.L__stack_usage = 4
 341 0008 8C01      		movw r16,r24
  80:quantum/quantum.c **** 
  81:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  82:quantum/quantum.c ****   keypos_t key = record->event.key;
 342               		.loc 1 82 0
 343 000a FC01      		movw r30,r24
 344 000c C081      		ld r28,Z
 345 000e D181      		ldd r29,Z+1
 346               	.LVL29:
  83:quantum/quantum.c ****   uint16_t keycode;
  84:quantum/quantum.c **** 
  85:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  86:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  87:quantum/quantum.c ****     if (!disable_action_cache) {
  88:quantum/quantum.c ****       uint8_t layer;
  89:quantum/quantum.c **** 
  90:quantum/quantum.c ****       if (record->event.pressed) {
  91:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
  92:quantum/quantum.c ****         update_source_layers_cache(key, layer);
  93:quantum/quantum.c ****       } else {
  94:quantum/quantum.c ****         layer = read_source_layers_cache(key);
  95:quantum/quantum.c ****       }
  96:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
  97:quantum/quantum.c ****     } else
  98:quantum/quantum.c ****   #endif
  99:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 347               		.loc 1 99 0
 348 0010 CE01      		movw r24,r28
 349               	.LVL30:
 350 0012 0E94 0000 		call layer_switch_get_layer
 351               	.LVL31:
 352 0016 BE01      		movw r22,r28
 353 0018 0E94 0000 		call keymap_key_to_keycode
 354               	.LVL32:
 355 001c EC01      		movw r28,r24
 356               	.LVL33:
 100:quantum/quantum.c **** 
 101:quantum/quantum.c ****     // This is how you use actions here
 102:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 103:quantum/quantum.c ****     //   action_t action;
 104:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 105:quantum/quantum.c ****     //   process_action(record, action);
 106:quantum/quantum.c ****     //   return false;
 107:quantum/quantum.c ****     // }
 108:quantum/quantum.c **** 
 109:quantum/quantum.c ****   if (!(
 110:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 357               		.loc 1 110 0
 358 001e B801      		movw r22,r16
 359 0020 0E94 0000 		call process_record_kb
 360               	.LVL34:
 111:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 112:quantum/quantum.c ****     process_midi(keycode, record) &&
 113:quantum/quantum.c ****   #endif
 114:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 115:quantum/quantum.c ****     process_music(keycode, record) &&
 116:quantum/quantum.c ****   #endif
 117:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 118:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 119:quantum/quantum.c ****   #endif
 120:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 121:quantum/quantum.c ****     process_leader(keycode, record) &&
 361               		.loc 1 121 0
 362 0024 8823      		tst r24
 363 0026 01F4      		brne .+2
 364 0028 00C0      		rjmp .L93
 118:quantum/quantum.c ****   #endif
 365               		.loc 1 118 0
 366 002a B801      		movw r22,r16
 367 002c CE01      		movw r24,r28
 368 002e 0E94 0000 		call process_tap_dance
 369               	.LVL35:
 110:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 370               		.loc 1 110 0
 371 0032 8823      		tst r24
 372 0034 01F4      		brne .+2
 373 0036 00C0      		rjmp .L93
 374               		.loc 1 121 0
 375 0038 B801      		movw r22,r16
 376 003a CE01      		movw r24,r28
 377 003c 0E94 0000 		call process_leader
 378               	.LVL36:
 118:quantum/quantum.c ****   #endif
 379               		.loc 1 118 0
 380 0040 8823      		tst r24
 381 0042 01F4      		brne .+2
 382 0044 00C0      		rjmp .L93
 122:quantum/quantum.c ****   #endif
 123:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 124:quantum/quantum.c ****     process_chording(keycode, record) &&
 125:quantum/quantum.c ****   #endif
 126:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 127:quantum/quantum.c ****     process_unicode(keycode, record) &&
 383               		.loc 1 127 0 discriminator 2
 384 0046 B801      		movw r22,r16
 385 0048 CE01      		movw r24,r28
 386 004a 0E94 0000 		call process_unicode
 387               	.LVL37:
 121:quantum/quantum.c ****   #endif
 388               		.loc 1 121 0 discriminator 2
 389 004e 8823      		tst r24
 390 0050 01F4      		brne .+2
 391 0052 00C0      		rjmp .L93
 128:quantum/quantum.c ****   #endif
 129:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 130:quantum/quantum.c ****     process_ucis(keycode, record) &&
 131:quantum/quantum.c ****   #endif
 132:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 133:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 134:quantum/quantum.c ****   #endif
 135:quantum/quantum.c ****       true)) {
 136:quantum/quantum.c ****     return false;
 137:quantum/quantum.c ****   }
 138:quantum/quantum.c **** 
 139:quantum/quantum.c ****   // Shift / paren setup
 140:quantum/quantum.c **** 
 141:quantum/quantum.c ****   switch(keycode) {
 392               		.loc 1 141 0
 393 0054 C531      		cpi r28,21
 394 0056 F0E7      		ldi r31,112
 395 0058 DF07      		cpc r29,r31
 396 005a 00F0      		brlo .+2
 397 005c 00C0      		rjmp .L80
 398 005e C230      		cpi r28,2
 399 0060 80E7      		ldi r24,112
 400 0062 D807      		cpc r29,r24
 401 0064 00F4      		brsh .+2
 402 0066 00C0      		rjmp .L105
 142:quantum/quantum.c ****     case RESET:
 143:quantum/quantum.c ****       if (record->event.pressed) {
 144:quantum/quantum.c ****         reset_keyboard();
 145:quantum/quantum.c ****       }
 146:quantum/quantum.c **** 	  return false;
 147:quantum/quantum.c ****       break;
 148:quantum/quantum.c ****     case DEBUG:
 149:quantum/quantum.c ****       if (record->event.pressed) {
 150:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 151:quantum/quantum.c ****           debug_enable = true;
 152:quantum/quantum.c ****       }
 153:quantum/quantum.c **** 	  return false;
 154:quantum/quantum.c ****       break;
 155:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 156:quantum/quantum.c **** 	case RGB_TOG:
 157:quantum/quantum.c **** 		if (record->event.pressed) {
 158:quantum/quantum.c **** 			rgblight_toggle();
 159:quantum/quantum.c ****       }
 160:quantum/quantum.c **** 	  return false;
 161:quantum/quantum.c ****       break;
 162:quantum/quantum.c **** 	case RGB_MOD:
 163:quantum/quantum.c **** 		if (record->event.pressed) {
 164:quantum/quantum.c **** 			rgblight_step();
 165:quantum/quantum.c ****       }
 166:quantum/quantum.c **** 	  return false;
 167:quantum/quantum.c ****       break;
 168:quantum/quantum.c **** 	case RGB_HUI:
 169:quantum/quantum.c **** 		if (record->event.pressed) {
 170:quantum/quantum.c **** 			rgblight_increase_hue();
 171:quantum/quantum.c ****       }
 172:quantum/quantum.c **** 	  return false;
 173:quantum/quantum.c ****       break;
 174:quantum/quantum.c **** 	case RGB_HUD:
 175:quantum/quantum.c **** 		if (record->event.pressed) {
 176:quantum/quantum.c **** 			rgblight_decrease_hue();
 177:quantum/quantum.c ****       }
 178:quantum/quantum.c **** 	  return false;
 179:quantum/quantum.c ****       break;
 180:quantum/quantum.c **** 	case RGB_SAI:
 181:quantum/quantum.c **** 		if (record->event.pressed) {
 182:quantum/quantum.c **** 			rgblight_increase_sat();
 183:quantum/quantum.c ****       }
 184:quantum/quantum.c **** 	  return false;
 185:quantum/quantum.c ****       break;
 186:quantum/quantum.c **** 	case RGB_SAD:
 187:quantum/quantum.c **** 		if (record->event.pressed) {
 188:quantum/quantum.c **** 			rgblight_decrease_sat();
 189:quantum/quantum.c ****       }
 190:quantum/quantum.c **** 	  return false;
 191:quantum/quantum.c ****       break;
 192:quantum/quantum.c **** 	case RGB_VAI:
 193:quantum/quantum.c **** 		if (record->event.pressed) {
 194:quantum/quantum.c **** 			rgblight_increase_val();
 195:quantum/quantum.c ****       }
 196:quantum/quantum.c **** 	  return false;
 197:quantum/quantum.c ****       break;
 198:quantum/quantum.c **** 	case RGB_VAD:
 199:quantum/quantum.c **** 		if (record->event.pressed) {
 200:quantum/quantum.c **** 			rgblight_decrease_val();
 201:quantum/quantum.c ****       }
 202:quantum/quantum.c **** 	  return false;
 203:quantum/quantum.c ****       break;
 204:quantum/quantum.c **** 	#endif
 205:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 206:quantum/quantum.c ****       if (record->event.pressed) {
 403               		.loc 1 206 0
 404 0068 F801      		movw r30,r16
 405 006a 8281      		ldd r24,Z+2
 406 006c 8823      		tst r24
 407 006e 01F4      		brne .+2
 408 0070 00C0      		rjmp .L50
 207:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 208:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 409               		.loc 1 208 0
 410 0072 0E94 0000 		call eeconfig_is_enabled
 411               	.LVL38:
 412 0076 8111      		cpse r24,__zero_reg__
 413 0078 00C0      		rjmp .L51
 209:quantum/quantum.c ****             eeconfig_init();
 414               		.loc 1 209 0
 415 007a 0E94 0000 		call eeconfig_init
 416               	.LVL39:
 417               	.L51:
 210:quantum/quantum.c ****         }
 211:quantum/quantum.c ****         /* keymap config */
 212:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 418               		.loc 1 212 0
 419 007e 0E94 0000 		call eeconfig_read_keymap
 420               	.LVL40:
 421 0082 90E0      		ldi r25,0
 422 0084 9093 0000 		sts keymap_config+1,r25
 423 0088 8093 0000 		sts keymap_config,r24
 213:quantum/quantum.c ****         switch (keycode)
 424               		.loc 1 213 0
 425 008c FE01      		movw r30,r28
 426 008e E350      		subi r30,3
 427 0090 F047      		sbci r31,112
 428 0092 E231      		cpi r30,18
 429 0094 F105      		cpc r31,__zero_reg__
 430 0096 00F4      		brsh .L52
 431 0098 E050      		subi r30,lo8(-(gs(.L54)))
 432 009a F040      		sbci r31,hi8(-(gs(.L54)))
 214:quantum/quantum.c ****         {
 215:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 216:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 217:quantum/quantum.c ****             break;
 218:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 219:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 220:quantum/quantum.c ****             break;
 221:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 222:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 223:quantum/quantum.c ****             break;
 224:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 225:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 226:quantum/quantum.c ****             break;
 227:quantum/quantum.c ****           case MAGIC_NO_GUI:
 228:quantum/quantum.c ****             keymap_config.no_gui = true;
 229:quantum/quantum.c ****             break;
 230:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 231:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 232:quantum/quantum.c ****             break;
 233:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 234:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 235:quantum/quantum.c ****             break;
 236:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 237:quantum/quantum.c ****             keymap_config.nkro = true;
 238:quantum/quantum.c ****             break;
 239:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 240:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 241:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 244:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 247:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 251:quantum/quantum.c ****             break;
 252:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 253:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 254:quantum/quantum.c ****             break;
 255:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 256:quantum/quantum.c ****             keymap_config.no_gui = false;
 257:quantum/quantum.c ****             break;
 258:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 259:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 260:quantum/quantum.c ****             break;
 261:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 262:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 263:quantum/quantum.c ****             break;
 264:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 265:quantum/quantum.c ****             keymap_config.nkro = false;
 266:quantum/quantum.c ****             break;
 267:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 268:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 269:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 272:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 433               		.loc 1 272 0
 434 009c 8091 0000 		lds r24,keymap_config
 213:quantum/quantum.c ****         switch (keycode)
 435               		.loc 1 213 0
 436 00a0 0C94 0000 		jmp __tablejump2__
 437               		.section	.progmem.gcc_sw_table.process_record_quantum,"a",@progbits
 438               		.p2align	1
 439               	.L54:
 440 0000 0000      		.word gs(.L53)
 441 0002 0000      		.word gs(.L55)
 442 0004 0000      		.word gs(.L104)
 443 0006 0000      		.word gs(.L57)
 444 0008 0000      		.word gs(.L58)
 445 000a 0000      		.word gs(.L59)
 446 000c 0000      		.word gs(.L60)
 447 000e 0000      		.word gs(.L61)
 448 0010 0000      		.word gs(.L62)
 449 0012 0000      		.word gs(.L63)
 450 0014 0000      		.word gs(.L64)
 451 0016 0000      		.word gs(.L103)
 452 0018 0000      		.word gs(.L66)
 453 001a 0000      		.word gs(.L67)
 454 001c 0000      		.word gs(.L68)
 455 001e 0000      		.word gs(.L69)
 456 0020 0000      		.word gs(.L70)
 457 0022 0000      		.word gs(.L71)
 458               		.section	.text.process_record_quantum
 459               	.L52:
 216:quantum/quantum.c ****             break;
 460               		.loc 1 216 0
 461 00a4 8091 0000 		lds r24,keymap_config
 462 00a8 8160      		ori r24,lo8(1<<0)
 463 00aa 00C0      		rjmp .L100
 464               	.L53:
 219:quantum/quantum.c ****             break;
 465               		.loc 1 219 0
 466 00ac 8260      		ori r24,lo8(1<<1)
 467 00ae 00C0      		rjmp .L100
 468               	.L55:
 222:quantum/quantum.c ****             break;
 469               		.loc 1 222 0
 470 00b0 8460      		ori r24,lo8(1<<2)
 471 00b2 00C0      		rjmp .L100
 472               	.L57:
 228:quantum/quantum.c ****             break;
 473               		.loc 1 228 0
 474 00b4 8061      		ori r24,lo8(1<<4)
 475 00b6 00C0      		rjmp .L100
 476               	.L58:
 231:quantum/quantum.c ****             break;
 477               		.loc 1 231 0
 478 00b8 8062      		ori r24,lo8(1<<5)
 479 00ba 00C0      		rjmp .L100
 480               	.L59:
 234:quantum/quantum.c ****             break;
 481               		.loc 1 234 0
 482 00bc 8064      		ori r24,lo8(1<<6)
 483 00be 00C0      		rjmp .L100
 484               	.L60:
 237:quantum/quantum.c ****             break;
 485               		.loc 1 237 0
 486 00c0 8068      		ori r24,lo8(1<<7)
 487 00c2 00C0      		rjmp .L100
 488               	.L61:
 241:quantum/quantum.c ****             break;
 489               		.loc 1 241 0
 490 00c4 8460      		ori r24,lo8(4)
 491               	.L104:
 492 00c6 8860      		ori r24,lo8(1<<3)
 493 00c8 00C0      		rjmp .L100
 494               	.L62:
 244:quantum/quantum.c ****             break;
 495               		.loc 1 244 0
 496 00ca 8E7F      		andi r24,lo8(~(1<<0))
 497 00cc 00C0      		rjmp .L100
 498               	.L63:
 247:quantum/quantum.c ****             break;
 499               		.loc 1 247 0
 500 00ce 8D7F      		andi r24,lo8(~(1<<1))
 501 00d0 00C0      		rjmp .L100
 502               	.L64:
 250:quantum/quantum.c ****             break;
 503               		.loc 1 250 0
 504 00d2 8B7F      		andi r24,lo8(~(1<<2))
 505 00d4 00C0      		rjmp .L100
 506               	.L66:
 256:quantum/quantum.c ****             break;
 507               		.loc 1 256 0
 508 00d6 8F7E      		andi r24,lo8(~(1<<4))
 509 00d8 00C0      		rjmp .L100
 510               	.L67:
 259:quantum/quantum.c ****             break;
 511               		.loc 1 259 0
 512 00da 8F7D      		andi r24,lo8(~(1<<5))
 513 00dc 00C0      		rjmp .L100
 514               	.L68:
 262:quantum/quantum.c ****             break;
 515               		.loc 1 262 0
 516 00de 8F7B      		andi r24,lo8(~(1<<6))
 517 00e0 00C0      		rjmp .L100
 518               	.L69:
 265:quantum/quantum.c ****             break;
 519               		.loc 1 265 0
 520 00e2 8F77      		andi r24,lo8(~(1<<7))
 521 00e4 00C0      		rjmp .L100
 522               	.L70:
 269:quantum/quantum.c ****             break;
 523               		.loc 1 269 0
 524 00e6 8B7F      		andi r24,lo8(-5)
 525               	.L103:
 526 00e8 877F      		andi r24,lo8(~(1<<3))
 527 00ea 00C0      		rjmp .L100
 528               	.L71:
 529               		.loc 1 272 0
 530 00ec 87FB      		bst r24,7
 531 00ee 2227      		clr r18
 532 00f0 20F9      		bld r18,0
 533 00f2 91E0      		ldi r25,lo8(1)
 534 00f4 9227      		eor r25,r18
 535 00f6 90FB      		bst r25,0
 536 00f8 87F9      		bld r24,7
 537               	.L100:
 538 00fa 8093 0000 		sts keymap_config,r24
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           default:
 275:quantum/quantum.c ****             break;
 276:quantum/quantum.c ****         }
 277:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 539               		.loc 1 277 0
 540 00fe 8091 0000 		lds r24,keymap_config
 541 0102 0E94 0000 		call eeconfig_update_keymap
 542               	.LVL41:
 278:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 543               		.loc 1 278 0
 544 0106 0E94 0000 		call clear_keyboard
 545               	.LVL42:
 279:quantum/quantum.c **** 
 280:quantum/quantum.c ****         return false;
 546               		.loc 1 280 0
 547 010a 00C0      		rjmp .L93
 548               	.L105:
 141:quantum/quantum.c ****     case RESET:
 549               		.loc 1 141 0
 550 010c C115      		cp r28,__zero_reg__
 551 010e E0E7      		ldi r30,112
 552 0110 DE07      		cpc r29,r30
 553 0112 01F0      		breq .L45
 554 0114 C130      		cpi r28,1
 555 0116 D047      		sbci r29,112
 556 0118 01F0      		breq .L48
 557               	.L79:
 281:quantum/quantum.c ****       }
 282:quantum/quantum.c ****       break;
 283:quantum/quantum.c ****     case KC_LSPO: {
 284:quantum/quantum.c ****       if (record->event.pressed) {
 285:quantum/quantum.c ****         shift_interrupted[0] = false;
 286:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 287:quantum/quantum.c ****       }
 288:quantum/quantum.c ****       else {
 289:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 290:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 291:quantum/quantum.c ****             shift_interrupted[0] = true;
 292:quantum/quantum.c ****             shift_interrupted[1] = true;
 293:quantum/quantum.c ****           }
 294:quantum/quantum.c ****         #endif
 295:quantum/quantum.c ****         if (!shift_interrupted[0]) {
 296:quantum/quantum.c ****           register_code(LSPO_KEY);
 297:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 298:quantum/quantum.c ****         }
 299:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 300:quantum/quantum.c ****       }
 301:quantum/quantum.c ****       return false;
 302:quantum/quantum.c ****       // break;
 303:quantum/quantum.c ****     }
 304:quantum/quantum.c **** 
 305:quantum/quantum.c ****     case KC_RSPC: {
 306:quantum/quantum.c ****       if (record->event.pressed) {
 307:quantum/quantum.c ****         shift_interrupted[1] = false;
 308:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 309:quantum/quantum.c ****       }
 310:quantum/quantum.c ****       else {
 311:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 312:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 313:quantum/quantum.c ****             shift_interrupted[0] = true;
 314:quantum/quantum.c ****             shift_interrupted[1] = true;
 315:quantum/quantum.c ****           }
 316:quantum/quantum.c ****         #endif
 317:quantum/quantum.c ****         if (!shift_interrupted[1]) {
 318:quantum/quantum.c ****           register_code(RSPC_KEY);
 319:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 320:quantum/quantum.c ****         }
 321:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 322:quantum/quantum.c ****       }
 323:quantum/quantum.c ****       return false;
 324:quantum/quantum.c ****       // break;
 325:quantum/quantum.c ****     }
 326:quantum/quantum.c ****     default: {
 327:quantum/quantum.c ****       shift_interrupted[0] = true;
 558               		.loc 1 327 0
 559 011a 81E0      		ldi r24,lo8(1)
 560 011c 8093 0000 		sts shift_interrupted,r24
 328:quantum/quantum.c ****       shift_interrupted[1] = true;
 561               		.loc 1 328 0
 562 0120 8093 0000 		sts shift_interrupted+1,r24
 563               	.L50:
 329:quantum/quantum.c ****       break;
 330:quantum/quantum.c ****     }
 331:quantum/quantum.c ****   }
 332:quantum/quantum.c **** 
 333:quantum/quantum.c ****   return process_action_kb(record);
 564               		.loc 1 333 0
 565 0124 C801      		movw r24,r16
 566               	/* epilogue start */
 334:quantum/quantum.c **** }
 567               		.loc 1 334 0
 568 0126 DF91      		pop r29
 569 0128 CF91      		pop r28
 570               	.LVL43:
 571 012a 1F91      		pop r17
 572 012c 0F91      		pop r16
 573               	.LVL44:
 333:quantum/quantum.c **** }
 574               		.loc 1 333 0
 575 012e 0C94 0000 		jmp process_action_kb
 576               	.LVL45:
 577               	.L45:
 143:quantum/quantum.c ****         reset_keyboard();
 578               		.loc 1 143 0
 579 0132 F801      		movw r30,r16
 580 0134 8281      		ldd r24,Z+2
 581 0136 8823      		tst r24
 582 0138 01F4      		brne .+2
 583 013a 00C0      		rjmp .L93
 144:quantum/quantum.c ****       }
 584               		.loc 1 144 0
 585 013c 0E94 0000 		call reset_keyboard
 586               	.LVL46:
 587 0140 00C0      		rjmp .L93
 588               	.L48:
 149:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 589               		.loc 1 149 0
 590 0142 F801      		movw r30,r16
 591 0144 8281      		ldd r24,Z+2
 592 0146 8823      		tst r24
 593 0148 01F0      		breq .L93
 151:quantum/quantum.c ****       }
 594               		.loc 1 151 0
 595 014a 8091 0000 		lds r24,debug_config
 596 014e 8160      		ori r24,lo8(1<<0)
 597 0150 8093 0000 		sts debug_config,r24
 598 0154 00C0      		rjmp .L93
 599               	.L80:
 141:quantum/quantum.c ****     case RESET:
 600               		.loc 1 141 0
 601 0156 CC33      		cpi r28,60
 602 0158 80E7      		ldi r24,112
 603 015a D807      		cpc r29,r24
 604 015c 01F4      		brne .L106
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 605               		.loc 1 284 0
 606 015e F801      		movw r30,r16
 607 0160 8281      		ldd r24,Z+2
 608 0162 8823      		tst r24
 609 0164 01F0      		breq .L74
 285:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 610               		.loc 1 285 0
 611 0166 1092 0000 		sts shift_interrupted,__zero_reg__
 286:quantum/quantum.c ****       }
 612               		.loc 1 286 0
 613 016a 82E0      		ldi r24,lo8(2)
 614 016c 00C0      		rjmp .L101
 615               	.L74:
 295:quantum/quantum.c ****           register_code(LSPO_KEY);
 616               		.loc 1 295 0
 617 016e 8091 0000 		lds r24,shift_interrupted
 618 0172 8111      		cpse r24,__zero_reg__
 619 0174 00C0      		rjmp .L75
 296:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 620               		.loc 1 296 0
 621 0176 86E2      		ldi r24,lo8(38)
 622 0178 0E94 0000 		call register_code
 623               	.LVL47:
 297:quantum/quantum.c ****         }
 624               		.loc 1 297 0
 625 017c 86E2      		ldi r24,lo8(38)
 626 017e 0E94 0000 		call unregister_code
 627               	.LVL48:
 628               	.L75:
 299:quantum/quantum.c ****       }
 629               		.loc 1 299 0
 630 0182 82E0      		ldi r24,lo8(2)
 631 0184 00C0      		rjmp .L102
 632               	.L106:
 141:quantum/quantum.c ****     case RESET:
 633               		.loc 1 141 0
 634 0186 CD33      		cpi r28,61
 635 0188 D047      		sbci r29,112
 636 018a 01F4      		brne .L79
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 637               		.loc 1 306 0
 638 018c F801      		movw r30,r16
 639 018e 8281      		ldd r24,Z+2
 640 0190 8823      		tst r24
 641 0192 01F0      		breq .L77
 307:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 642               		.loc 1 307 0
 643 0194 1092 0000 		sts shift_interrupted+1,__zero_reg__
 308:quantum/quantum.c ****       }
 644               		.loc 1 308 0
 645 0198 80E2      		ldi r24,lo8(32)
 646               	.L101:
 647 019a 0E94 0000 		call register_mods
 648               	.LVL49:
 649 019e 00C0      		rjmp .L93
 650               	.L77:
 317:quantum/quantum.c ****           register_code(RSPC_KEY);
 651               		.loc 1 317 0
 652 01a0 8091 0000 		lds r24,shift_interrupted+1
 653 01a4 8111      		cpse r24,__zero_reg__
 654 01a6 00C0      		rjmp .L78
 318:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 655               		.loc 1 318 0
 656 01a8 87E2      		ldi r24,lo8(39)
 657 01aa 0E94 0000 		call register_code
 658               	.LVL50:
 319:quantum/quantum.c ****         }
 659               		.loc 1 319 0
 660 01ae 87E2      		ldi r24,lo8(39)
 661 01b0 0E94 0000 		call unregister_code
 662               	.LVL51:
 663               	.L78:
 321:quantum/quantum.c ****       }
 664               		.loc 1 321 0
 665 01b4 80E2      		ldi r24,lo8(32)
 666               	.L102:
 667 01b6 0E94 0000 		call unregister_mods
 668               	.LVL52:
 669               	.L93:
 670               		.loc 1 334 0
 671 01ba 80E0      		ldi r24,0
 672               	/* epilogue start */
 673 01bc DF91      		pop r29
 674 01be CF91      		pop r28
 675               	.LVL53:
 676 01c0 1F91      		pop r17
 677 01c2 0F91      		pop r16
 678               	.LVL54:
 679 01c4 0895      		ret
 680               		.cfi_endproc
 681               	.LFE114:
 683               		.section	.text.send_string,"ax",@progbits
 684               	.global	send_string
 686               	send_string:
 687               	.LFB115:
 335:quantum/quantum.c **** 
 336:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 337:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 338:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 339:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 340:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 341:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 342:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 343:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 344:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 345:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 346:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 347:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 348:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 353:quantum/quantum.c **** };
 354:quantum/quantum.c **** 
 355:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 356:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 357:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 358:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 359:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 360:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 361:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 362:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 363:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 364:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 365:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 366:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 367:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 368:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 369:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 370:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 371:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 372:quantum/quantum.c **** };
 373:quantum/quantum.c **** 
 374:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 375:quantum/quantum.c **** #if 0
 376:quantum/quantum.c **** #include "keymap_colemak.h"
 377:quantum/quantum.c **** 
 378:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 379:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 380:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 381:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 382:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 383:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 384:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 385:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 386:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 387:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 388:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 389:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 390:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 395:quantum/quantum.c **** };
 396:quantum/quantum.c **** 
 397:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 398:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 399:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 400:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 401:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 402:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 403:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 404:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 405:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 406:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 407:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 408:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 409:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 410:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 411:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 412:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 413:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 414:quantum/quantum.c **** };
 415:quantum/quantum.c **** 
 416:quantum/quantum.c **** #endif
 417:quantum/quantum.c **** 
 418:quantum/quantum.c **** void send_string(const char *str) {
 688               		.loc 1 418 0
 689               		.cfi_startproc
 690               	.LVL55:
 691 0000 0F93      		push r16
 692               	.LCFI11:
 693               		.cfi_def_cfa_offset 3
 694               		.cfi_offset 16, -2
 695 0002 1F93      		push r17
 696               	.LCFI12:
 697               		.cfi_def_cfa_offset 4
 698               		.cfi_offset 17, -3
 699 0004 CF93      		push r28
 700               	.LCFI13:
 701               		.cfi_def_cfa_offset 5
 702               		.cfi_offset 28, -4
 703               	/* prologue: function */
 704               	/* frame size = 0 */
 705               	/* stack size = 3 */
 706               	.L__stack_usage = 3
 707 0006 8C01      		movw r16,r24
 708               	.LVL56:
 709               	.L111:
 710               	.LBB6:
 711               	.LBB7:
 419:quantum/quantum.c ****     while (1) {
 420:quantum/quantum.c ****         uint8_t keycode;
 421:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 712               		.loc 1 421 0
 713 0008 F801      		movw r30,r16
 714               	/* #APP */
 715               	 ;  421 "quantum/quantum.c" 1
 716 000a 2491      		lpm r18, Z
 717               		
 718               	 ;  0 "" 2
 719               	.LVL57:
 720               	/* #NOAPP */
 721               	.LBE7:
 422:quantum/quantum.c ****         if (!ascii_code) break;
 722               		.loc 1 422 0
 723 000c 2223      		tst r18
 724 000e 01F0      		breq .L107
 725               	.LBB8:
 423:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 726               		.loc 1 423 0
 727 0010 30E0      		ldi r19,0
 728               	.LVL58:
 729 0012 F901      		movw r30,r18
 730 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 731 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 732               	.LVL59:
 733               	/* #APP */
 734               	 ;  423 "quantum/quantum.c" 1
 735 0018 C491      		lpm r28, Z
 736               		
 737               	 ;  0 "" 2
 738               	.LVL60:
 739               	/* #NOAPP */
 740               	.LBE8:
 741               	.LBB9:
 424:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 742               		.loc 1 424 0
 743 001a F901      		movw r30,r18
 744               	.LVL61:
 745 001c E050      		subi r30,lo8(-(ascii_to_qwerty_shift_lut))
 746 001e F040      		sbci r31,hi8(-(ascii_to_qwerty_shift_lut))
 747               	.LVL62:
 748               	/* #APP */
 749               	 ;  424 "quantum/quantum.c" 1
 750 0020 2491      		lpm r18, Z
 751               		
 752               	 ;  0 "" 2
 753               	.LVL63:
 754               	/* #NOAPP */
 755               	.LBE9:
 756 0022 2223      		tst r18
 757 0024 01F0      		breq .L109
 425:quantum/quantum.c ****             register_code(KC_LSFT);
 758               		.loc 1 425 0
 759 0026 81EE      		ldi r24,lo8(-31)
 760 0028 0E94 0000 		call register_code
 761               	.LVL64:
 426:quantum/quantum.c ****             register_code(keycode);
 762               		.loc 1 426 0
 763 002c 8C2F      		mov r24,r28
 764 002e 0E94 0000 		call register_code
 765               	.LVL65:
 427:quantum/quantum.c ****             unregister_code(keycode);
 766               		.loc 1 427 0
 767 0032 8C2F      		mov r24,r28
 768 0034 0E94 0000 		call unregister_code
 769               	.LVL66:
 428:quantum/quantum.c ****             unregister_code(KC_LSFT);
 770               		.loc 1 428 0
 771 0038 81EE      		ldi r24,lo8(-31)
 772 003a 00C0      		rjmp .L112
 773               	.LVL67:
 774               	.L109:
 429:quantum/quantum.c ****         }
 430:quantum/quantum.c ****         else {
 431:quantum/quantum.c ****             register_code(keycode);
 775               		.loc 1 431 0
 776 003c 8C2F      		mov r24,r28
 777 003e 0E94 0000 		call register_code
 778               	.LVL68:
 432:quantum/quantum.c ****             unregister_code(keycode);
 779               		.loc 1 432 0
 780 0042 8C2F      		mov r24,r28
 781               	.L112:
 782 0044 0E94 0000 		call unregister_code
 783               	.LVL69:
 433:quantum/quantum.c ****         }
 434:quantum/quantum.c ****         ++str;
 784               		.loc 1 434 0
 785 0048 0F5F      		subi r16,-1
 786 004a 1F4F      		sbci r17,-1
 787               	.LVL70:
 788               	.LBE6:
 435:quantum/quantum.c ****     }
 789               		.loc 1 435 0
 790 004c 00C0      		rjmp .L111
 791               	.LVL71:
 792               	.L107:
 793               	/* epilogue start */
 436:quantum/quantum.c **** }
 794               		.loc 1 436 0
 795 004e CF91      		pop r28
 796 0050 1F91      		pop r17
 797 0052 0F91      		pop r16
 798               	.LVL72:
 799 0054 0895      		ret
 800               		.cfi_endproc
 801               	.LFE115:
 803               		.section	.text.update_tri_layer,"ax",@progbits
 804               	.global	update_tri_layer
 806               	update_tri_layer:
 807               	.LFB116:
 437:quantum/quantum.c **** 
 438:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 808               		.loc 1 438 0
 809               		.cfi_startproc
 810               	.LVL73:
 811 0000 CF92      		push r12
 812               	.LCFI14:
 813               		.cfi_def_cfa_offset 3
 814               		.cfi_offset 12, -2
 815 0002 DF92      		push r13
 816               	.LCFI15:
 817               		.cfi_def_cfa_offset 4
 818               		.cfi_offset 13, -3
 819 0004 EF92      		push r14
 820               	.LCFI16:
 821               		.cfi_def_cfa_offset 5
 822               		.cfi_offset 14, -4
 823 0006 FF92      		push r15
 824               	.LCFI17:
 825               		.cfi_def_cfa_offset 6
 826               		.cfi_offset 15, -5
 827 0008 0F93      		push r16
 828               	.LCFI18:
 829               		.cfi_def_cfa_offset 7
 830               		.cfi_offset 16, -6
 831 000a 1F93      		push r17
 832               	.LCFI19:
 833               		.cfi_def_cfa_offset 8
 834               		.cfi_offset 17, -7
 835               	/* prologue: function */
 836               	/* frame size = 0 */
 837               	/* stack size = 6 */
 838               	.L__stack_usage = 6
 839 000c 01E0      		ldi r16,lo8(1)
 840 000e 10E0      		ldi r17,0
 841 0010 20E0      		ldi r18,0
 842 0012 30E0      		ldi r19,0
 843 0014 6801      		movw r12,r16
 844 0016 7901      		movw r14,r18
 845 0018 00C0      		rjmp 2f
 846               		1:
 847 001a CC0C      		lsl r12
 848 001c DD1C      		rol r13
 849 001e EE1C      		rol r14
 850 0020 FF1C      		rol r15
 851               		2:
 852 0022 6A95      		dec r22
 853 0024 02F4      		brpl 1b
 854 0026 00C0      		rjmp 2f
 855               		1:
 856 0028 000F      		lsl r16
 857 002a 111F      		rol r17
 858 002c 221F      		rol r18
 859 002e 331F      		rol r19
 860               		2:
 861 0030 8A95      		dec r24
 862 0032 02F4      		brpl 1b
 863 0034 0C29      		or r16,r12
 864 0036 1D29      		or r17,r13
 865 0038 2E29      		or r18,r14
 866 003a 3F29      		or r19,r15
 439:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 867               		.loc 1 439 0
 868 003c 8091 0000 		lds r24,layer_state
 869 0040 9091 0000 		lds r25,layer_state+1
 870 0044 A091 0000 		lds r26,layer_state+2
 871 0048 B091 0000 		lds r27,layer_state+3
 872               	.LVL74:
 873 004c 8023      		and r24,r16
 874 004e 9123      		and r25,r17
 875 0050 A223      		and r26,r18
 876 0052 B323      		and r27,r19
 877 0054 0817      		cp r16,r24
 878 0056 1907      		cpc r17,r25
 879 0058 2A07      		cpc r18,r26
 880 005a 3B07      		cpc r19,r27
 881 005c 01F4      		brne .L114
 440:quantum/quantum.c ****     layer_on(layer3);
 882               		.loc 1 440 0
 883 005e 842F      		mov r24,r20
 884               	/* epilogue start */
 441:quantum/quantum.c ****   } else {
 442:quantum/quantum.c ****     layer_off(layer3);
 443:quantum/quantum.c ****   }
 444:quantum/quantum.c **** }
 885               		.loc 1 444 0
 886 0060 1F91      		pop r17
 887 0062 0F91      		pop r16
 888 0064 FF90      		pop r15
 889 0066 EF90      		pop r14
 890 0068 DF90      		pop r13
 891 006a CF90      		pop r12
 440:quantum/quantum.c ****     layer_on(layer3);
 892               		.loc 1 440 0
 893 006c 0C94 0000 		jmp layer_on
 894               	.LVL75:
 895               	.L114:
 442:quantum/quantum.c ****   }
 896               		.loc 1 442 0
 897 0070 842F      		mov r24,r20
 898               	/* epilogue start */
 899               		.loc 1 444 0
 900 0072 1F91      		pop r17
 901 0074 0F91      		pop r16
 902 0076 FF90      		pop r15
 903 0078 EF90      		pop r14
 904 007a DF90      		pop r13
 905 007c CF90      		pop r12
 442:quantum/quantum.c ****   }
 906               		.loc 1 442 0
 907 007e 0C94 0000 		jmp layer_off
 908               	.LVL76:
 909               		.cfi_endproc
 910               	.LFE116:
 912               		.section	.text.tap_random_base64,"ax",@progbits
 913               	.global	tap_random_base64
 915               	tap_random_base64:
 916               	.LFB117:
 445:quantum/quantum.c **** 
 446:quantum/quantum.c **** void tap_random_base64(void) {
 917               		.loc 1 446 0
 918               		.cfi_startproc
 919 0000 CF93      		push r28
 920               	.LCFI20:
 921               		.cfi_def_cfa_offset 3
 922               		.cfi_offset 28, -2
 923 0002 DF93      		push r29
 924               	.LCFI21:
 925               		.cfi_def_cfa_offset 4
 926               		.cfi_offset 29, -3
 927               	/* prologue: function */
 928               	/* frame size = 0 */
 929               	/* stack size = 2 */
 930               	.L__stack_usage = 2
 447:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 448:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 931               		.loc 1 448 0
 932 0004 26B5      		in r18,0x26
 933 0006 C091 8400 		lds r28,132
 934 000a D091 8500 		lds r29,132+1
 935 000e 4091 9400 		lds r20,148
 936 0012 5091 9500 		lds r21,148+1
 937 0016 8091 BE00 		lds r24,190
 938 001a 9091 BF00 		lds r25,190+1
 939 001e C40F      		add r28,r20
 940 0020 C20F      		add r28,r18
 941 0022 8C0F      		add r24,r28
 942 0024 C82F      		mov r28,r24
 943 0026 CF73      		andi r28,lo8(63)
 944               	.LVL77:
 449:quantum/quantum.c ****   #else
 450:quantum/quantum.c ****     uint8_t key = rand() % 64;
 451:quantum/quantum.c ****   #endif
 452:quantum/quantum.c ****   switch (key) {
 945               		.loc 1 452 0
 946 0028 CE33      		cpi r28,lo8(62)
 947 002a 00F4      		brsh .L117
 948 002c C533      		cpi r28,lo8(53)
 949 002e 00F4      		brsh .L118
 950 0030 CA31      		cpi r28,lo8(26)
 951 0032 00F0      		brlo .L116
 952 0034 C433      		cpi r28,lo8(52)
 953 0036 00F4      		brsh .L123
 453:quantum/quantum.c ****     case 0 ... 25:
 454:quantum/quantum.c ****       register_code(KC_LSFT);
 455:quantum/quantum.c ****       register_code(key + KC_A);
 456:quantum/quantum.c ****       unregister_code(key + KC_A);
 457:quantum/quantum.c ****       unregister_code(KC_LSFT);
 458:quantum/quantum.c ****       break;
 459:quantum/quantum.c ****     case 26 ... 51:
 460:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 954               		.loc 1 460 0
 955 0038 C651      		subi r28,lo8(-(-22))
 956               	.LVL78:
 957 003a 00C0      		rjmp .L126
 958               	.LVL79:
 959               	.L117:
 452:quantum/quantum.c ****     case 0 ... 25:
 960               		.loc 1 452 0
 961 003c CE33      		cpi r28,lo8(62)
 962 003e 01F0      		breq .L121
 963 0040 CF33      		cpi r28,lo8(63)
 964 0042 01F0      		breq .L122
 965               	.L116:
 454:quantum/quantum.c ****       register_code(key + KC_A);
 966               		.loc 1 454 0
 967 0044 81EE      		ldi r24,lo8(-31)
 968 0046 0E94 0000 		call register_code
 969               	.LVL80:
 455:quantum/quantum.c ****       unregister_code(key + KC_A);
 970               		.loc 1 455 0
 971 004a CC5F      		subi r28,lo8(-(4))
 972               	.LVL81:
 973 004c 8C2F      		mov r24,r28
 974 004e 0E94 0000 		call register_code
 975               	.LVL82:
 456:quantum/quantum.c ****       unregister_code(KC_LSFT);
 976               		.loc 1 456 0
 977 0052 8C2F      		mov r24,r28
 978 0054 00C0      		rjmp .L125
 979               	.LVL83:
 980               	.L123:
 461:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 462:quantum/quantum.c ****       break;
 463:quantum/quantum.c ****     case 52:
 464:quantum/quantum.c ****       register_code(KC_0);
 981               		.loc 1 464 0
 982 0056 87E2      		ldi r24,lo8(39)
 983 0058 0E94 0000 		call register_code
 984               	.LVL84:
 465:quantum/quantum.c ****       unregister_code(KC_0);
 985               		.loc 1 465 0
 986 005c 87E2      		ldi r24,lo8(39)
 987 005e 00C0      		rjmp .L124
 988               	.L118:
 466:quantum/quantum.c ****       break;
 467:quantum/quantum.c ****     case 53 ... 61:
 468:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 989               		.loc 1 468 0
 990 0060 C751      		subi r28,lo8(-(-23))
 991               	.LVL85:
 992               	.L126:
 993 0062 8C2F      		mov r24,r28
 994               	.LVL86:
 995 0064 0E94 0000 		call register_code
 996               	.LVL87:
 469:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 997               		.loc 1 469 0
 998 0068 8C2F      		mov r24,r28
 999 006a 00C0      		rjmp .L124
 1000               	.LVL88:
 1001               	.L121:
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 62:
 472:quantum/quantum.c ****       register_code(KC_LSFT);
 1002               		.loc 1 472 0
 1003 006c 81EE      		ldi r24,lo8(-31)
 1004 006e 0E94 0000 		call register_code
 1005               	.LVL89:
 473:quantum/quantum.c ****       register_code(KC_EQL);
 1006               		.loc 1 473 0
 1007 0072 8EE2      		ldi r24,lo8(46)
 1008 0074 0E94 0000 		call register_code
 1009               	.LVL90:
 474:quantum/quantum.c ****       unregister_code(KC_EQL);
 1010               		.loc 1 474 0
 1011 0078 8EE2      		ldi r24,lo8(46)
 1012               	.LVL91:
 1013               	.L125:
 1014 007a 0E94 0000 		call unregister_code
 1015               	.LVL92:
 475:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1016               		.loc 1 475 0
 1017 007e 81EE      		ldi r24,lo8(-31)
 1018 0080 00C0      		rjmp .L124
 1019               	.LVL93:
 1020               	.L122:
 476:quantum/quantum.c ****       break;
 477:quantum/quantum.c ****     case 63:
 478:quantum/quantum.c ****       register_code(KC_SLSH);
 1021               		.loc 1 478 0
 1022 0082 88E3      		ldi r24,lo8(56)
 1023 0084 0E94 0000 		call register_code
 1024               	.LVL94:
 479:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1025               		.loc 1 479 0
 1026 0088 88E3      		ldi r24,lo8(56)
 1027               	.LVL95:
 1028               	.L124:
 1029               	/* epilogue start */
 480:quantum/quantum.c ****       break;
 481:quantum/quantum.c ****   }
 482:quantum/quantum.c **** }
 1030               		.loc 1 482 0
 1031 008a DF91      		pop r29
 1032 008c CF91      		pop r28
 479:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1033               		.loc 1 479 0
 1034 008e 0C94 0000 		jmp unregister_code
 1035               	.LVL96:
 1036               		.cfi_endproc
 1037               	.LFE117:
 1039               		.section	.text.matrix_init_quantum,"ax",@progbits
 1040               	.global	matrix_init_quantum
 1042               	matrix_init_quantum:
 1043               	.LFB118:
 483:quantum/quantum.c **** 
 484:quantum/quantum.c **** void matrix_init_quantum() {
 1044               		.loc 1 484 0
 1045               		.cfi_startproc
 1046               	/* prologue: function */
 1047               	/* frame size = 0 */
 1048               	/* stack size = 0 */
 1049               	.L__stack_usage = 0
 485:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 486:quantum/quantum.c ****     backlight_init_ports();
 487:quantum/quantum.c ****   #endif
 488:quantum/quantum.c ****   matrix_init_kb();
 1050               		.loc 1 488 0
 1051 0000 0C94 0000 		jmp matrix_init_kb
 1052               	.LVL97:
 1053               		.cfi_endproc
 1054               	.LFE118:
 1056               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1057               	.global	matrix_scan_quantum
 1059               	matrix_scan_quantum:
 1060               	.LFB119:
 489:quantum/quantum.c **** }
 490:quantum/quantum.c **** 
 491:quantum/quantum.c **** void matrix_scan_quantum() {
 1061               		.loc 1 491 0
 1062               		.cfi_startproc
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 0 */
 1066               	.L__stack_usage = 0
 492:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 493:quantum/quantum.c ****     matrix_scan_music();
 494:quantum/quantum.c ****   #endif
 495:quantum/quantum.c **** 
 496:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 497:quantum/quantum.c ****     matrix_scan_tap_dance();
 1067               		.loc 1 497 0
 1068 0000 0E94 0000 		call matrix_scan_tap_dance
 1069               	.LVL98:
 498:quantum/quantum.c ****   #endif
 499:quantum/quantum.c ****   matrix_scan_kb();
 1070               		.loc 1 499 0
 1071 0004 0C94 0000 		jmp matrix_scan_kb
 1072               	.LVL99:
 1073               		.cfi_endproc
 1074               	.LFE119:
 1076               		.section	.text.backlight_init_ports,"ax",@progbits
 1077               		.weak	backlight_init_ports
 1079               	backlight_init_ports:
 1080               	.LFB133:
 1081               		.cfi_startproc
 1082               	/* prologue: function */
 1083               	/* frame size = 0 */
 1084               	/* stack size = 0 */
 1085               	.L__stack_usage = 0
 1086 0000 0895      		ret
 1087               		.cfi_endproc
 1088               	.LFE133:
 1090               		.section	.text.led_set_user,"ax",@progbits
 1091               		.weak	led_set_user
 1093               	led_set_user:
 1094               	.LFB122:
 500:quantum/quantum.c **** }
 501:quantum/quantum.c **** 
 502:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 503:quantum/quantum.c **** 
 504:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 505:quantum/quantum.c **** 
 506:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 507:quantum/quantum.c **** #  define COM1x1 COM1C1
 508:quantum/quantum.c **** #  define OCR1x  OCR1C
 509:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 510:quantum/quantum.c **** #  define COM1x1 COM1B1
 511:quantum/quantum.c **** #  define OCR1x  OCR1B
 512:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 513:quantum/quantum.c **** #  define COM1x1 COM1A1
 514:quantum/quantum.c **** #  define OCR1x  OCR1A
 515:quantum/quantum.c **** #else
 516:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 517:quantum/quantum.c **** #endif
 518:quantum/quantum.c **** 
 519:quantum/quantum.c **** __attribute__ ((weak))
 520:quantum/quantum.c **** void backlight_init_ports(void)
 521:quantum/quantum.c **** {
 522:quantum/quantum.c **** 
 523:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 524:quantum/quantum.c ****   // DDRx |= n
 525:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 526:quantum/quantum.c ****   // PORTx &= ~n
 527:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 528:quantum/quantum.c **** 
 529:quantum/quantum.c ****   // Use full 16-bit resolution.
 530:quantum/quantum.c ****   ICR1 = 0xFFFF;
 531:quantum/quantum.c **** 
 532:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 533:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 534:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 535:quantum/quantum.c **** 
 536:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 537:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 538:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 539:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 540:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 541:quantum/quantum.c **** 
 542:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 543:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 544:quantum/quantum.c **** 
 545:quantum/quantum.c ****   backlight_init();
 546:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 547:quantum/quantum.c ****     breathing_defaults();
 548:quantum/quantum.c ****   #endif
 549:quantum/quantum.c **** }
 550:quantum/quantum.c **** 
 551:quantum/quantum.c **** __attribute__ ((weak))
 552:quantum/quantum.c **** void backlight_set(uint8_t level)
 553:quantum/quantum.c **** {
 554:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 555:quantum/quantum.c ****   // PORTx &= ~n
 556:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 557:quantum/quantum.c **** 
 558:quantum/quantum.c ****   if ( level == 0 ) {
 559:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 560:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 561:quantum/quantum.c ****     OCR1x = 0x0;
 562:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 563:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 564:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 565:quantum/quantum.c ****     // Set the brightness
 566:quantum/quantum.c ****     OCR1x = 0xFFFF;
 567:quantum/quantum.c ****   } else {
 568:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 569:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 570:quantum/quantum.c ****     // Set the brightness
 571:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 572:quantum/quantum.c ****   }
 573:quantum/quantum.c **** 
 574:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 575:quantum/quantum.c ****     breathing_intensity_default();
 576:quantum/quantum.c ****   #endif
 577:quantum/quantum.c **** }
 578:quantum/quantum.c **** 
 579:quantum/quantum.c **** 
 580:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 581:quantum/quantum.c **** 
 582:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 583:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 584:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 585:quantum/quantum.c **** 
 586:quantum/quantum.c **** static uint8_t breath_intensity;
 587:quantum/quantum.c **** static uint8_t breath_speed;
 588:quantum/quantum.c **** static uint16_t breathing_index;
 589:quantum/quantum.c **** static uint8_t breathing_halt;
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** void breathing_enable(void)
 592:quantum/quantum.c **** {
 593:quantum/quantum.c ****     if (get_backlight_level() == 0)
 594:quantum/quantum.c ****     {
 595:quantum/quantum.c ****         breathing_index = 0;
 596:quantum/quantum.c ****     }
 597:quantum/quantum.c ****     else
 598:quantum/quantum.c ****     {
 599:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 600:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 601:quantum/quantum.c ****     }
 602:quantum/quantum.c **** 
 603:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 604:quantum/quantum.c **** 
 605:quantum/quantum.c ****     // Enable breathing interrupt
 606:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 607:quantum/quantum.c **** }
 608:quantum/quantum.c **** 
 609:quantum/quantum.c **** void breathing_pulse(void)
 610:quantum/quantum.c **** {
 611:quantum/quantum.c ****     if (get_backlight_level() == 0)
 612:quantum/quantum.c ****     {
 613:quantum/quantum.c ****         breathing_index = 0;
 614:quantum/quantum.c ****     }
 615:quantum/quantum.c ****     else
 616:quantum/quantum.c ****     {
 617:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 618:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 619:quantum/quantum.c ****     }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 622:quantum/quantum.c **** 
 623:quantum/quantum.c ****     // Enable breathing interrupt
 624:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 625:quantum/quantum.c **** }
 626:quantum/quantum.c **** 
 627:quantum/quantum.c **** void breathing_disable(void)
 628:quantum/quantum.c **** {
 629:quantum/quantum.c ****     // Disable breathing interrupt
 630:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 631:quantum/quantum.c ****     backlight_set(get_backlight_level());
 632:quantum/quantum.c **** }
 633:quantum/quantum.c **** 
 634:quantum/quantum.c **** void breathing_self_disable(void)
 635:quantum/quantum.c **** {
 636:quantum/quantum.c ****     if (get_backlight_level() == 0)
 637:quantum/quantum.c ****     {
 638:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 639:quantum/quantum.c ****     }
 640:quantum/quantum.c ****     else
 641:quantum/quantum.c ****     {
 642:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 643:quantum/quantum.c ****     }
 644:quantum/quantum.c **** 
 645:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 646:quantum/quantum.c **** }
 647:quantum/quantum.c **** 
 648:quantum/quantum.c **** void breathing_toggle(void)
 649:quantum/quantum.c **** {
 650:quantum/quantum.c ****     if (!is_breathing())
 651:quantum/quantum.c ****     {
 652:quantum/quantum.c ****         if (get_backlight_level() == 0)
 653:quantum/quantum.c ****         {
 654:quantum/quantum.c ****             breathing_index = 0;
 655:quantum/quantum.c ****         }
 656:quantum/quantum.c ****         else
 657:quantum/quantum.c ****         {
 658:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 659:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 660:quantum/quantum.c ****         }
 661:quantum/quantum.c **** 
 662:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 663:quantum/quantum.c ****     }
 664:quantum/quantum.c **** 
 665:quantum/quantum.c ****     // Toggle breathing interrupt
 666:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 667:quantum/quantum.c **** 
 668:quantum/quantum.c ****     // Restore backlight level
 669:quantum/quantum.c ****     if (!is_breathing())
 670:quantum/quantum.c ****     {
 671:quantum/quantum.c ****         backlight_set(get_backlight_level());
 672:quantum/quantum.c ****     }
 673:quantum/quantum.c **** }
 674:quantum/quantum.c **** 
 675:quantum/quantum.c **** bool is_breathing(void)
 676:quantum/quantum.c **** {
 677:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 678:quantum/quantum.c **** }
 679:quantum/quantum.c **** 
 680:quantum/quantum.c **** void breathing_intensity_default(void)
 681:quantum/quantum.c **** {
 682:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 683:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 684:quantum/quantum.c **** }
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 687:quantum/quantum.c **** {
 688:quantum/quantum.c ****     breath_intensity = value;
 689:quantum/quantum.c **** }
 690:quantum/quantum.c **** 
 691:quantum/quantum.c **** void breathing_speed_default(void)
 692:quantum/quantum.c **** {
 693:quantum/quantum.c ****     breath_speed = 4;
 694:quantum/quantum.c **** }
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 697:quantum/quantum.c **** {
 698:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 699:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 700:quantum/quantum.c **** 
 701:quantum/quantum.c ****     if (is_breathing_now)
 702:quantum/quantum.c ****     {
 703:quantum/quantum.c ****         // Disable breathing interrupt
 704:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 705:quantum/quantum.c ****     }
 706:quantum/quantum.c **** 
 707:quantum/quantum.c ****     breath_speed = value;
 708:quantum/quantum.c **** 
 709:quantum/quantum.c ****     if (is_breathing_now)
 710:quantum/quantum.c ****     {
 711:quantum/quantum.c ****         // Adjust index to account for new speed
 712:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 713:quantum/quantum.c **** 
 714:quantum/quantum.c ****         // Enable breathing interrupt
 715:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 716:quantum/quantum.c ****     }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** }
 719:quantum/quantum.c **** 
 720:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 721:quantum/quantum.c **** {
 722:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 723:quantum/quantum.c ****     {
 724:quantum/quantum.c ****         breathing_speed_set(0);
 725:quantum/quantum.c ****     }
 726:quantum/quantum.c ****     else
 727:quantum/quantum.c ****     {
 728:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 729:quantum/quantum.c ****     }
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(10);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_defaults(void)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     breathing_intensity_default();
 747:quantum/quantum.c ****     breathing_speed_default();
 748:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 749:quantum/quantum.c **** }
 750:quantum/quantum.c **** 
 751:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 752:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 753:quantum/quantum.c ****  *
 754:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 755:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 756:quantum/quantum.c ****  */
 757:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 758:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 759:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 760:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 761:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 762:quantum/quantum.c **** };
 763:quantum/quantum.c **** 
 764:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 765:quantum/quantum.c **** {
 766:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 767:quantum/quantum.c **** 
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 770:quantum/quantum.c **** 
 771:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 772:quantum/quantum.c ****     {
 773:quantum/quantum.c ****         // Disable breathing interrupt
 774:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 775:quantum/quantum.c ****     }
 776:quantum/quantum.c **** 
 777:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 778:quantum/quantum.c **** 
 779:quantum/quantum.c **** }
 780:quantum/quantum.c **** 
 781:quantum/quantum.c **** 
 782:quantum/quantum.c **** 
 783:quantum/quantum.c **** #endif // breathing
 784:quantum/quantum.c **** 
 785:quantum/quantum.c **** #else // backlight
 786:quantum/quantum.c **** 
 787:quantum/quantum.c **** __attribute__ ((weak))
 788:quantum/quantum.c **** void backlight_init_ports(void)
 789:quantum/quantum.c **** {
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** __attribute__ ((weak))
 794:quantum/quantum.c **** void backlight_set(uint8_t level)
 795:quantum/quantum.c **** {
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** }
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** #endif // backlight
 800:quantum/quantum.c **** 
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** __attribute__ ((weak))
 804:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1095               		.loc 1 804 0
 1096               		.cfi_startproc
 1097               	.LVL100:
 1098               	/* prologue: function */
 1099               	/* frame size = 0 */
 1100               	/* stack size = 0 */
 1101               	.L__stack_usage = 0
 1102 0000 0895      		ret
 1103               		.cfi_endproc
 1104               	.LFE122:
 1106               		.set	led_set_user.localalias.1,led_set_user
 1107               		.section	.text.backlight_set,"ax",@progbits
 1108               		.weak	backlight_set
 1110               	backlight_set:
 1111               	.LFB135:
 1112               		.cfi_startproc
 1113               	/* prologue: function */
 1114               	/* frame size = 0 */
 1115               	/* stack size = 0 */
 1116               	.L__stack_usage = 0
 1117 0000 0C94 0000 		jmp led_set_user.localalias.1
 1118               		.cfi_endproc
 1119               	.LFE135:
 1121               		.section	.text.led_set_kb,"ax",@progbits
 1122               		.weak	led_set_kb
 1124               	led_set_kb:
 1125               	.LFB123:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** }
 807:quantum/quantum.c **** 
 808:quantum/quantum.c **** __attribute__ ((weak))
 809:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1126               		.loc 1 809 0
 1127               		.cfi_startproc
 1128               	.LVL101:
 1129               	/* prologue: function */
 1130               	/* frame size = 0 */
 1131               	/* stack size = 0 */
 1132               	.L__stack_usage = 0
 810:quantum/quantum.c ****     led_set_user(usb_led);
 1133               		.loc 1 810 0
 1134 0000 0C94 0000 		jmp led_set_user
 1135               	.LVL102:
 1136               		.cfi_endproc
 1137               	.LFE123:
 1139               		.section	.text.led_init_ports,"ax",@progbits
 1140               		.weak	led_init_ports
 1142               	led_init_ports:
 1143               	.LFB131:
 1144               		.cfi_startproc
 1145               	/* prologue: function */
 1146               	/* frame size = 0 */
 1147               	/* stack size = 0 */
 1148               	.L__stack_usage = 0
 1149 0000 0895      		ret
 1150               		.cfi_endproc
 1151               	.LFE131:
 1153               		.section	.text.led_set,"ax",@progbits
 1154               		.weak	led_set
 1156               	led_set:
 1157               	.LFB125:
 811:quantum/quantum.c **** }
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** __attribute__ ((weak))
 814:quantum/quantum.c **** void led_init_ports(void)
 815:quantum/quantum.c **** {
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** }
 818:quantum/quantum.c **** 
 819:quantum/quantum.c **** __attribute__ ((weak))
 820:quantum/quantum.c **** void led_set(uint8_t usb_led)
 821:quantum/quantum.c **** {
 1158               		.loc 1 821 0
 1159               		.cfi_startproc
 1160               	.LVL103:
 1161               	/* prologue: function */
 1162               	/* frame size = 0 */
 1163               	/* stack size = 0 */
 1164               	.L__stack_usage = 0
 822:quantum/quantum.c **** 
 823:quantum/quantum.c ****   // Example LED Code
 824:quantum/quantum.c ****   //
 825:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 826:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 827:quantum/quantum.c ****     // {
 828:quantum/quantum.c ****     //     // Output high.
 829:quantum/quantum.c ****     //     DDRE |= (1<<6);
 830:quantum/quantum.c ****     //     PORTE |= (1<<6);
 831:quantum/quantum.c ****     // }
 832:quantum/quantum.c ****     // else
 833:quantum/quantum.c ****     // {
 834:quantum/quantum.c ****     //     // Output low.
 835:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 836:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 837:quantum/quantum.c ****     // }
 838:quantum/quantum.c **** 
 839:quantum/quantum.c ****   led_set_kb(usb_led);
 1165               		.loc 1 839 0
 1166 0000 0C94 0000 		jmp led_set_kb
 1167               	.LVL104:
 1168               		.cfi_endproc
 1169               	.LFE125:
 1171               		.section	.text.startup_user,"ax",@progbits
 1172               		.weak	startup_user
 1174               	startup_user:
 1175               	.LFB129:
 1176               		.cfi_startproc
 1177               	/* prologue: function */
 1178               	/* frame size = 0 */
 1179               	/* stack size = 0 */
 1180               	.L__stack_usage = 0
 1181 0000 0895      		ret
 1182               		.cfi_endproc
 1183               	.LFE129:
 1185               		.section	.text.shutdown_user,"ax",@progbits
 1186               		.weak	shutdown_user
 1188               	shutdown_user:
 1189               	.LFB127:
 840:quantum/quantum.c **** }
 841:quantum/quantum.c **** 
 842:quantum/quantum.c **** 
 843:quantum/quantum.c **** //------------------------------------------------------------------------------
 844:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
 845:quantum/quantum.c **** // different events such as startup and bootloader jump
 846:quantum/quantum.c **** 
 847:quantum/quantum.c **** __attribute__ ((weak))
 848:quantum/quantum.c **** void startup_user() {}
 849:quantum/quantum.c **** 
 850:quantum/quantum.c **** __attribute__ ((weak))
 851:quantum/quantum.c **** void shutdown_user() {}
 1190               		.loc 1 851 0
 1191               		.cfi_startproc
 1192               	/* prologue: function */
 1193               	/* frame size = 0 */
 1194               	/* stack size = 0 */
 1195               	.L__stack_usage = 0
 1196 0000 0895      		ret
 1197               		.cfi_endproc
 1198               	.LFE127:
 1200               	.global	ascii_to_qwerty_keycode_lut
 1201               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1204               	ascii_to_qwerty_keycode_lut:
 1205 0000 00        		.byte	0
 1206 0001 00        		.byte	0
 1207 0002 00        		.byte	0
 1208 0003 00        		.byte	0
 1209 0004 00        		.byte	0
 1210 0005 00        		.byte	0
 1211 0006 00        		.byte	0
 1212 0007 00        		.byte	0
 1213 0008 2A        		.byte	42
 1214 0009 2B        		.byte	43
 1215 000a 28        		.byte	40
 1216 000b 00        		.byte	0
 1217 000c 00        		.byte	0
 1218 000d 00        		.byte	0
 1219 000e 00        		.byte	0
 1220 000f 00        		.byte	0
 1221 0010 00        		.byte	0
 1222 0011 00        		.byte	0
 1223 0012 00        		.byte	0
 1224 0013 00        		.byte	0
 1225 0014 00        		.byte	0
 1226 0015 00        		.byte	0
 1227 0016 00        		.byte	0
 1228 0017 00        		.byte	0
 1229 0018 00        		.byte	0
 1230 0019 00        		.byte	0
 1231 001a 00        		.byte	0
 1232 001b 29        		.byte	41
 1233 001c 00        		.byte	0
 1234 001d 00        		.byte	0
 1235 001e 00        		.byte	0
 1236 001f 00        		.byte	0
 1237 0020 2C        		.byte	44
 1238 0021 1E        		.byte	30
 1239 0022 34        		.byte	52
 1240 0023 20        		.byte	32
 1241 0024 21        		.byte	33
 1242 0025 22        		.byte	34
 1243 0026 24        		.byte	36
 1244 0027 34        		.byte	52
 1245 0028 26        		.byte	38
 1246 0029 27        		.byte	39
 1247 002a 25        		.byte	37
 1248 002b 2E        		.byte	46
 1249 002c 36        		.byte	54
 1250 002d 2D        		.byte	45
 1251 002e 37        		.byte	55
 1252 002f 38        		.byte	56
 1253 0030 27        		.byte	39
 1254 0031 1E        		.byte	30
 1255 0032 1F        		.byte	31
 1256 0033 20        		.byte	32
 1257 0034 21        		.byte	33
 1258 0035 22        		.byte	34
 1259 0036 23        		.byte	35
 1260 0037 24        		.byte	36
 1261 0038 25        		.byte	37
 1262 0039 26        		.byte	38
 1263 003a 33        		.byte	51
 1264 003b 33        		.byte	51
 1265 003c 36        		.byte	54
 1266 003d 2E        		.byte	46
 1267 003e 37        		.byte	55
 1268 003f 38        		.byte	56
 1269 0040 1F        		.byte	31
 1270 0041 04        		.byte	4
 1271 0042 05        		.byte	5
 1272 0043 06        		.byte	6
 1273 0044 07        		.byte	7
 1274 0045 08        		.byte	8
 1275 0046 09        		.byte	9
 1276 0047 0A        		.byte	10
 1277 0048 0B        		.byte	11
 1278 0049 0C        		.byte	12
 1279 004a 0D        		.byte	13
 1280 004b 0E        		.byte	14
 1281 004c 0F        		.byte	15
 1282 004d 10        		.byte	16
 1283 004e 11        		.byte	17
 1284 004f 12        		.byte	18
 1285 0050 13        		.byte	19
 1286 0051 14        		.byte	20
 1287 0052 15        		.byte	21
 1288 0053 16        		.byte	22
 1289 0054 17        		.byte	23
 1290 0055 18        		.byte	24
 1291 0056 19        		.byte	25
 1292 0057 1A        		.byte	26
 1293 0058 1B        		.byte	27
 1294 0059 1C        		.byte	28
 1295 005a 1D        		.byte	29
 1296 005b 2F        		.byte	47
 1297 005c 31        		.byte	49
 1298 005d 30        		.byte	48
 1299 005e 23        		.byte	35
 1300 005f 2D        		.byte	45
 1301 0060 35        		.byte	53
 1302 0061 04        		.byte	4
 1303 0062 05        		.byte	5
 1304 0063 06        		.byte	6
 1305 0064 07        		.byte	7
 1306 0065 08        		.byte	8
 1307 0066 09        		.byte	9
 1308 0067 0A        		.byte	10
 1309 0068 0B        		.byte	11
 1310 0069 0C        		.byte	12
 1311 006a 0D        		.byte	13
 1312 006b 0E        		.byte	14
 1313 006c 0F        		.byte	15
 1314 006d 10        		.byte	16
 1315 006e 11        		.byte	17
 1316 006f 12        		.byte	18
 1317 0070 13        		.byte	19
 1318 0071 14        		.byte	20
 1319 0072 15        		.byte	21
 1320 0073 16        		.byte	22
 1321 0074 17        		.byte	23
 1322 0075 18        		.byte	24
 1323 0076 19        		.byte	25
 1324 0077 1A        		.byte	26
 1325 0078 1B        		.byte	27
 1326 0079 1C        		.byte	28
 1327 007a 1D        		.byte	29
 1328 007b 2F        		.byte	47
 1329 007c 31        		.byte	49
 1330 007d 30        		.byte	48
 1331 007e 35        		.byte	53
 1332 007f 4C        		.byte	76
 1333               	.global	ascii_to_qwerty_shift_lut
 1334               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1337               	ascii_to_qwerty_shift_lut:
 1338 0000 00        		.byte	0
 1339 0001 00        		.byte	0
 1340 0002 00        		.byte	0
 1341 0003 00        		.byte	0
 1342 0004 00        		.byte	0
 1343 0005 00        		.byte	0
 1344 0006 00        		.byte	0
 1345 0007 00        		.byte	0
 1346 0008 00        		.byte	0
 1347 0009 00        		.byte	0
 1348 000a 00        		.byte	0
 1349 000b 00        		.byte	0
 1350 000c 00        		.byte	0
 1351 000d 00        		.byte	0
 1352 000e 00        		.byte	0
 1353 000f 00        		.byte	0
 1354 0010 00        		.byte	0
 1355 0011 00        		.byte	0
 1356 0012 00        		.byte	0
 1357 0013 00        		.byte	0
 1358 0014 00        		.byte	0
 1359 0015 00        		.byte	0
 1360 0016 00        		.byte	0
 1361 0017 00        		.byte	0
 1362 0018 00        		.byte	0
 1363 0019 00        		.byte	0
 1364 001a 00        		.byte	0
 1365 001b 00        		.byte	0
 1366 001c 00        		.byte	0
 1367 001d 00        		.byte	0
 1368 001e 00        		.byte	0
 1369 001f 00        		.byte	0
 1370 0020 00        		.byte	0
 1371 0021 01        		.byte	1
 1372 0022 01        		.byte	1
 1373 0023 01        		.byte	1
 1374 0024 01        		.byte	1
 1375 0025 01        		.byte	1
 1376 0026 01        		.byte	1
 1377 0027 00        		.byte	0
 1378 0028 01        		.byte	1
 1379 0029 01        		.byte	1
 1380 002a 01        		.byte	1
 1381 002b 01        		.byte	1
 1382 002c 00        		.byte	0
 1383 002d 00        		.byte	0
 1384 002e 00        		.byte	0
 1385 002f 00        		.byte	0
 1386 0030 00        		.byte	0
 1387 0031 00        		.byte	0
 1388 0032 00        		.byte	0
 1389 0033 00        		.byte	0
 1390 0034 00        		.byte	0
 1391 0035 00        		.byte	0
 1392 0036 00        		.byte	0
 1393 0037 00        		.byte	0
 1394 0038 00        		.byte	0
 1395 0039 00        		.byte	0
 1396 003a 01        		.byte	1
 1397 003b 00        		.byte	0
 1398 003c 01        		.byte	1
 1399 003d 00        		.byte	0
 1400 003e 01        		.byte	1
 1401 003f 01        		.byte	1
 1402 0040 01        		.byte	1
 1403 0041 01        		.byte	1
 1404 0042 01        		.byte	1
 1405 0043 01        		.byte	1
 1406 0044 01        		.byte	1
 1407 0045 01        		.byte	1
 1408 0046 01        		.byte	1
 1409 0047 01        		.byte	1
 1410 0048 01        		.byte	1
 1411 0049 01        		.byte	1
 1412 004a 01        		.byte	1
 1413 004b 01        		.byte	1
 1414 004c 01        		.byte	1
 1415 004d 01        		.byte	1
 1416 004e 01        		.byte	1
 1417 004f 01        		.byte	1
 1418 0050 01        		.byte	1
 1419 0051 01        		.byte	1
 1420 0052 01        		.byte	1
 1421 0053 01        		.byte	1
 1422 0054 01        		.byte	1
 1423 0055 01        		.byte	1
 1424 0056 01        		.byte	1
 1425 0057 01        		.byte	1
 1426 0058 01        		.byte	1
 1427 0059 01        		.byte	1
 1428 005a 01        		.byte	1
 1429 005b 00        		.byte	0
 1430 005c 00        		.byte	0
 1431 005d 00        		.byte	0
 1432 005e 01        		.byte	1
 1433 005f 01        		.byte	1
 1434 0060 00        		.byte	0
 1435 0061 00        		.byte	0
 1436 0062 00        		.byte	0
 1437 0063 00        		.byte	0
 1438 0064 00        		.byte	0
 1439 0065 00        		.byte	0
 1440 0066 00        		.byte	0
 1441 0067 00        		.byte	0
 1442 0068 00        		.byte	0
 1443 0069 00        		.byte	0
 1444 006a 00        		.byte	0
 1445 006b 00        		.byte	0
 1446 006c 00        		.byte	0
 1447 006d 00        		.byte	0
 1448 006e 00        		.byte	0
 1449 006f 00        		.byte	0
 1450 0070 00        		.byte	0
 1451 0071 00        		.byte	0
 1452 0072 00        		.byte	0
 1453 0073 00        		.byte	0
 1454 0074 00        		.byte	0
 1455 0075 00        		.byte	0
 1456 0076 00        		.byte	0
 1457 0077 00        		.byte	0
 1458 0078 00        		.byte	0
 1459 0079 00        		.byte	0
 1460 007a 00        		.byte	0
 1461 007b 01        		.byte	1
 1462 007c 01        		.byte	1
 1463 007d 01        		.byte	1
 1464 007e 01        		.byte	1
 1465 007f 00        		.byte	0
 1466               		.section	.bss.shift_interrupted,"aw",@nobits
 1469               	shift_interrupted:
 1470 0000 0000      		.zero	2
 1471               		.text
 1472               	.Letext0:
 1473               		.file 3 "/usr/lib/avr/include/stdint.h"
 1474               		.file 4 "./tmk_core/common/keyboard.h"
 1475               		.file 5 "./tmk_core/common/action.h"
 1476               		.file 6 "./tmk_core/common/debug.h"
 1477               		.file 7 "quantum/keycode_config.h"
 1478               		.file 8 "./tmk_core/common/keycode.h"
 1479               		.file 9 "quantum/keymap.h"
 1480               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1481               		.file 11 "quantum/quantum.h"
 1482               		.file 12 "./tmk_core/common/bootloader.h"
 1483               		.file 13 "./tmk_core/common/action_layer.h"
 1484               		.file 14 "./quantum/process_keycode/process_tap_dance.h"
 1485               		.file 15 "./quantum/process_keycode/process_leader.h"
 1486               		.file 16 "./quantum/process_keycode/process_unicode.h"
 1487               		.file 17 "./tmk_core/common/eeconfig.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccS2HURw.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccS2HURw.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccS2HURw.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccS2HURw.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccS2HURw.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccS2HURw.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccS2HURw.s:152    .text.register_code16:0000000000000000 register_code16
     /tmp/ccS2HURw.s:185    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccS2HURw.s:224    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccS2HURw.s:243    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccS2HURw.s:262    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccS2HURw.s:280    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccS2HURw.s:316    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccS2HURw.s:1469   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccS2HURw.s:686    .text.send_string:0000000000000000 send_string
     /tmp/ccS2HURw.s:1204   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccS2HURw.s:1337   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccS2HURw.s:806    .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccS2HURw.s:915    .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccS2HURw.s:1042   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccS2HURw.s:1059   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccS2HURw.s:1079   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccS2HURw.s:1093   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccS2HURw.s:1093   .text.led_set_user:0000000000000000 led_set_user.localalias.1
     /tmp/ccS2HURw.s:1110   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccS2HURw.s:1124   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccS2HURw.s:1142   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccS2HURw.s:1156   .text.led_set:0000000000000000 led_set
     /tmp/ccS2HURw.s:1174   .text.startup_user:0000000000000000 startup_user
     /tmp/ccS2HURw.s:1188   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
process_tap_dance
process_leader
process_unicode
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
debug_config
register_mods
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
